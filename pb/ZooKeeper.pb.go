//*
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-rc.1
// 	protoc        v3.17.3
// source: ZooKeeper.proto

// ZNode data in hbase are serialized protobufs with a four byte
// 'magic' 'PBUF' prefix.

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SplitLogTask_State int32

const (
	SplitLogTask_UNASSIGNED SplitLogTask_State = 0
	SplitLogTask_OWNED      SplitLogTask_State = 1
	SplitLogTask_RESIGNED   SplitLogTask_State = 2
	SplitLogTask_DONE       SplitLogTask_State = 3
	SplitLogTask_ERR        SplitLogTask_State = 4
)

// Enum value maps for SplitLogTask_State.
var (
	SplitLogTask_State_name = map[int32]string{
		0: "UNASSIGNED",
		1: "OWNED",
		2: "RESIGNED",
		3: "DONE",
		4: "ERR",
	}
	SplitLogTask_State_value = map[string]int32{
		"UNASSIGNED": 0,
		"OWNED":      1,
		"RESIGNED":   2,
		"DONE":       3,
		"ERR":        4,
	}
)

func (x SplitLogTask_State) Enum() *SplitLogTask_State {
	p := new(SplitLogTask_State)
	*p = x
	return p
}

func (x SplitLogTask_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SplitLogTask_State) Descriptor() protoreflect.EnumDescriptor {
	return file_ZooKeeper_proto_enumTypes[0].Descriptor()
}

func (SplitLogTask_State) Type() protoreflect.EnumType {
	return &file_ZooKeeper_proto_enumTypes[0]
}

func (x SplitLogTask_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SplitLogTask_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SplitLogTask_State(num)
	return nil
}

// Deprecated: Use SplitLogTask_State.Descriptor instead.
func (SplitLogTask_State) EnumDescriptor() ([]byte, []int) {
	return file_ZooKeeper_proto_rawDescGZIP(), []int{3, 0}
}

// Table's current state
type DeprecatedTableState_State int32

const (
	DeprecatedTableState_ENABLED   DeprecatedTableState_State = 0
	DeprecatedTableState_DISABLED  DeprecatedTableState_State = 1
	DeprecatedTableState_DISABLING DeprecatedTableState_State = 2
	DeprecatedTableState_ENABLING  DeprecatedTableState_State = 3
)

// Enum value maps for DeprecatedTableState_State.
var (
	DeprecatedTableState_State_name = map[int32]string{
		0: "ENABLED",
		1: "DISABLED",
		2: "DISABLING",
		3: "ENABLING",
	}
	DeprecatedTableState_State_value = map[string]int32{
		"ENABLED":   0,
		"DISABLED":  1,
		"DISABLING": 2,
		"ENABLING":  3,
	}
)

func (x DeprecatedTableState_State) Enum() *DeprecatedTableState_State {
	p := new(DeprecatedTableState_State)
	*p = x
	return p
}

func (x DeprecatedTableState_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeprecatedTableState_State) Descriptor() protoreflect.EnumDescriptor {
	return file_ZooKeeper_proto_enumTypes[1].Descriptor()
}

func (DeprecatedTableState_State) Type() protoreflect.EnumType {
	return &file_ZooKeeper_proto_enumTypes[1]
}

func (x DeprecatedTableState_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeprecatedTableState_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeprecatedTableState_State(num)
	return nil
}

// Deprecated: Use DeprecatedTableState_State.Descriptor instead.
func (DeprecatedTableState_State) EnumDescriptor() ([]byte, []int) {
	return file_ZooKeeper_proto_rawDescGZIP(), []int{4, 0}
}

//*
// Content of the meta-region-server znode.
type MetaRegionServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ServerName hosting the meta region currently, or destination server,
	// if meta region is in transition.
	Server *ServerName `protobuf:"bytes,1,req,name=server" json:"server,omitempty"`
	// The major version of the rpc the server speaks.  This is used so that
	// clients connecting to the cluster can have prior knowledge of what version
	// to send to a RegionServer.  AsyncHBase will use this to detect versions.
	RpcVersion *uint32 `protobuf:"varint,2,opt,name=rpc_version,json=rpcVersion" json:"rpc_version,omitempty"`
	// State of the region transition. OPEN means fully operational 'hbase:meta'
	State *RegionState_State `protobuf:"varint,3,opt,name=state,enum=hbase.pb.RegionState_State" json:"state,omitempty"`
}

func (x *MetaRegionServer) Reset() {
	*x = MetaRegionServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ZooKeeper_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaRegionServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaRegionServer) ProtoMessage() {}

func (x *MetaRegionServer) ProtoReflect() protoreflect.Message {
	mi := &file_ZooKeeper_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaRegionServer.ProtoReflect.Descriptor instead.
func (*MetaRegionServer) Descriptor() ([]byte, []int) {
	return file_ZooKeeper_proto_rawDescGZIP(), []int{0}
}

func (x *MetaRegionServer) GetServer() *ServerName {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *MetaRegionServer) GetRpcVersion() uint32 {
	if x != nil && x.RpcVersion != nil {
		return *x.RpcVersion
	}
	return 0
}

func (x *MetaRegionServer) GetState() RegionState_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return RegionState_OFFLINE
}

//*
// Content of the master znode.
type Master struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ServerName of the current Master
	Master *ServerName `protobuf:"bytes,1,req,name=master" json:"master,omitempty"`
	// Major RPC version so that clients can know what version the master can accept.
	RpcVersion *uint32 `protobuf:"varint,2,opt,name=rpc_version,json=rpcVersion" json:"rpc_version,omitempty"`
	InfoPort   *uint32 `protobuf:"varint,3,opt,name=info_port,json=infoPort" json:"info_port,omitempty"`
}

func (x *Master) Reset() {
	*x = Master{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ZooKeeper_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Master) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Master) ProtoMessage() {}

func (x *Master) ProtoReflect() protoreflect.Message {
	mi := &file_ZooKeeper_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Master.ProtoReflect.Descriptor instead.
func (*Master) Descriptor() ([]byte, []int) {
	return file_ZooKeeper_proto_rawDescGZIP(), []int{1}
}

func (x *Master) GetMaster() *ServerName {
	if x != nil {
		return x.Master
	}
	return nil
}

func (x *Master) GetRpcVersion() uint32 {
	if x != nil && x.RpcVersion != nil {
		return *x.RpcVersion
	}
	return 0
}

func (x *Master) GetInfoPort() uint32 {
	if x != nil && x.InfoPort != nil {
		return *x.InfoPort
	}
	return 0
}

//*
// Content of the '/hbase/running', cluster state, znode.
type ClusterUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If this znode is present, cluster is up.  Currently
	// the data is cluster start_date.
	StartDate *string `protobuf:"bytes,1,req,name=start_date,json=startDate" json:"start_date,omitempty"`
}

func (x *ClusterUp) Reset() {
	*x = ClusterUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ZooKeeper_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterUp) ProtoMessage() {}

func (x *ClusterUp) ProtoReflect() protoreflect.Message {
	mi := &file_ZooKeeper_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterUp.ProtoReflect.Descriptor instead.
func (*ClusterUp) Descriptor() ([]byte, []int) {
	return file_ZooKeeper_proto_rawDescGZIP(), []int{2}
}

func (x *ClusterUp) GetStartDate() string {
	if x != nil && x.StartDate != nil {
		return *x.StartDate
	}
	return ""
}

//*
// WAL SplitLog directory znodes have this for content.  Used doing distributed
// WAL splitting.  Holds current state and name of server that originated split.
type SplitLogTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State      *SplitLogTask_State `protobuf:"varint,1,req,name=state,enum=hbase.pb.SplitLogTask_State" json:"state,omitempty"`
	ServerName *ServerName         `protobuf:"bytes,2,req,name=server_name,json=serverName" json:"server_name,omitempty"` // optional RecoveryMode DEPRECATED_mode = 3 [default = UNKNOWN];
}

func (x *SplitLogTask) Reset() {
	*x = SplitLogTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ZooKeeper_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitLogTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitLogTask) ProtoMessage() {}

func (x *SplitLogTask) ProtoReflect() protoreflect.Message {
	mi := &file_ZooKeeper_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitLogTask.ProtoReflect.Descriptor instead.
func (*SplitLogTask) Descriptor() ([]byte, []int) {
	return file_ZooKeeper_proto_rawDescGZIP(), []int{3}
}

func (x *SplitLogTask) GetState() SplitLogTask_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return SplitLogTask_UNASSIGNED
}

func (x *SplitLogTask) GetServerName() *ServerName {
	if x != nil {
		return x.ServerName
	}
	return nil
}

//*
// The znode that holds state of table.
// Deprected, table state is stored in hbase:meta since 2.0.0.
type DeprecatedTableState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the table's state.  If no znode for a table,
	// its state is presumed enabled.  See o.a.h.h.zookeeper.ZKTable class
	// for more.
	State *DeprecatedTableState_State `protobuf:"varint,1,req,name=state,enum=hbase.pb.DeprecatedTableState_State,def=0" json:"state,omitempty"`
}

// Default values for DeprecatedTableState fields.
const (
	Default_DeprecatedTableState_State = DeprecatedTableState_ENABLED
)

func (x *DeprecatedTableState) Reset() {
	*x = DeprecatedTableState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ZooKeeper_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeprecatedTableState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeprecatedTableState) ProtoMessage() {}

func (x *DeprecatedTableState) ProtoReflect() protoreflect.Message {
	mi := &file_ZooKeeper_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeprecatedTableState.ProtoReflect.Descriptor instead.
func (*DeprecatedTableState) Descriptor() ([]byte, []int) {
	return file_ZooKeeper_proto_rawDescGZIP(), []int{4}
}

func (x *DeprecatedTableState) GetState() DeprecatedTableState_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_DeprecatedTableState_State
}

//*
// State of the switch.
type SwitchState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *bool `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
}

func (x *SwitchState) Reset() {
	*x = SwitchState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ZooKeeper_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchState) ProtoMessage() {}

func (x *SwitchState) ProtoReflect() protoreflect.Message {
	mi := &file_ZooKeeper_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchState.ProtoReflect.Descriptor instead.
func (*SwitchState) Descriptor() ([]byte, []int) {
	return file_ZooKeeper_proto_rawDescGZIP(), []int{5}
}

func (x *SwitchState) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

var File_ZooKeeper_proto protoreflect.FileDescriptor

var file_ZooKeeper_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x5a, 0x6f, 0x6f, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x1a, 0x0b, 0x48, 0x42, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x01,
	0x0a, 0x10, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x70, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x70, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x74, 0x0a, 0x06, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x70, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x72, 0x70, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x2a, 0x0a, 0x09, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x0c, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x4c, 0x6f, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x43, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x55,
	0x4e, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4f,
	0x57, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x49, 0x47, 0x4e,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x07,
	0x0a, 0x03, 0x45, 0x52, 0x52, 0x10, 0x04, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x43, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x07, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x3f, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x41, 0x42,
	0x4c, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x22, 0x27, 0x0a, 0x0b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42,
	0x53, 0x0a, 0x31, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x68, 0x61,
	0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x68, 0x61, 0x64, 0x65,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x0f, 0x5a, 0x6f, 0x6f, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x48, 0x01, 0x5a, 0x05, 0x2e, 0x2e, 0x2f, 0x70, 0x62, 0x88, 0x01,
	0x01, 0xa0, 0x01, 0x01,
}

var (
	file_ZooKeeper_proto_rawDescOnce sync.Once
	file_ZooKeeper_proto_rawDescData = file_ZooKeeper_proto_rawDesc
)

func file_ZooKeeper_proto_rawDescGZIP() []byte {
	file_ZooKeeper_proto_rawDescOnce.Do(func() {
		file_ZooKeeper_proto_rawDescData = protoimpl.X.CompressGZIP(file_ZooKeeper_proto_rawDescData)
	})
	return file_ZooKeeper_proto_rawDescData
}

var file_ZooKeeper_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ZooKeeper_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_ZooKeeper_proto_goTypes = []interface{}{
	(SplitLogTask_State)(0),         // 0: hbase.pb.SplitLogTask.State
	(DeprecatedTableState_State)(0), // 1: hbase.pb.DeprecatedTableState.State
	(*MetaRegionServer)(nil),        // 2: hbase.pb.MetaRegionServer
	(*Master)(nil),                  // 3: hbase.pb.Master
	(*ClusterUp)(nil),               // 4: hbase.pb.ClusterUp
	(*SplitLogTask)(nil),            // 5: hbase.pb.SplitLogTask
	(*DeprecatedTableState)(nil),    // 6: hbase.pb.DeprecatedTableState
	(*SwitchState)(nil),             // 7: hbase.pb.SwitchState
	(*ServerName)(nil),              // 8: hbase.pb.ServerName
	(RegionState_State)(0),          // 9: hbase.pb.RegionState.State
}
var file_ZooKeeper_proto_depIdxs = []int32{
	8, // 0: hbase.pb.MetaRegionServer.server:type_name -> hbase.pb.ServerName
	9, // 1: hbase.pb.MetaRegionServer.state:type_name -> hbase.pb.RegionState.State
	8, // 2: hbase.pb.Master.master:type_name -> hbase.pb.ServerName
	0, // 3: hbase.pb.SplitLogTask.state:type_name -> hbase.pb.SplitLogTask.State
	8, // 4: hbase.pb.SplitLogTask.server_name:type_name -> hbase.pb.ServerName
	1, // 5: hbase.pb.DeprecatedTableState.state:type_name -> hbase.pb.DeprecatedTableState.State
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_ZooKeeper_proto_init() }
func file_ZooKeeper_proto_init() {
	if File_ZooKeeper_proto != nil {
		return
	}
	file_HBase_proto_init()
	file_ClusterStatus_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ZooKeeper_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaRegionServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ZooKeeper_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Master); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ZooKeeper_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ZooKeeper_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitLogTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ZooKeeper_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeprecatedTableState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ZooKeeper_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ZooKeeper_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ZooKeeper_proto_goTypes,
		DependencyIndexes: file_ZooKeeper_proto_depIdxs,
		EnumInfos:         file_ZooKeeper_proto_enumTypes,
		MessageInfos:      file_ZooKeeper_proto_msgTypes,
	}.Build()
	File_ZooKeeper_proto = out.File
	file_ZooKeeper_proto_rawDesc = nil
	file_ZooKeeper_proto_goTypes = nil
	file_ZooKeeper_proto_depIdxs = nil
}
