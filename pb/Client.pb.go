//*
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-rc.1
// 	protoc        v3.17.3
// source: Client.proto

// This file contains protocol buffers that are used for Client service.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Consistency defines the expected consistency level for an operation.
type Consistency int32

const (
	Consistency_STRONG   Consistency = 0
	Consistency_TIMELINE Consistency = 1
)

// Enum value maps for Consistency.
var (
	Consistency_name = map[int32]string{
		0: "STRONG",
		1: "TIMELINE",
	}
	Consistency_value = map[string]int32{
		"STRONG":   0,
		"TIMELINE": 1,
	}
)

func (x Consistency) Enum() *Consistency {
	p := new(Consistency)
	*p = x
	return p
}

func (x Consistency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Consistency) Descriptor() protoreflect.EnumDescriptor {
	return file_Client_proto_enumTypes[0].Descriptor()
}

func (Consistency) Type() protoreflect.EnumType {
	return &file_Client_proto_enumTypes[0]
}

func (x Consistency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Consistency) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Consistency(num)
	return nil
}

// Deprecated: Use Consistency.Descriptor instead.
func (Consistency) EnumDescriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{0}
}

type MutationProto_Durability int32

const (
	MutationProto_USE_DEFAULT MutationProto_Durability = 0
	MutationProto_SKIP_WAL    MutationProto_Durability = 1
	MutationProto_ASYNC_WAL   MutationProto_Durability = 2
	MutationProto_SYNC_WAL    MutationProto_Durability = 3
	MutationProto_FSYNC_WAL   MutationProto_Durability = 4
)

// Enum value maps for MutationProto_Durability.
var (
	MutationProto_Durability_name = map[int32]string{
		0: "USE_DEFAULT",
		1: "SKIP_WAL",
		2: "ASYNC_WAL",
		3: "SYNC_WAL",
		4: "FSYNC_WAL",
	}
	MutationProto_Durability_value = map[string]int32{
		"USE_DEFAULT": 0,
		"SKIP_WAL":    1,
		"ASYNC_WAL":   2,
		"SYNC_WAL":    3,
		"FSYNC_WAL":   4,
	}
)

func (x MutationProto_Durability) Enum() *MutationProto_Durability {
	p := new(MutationProto_Durability)
	*p = x
	return p
}

func (x MutationProto_Durability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MutationProto_Durability) Descriptor() protoreflect.EnumDescriptor {
	return file_Client_proto_enumTypes[1].Descriptor()
}

func (MutationProto_Durability) Type() protoreflect.EnumType {
	return &file_Client_proto_enumTypes[1]
}

func (x MutationProto_Durability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MutationProto_Durability) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MutationProto_Durability(num)
	return nil
}

// Deprecated: Use MutationProto_Durability.Descriptor instead.
func (MutationProto_Durability) EnumDescriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{8, 0}
}

type MutationProto_MutationType int32

const (
	MutationProto_APPEND    MutationProto_MutationType = 0
	MutationProto_INCREMENT MutationProto_MutationType = 1
	MutationProto_PUT       MutationProto_MutationType = 2
	MutationProto_DELETE    MutationProto_MutationType = 3
)

// Enum value maps for MutationProto_MutationType.
var (
	MutationProto_MutationType_name = map[int32]string{
		0: "APPEND",
		1: "INCREMENT",
		2: "PUT",
		3: "DELETE",
	}
	MutationProto_MutationType_value = map[string]int32{
		"APPEND":    0,
		"INCREMENT": 1,
		"PUT":       2,
		"DELETE":    3,
	}
)

func (x MutationProto_MutationType) Enum() *MutationProto_MutationType {
	p := new(MutationProto_MutationType)
	*p = x
	return p
}

func (x MutationProto_MutationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MutationProto_MutationType) Descriptor() protoreflect.EnumDescriptor {
	return file_Client_proto_enumTypes[2].Descriptor()
}

func (MutationProto_MutationType) Type() protoreflect.EnumType {
	return &file_Client_proto_enumTypes[2]
}

func (x MutationProto_MutationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MutationProto_MutationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MutationProto_MutationType(num)
	return nil
}

// Deprecated: Use MutationProto_MutationType.Descriptor instead.
func (MutationProto_MutationType) EnumDescriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{8, 1}
}

type MutationProto_DeleteType int32

const (
	MutationProto_DELETE_ONE_VERSION       MutationProto_DeleteType = 0
	MutationProto_DELETE_MULTIPLE_VERSIONS MutationProto_DeleteType = 1
	MutationProto_DELETE_FAMILY            MutationProto_DeleteType = 2
	MutationProto_DELETE_FAMILY_VERSION    MutationProto_DeleteType = 3
)

// Enum value maps for MutationProto_DeleteType.
var (
	MutationProto_DeleteType_name = map[int32]string{
		0: "DELETE_ONE_VERSION",
		1: "DELETE_MULTIPLE_VERSIONS",
		2: "DELETE_FAMILY",
		3: "DELETE_FAMILY_VERSION",
	}
	MutationProto_DeleteType_value = map[string]int32{
		"DELETE_ONE_VERSION":       0,
		"DELETE_MULTIPLE_VERSIONS": 1,
		"DELETE_FAMILY":            2,
		"DELETE_FAMILY_VERSION":    3,
	}
)

func (x MutationProto_DeleteType) Enum() *MutationProto_DeleteType {
	p := new(MutationProto_DeleteType)
	*p = x
	return p
}

func (x MutationProto_DeleteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MutationProto_DeleteType) Descriptor() protoreflect.EnumDescriptor {
	return file_Client_proto_enumTypes[3].Descriptor()
}

func (MutationProto_DeleteType) Type() protoreflect.EnumType {
	return &file_Client_proto_enumTypes[3]
}

func (x MutationProto_DeleteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MutationProto_DeleteType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MutationProto_DeleteType(num)
	return nil
}

// Deprecated: Use MutationProto_DeleteType.Descriptor instead.
func (MutationProto_DeleteType) EnumDescriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{8, 2}
}

type Scan_ReadType int32

const (
	Scan_DEFAULT Scan_ReadType = 0
	Scan_STREAM  Scan_ReadType = 1
	Scan_PREAD   Scan_ReadType = 2
)

// Enum value maps for Scan_ReadType.
var (
	Scan_ReadType_name = map[int32]string{
		0: "DEFAULT",
		1: "STREAM",
		2: "PREAD",
	}
	Scan_ReadType_value = map[string]int32{
		"DEFAULT": 0,
		"STREAM":  1,
		"PREAD":   2,
	}
)

func (x Scan_ReadType) Enum() *Scan_ReadType {
	p := new(Scan_ReadType)
	*p = x
	return p
}

func (x Scan_ReadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Scan_ReadType) Descriptor() protoreflect.EnumDescriptor {
	return file_Client_proto_enumTypes[4].Descriptor()
}

func (Scan_ReadType) Type() protoreflect.EnumType {
	return &file_Client_proto_enumTypes[4]
}

func (x Scan_ReadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Scan_ReadType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Scan_ReadType(num)
	return nil
}

// Deprecated: Use Scan_ReadType.Descriptor instead.
func (Scan_ReadType) EnumDescriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{11, 0}
}

//*
// The protocol buffer version of Authorizations.
type Authorizations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label []string `protobuf:"bytes,1,rep,name=label" json:"label,omitempty"`
}

func (x *Authorizations) Reset() {
	*x = Authorizations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authorizations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authorizations) ProtoMessage() {}

func (x *Authorizations) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authorizations.ProtoReflect.Descriptor instead.
func (*Authorizations) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{0}
}

func (x *Authorizations) GetLabel() []string {
	if x != nil {
		return x.Label
	}
	return nil
}

//*
// The protocol buffer version of CellVisibility.
type CellVisibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *string `protobuf:"bytes,1,req,name=expression" json:"expression,omitempty"`
}

func (x *CellVisibility) Reset() {
	*x = CellVisibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellVisibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellVisibility) ProtoMessage() {}

func (x *CellVisibility) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellVisibility.ProtoReflect.Descriptor instead.
func (*CellVisibility) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{1}
}

func (x *CellVisibility) GetExpression() string {
	if x != nil && x.Expression != nil {
		return *x.Expression
	}
	return ""
}

//*
// Container for a list of column qualifier names of a family.
type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Family    []byte   `protobuf:"bytes,1,req,name=family" json:"family,omitempty"`
	Qualifier [][]byte `protobuf:"bytes,2,rep,name=qualifier" json:"qualifier,omitempty"`
}

func (x *Column) Reset() {
	*x = Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{2}
}

func (x *Column) GetFamily() []byte {
	if x != nil {
		return x.Family
	}
	return nil
}

func (x *Column) GetQualifier() [][]byte {
	if x != nil {
		return x.Qualifier
	}
	return nil
}

//*
// The protocol buffer version of Get.
// Unless existence_only is specified, return all the requested data
// for the row that matches exactly.
type Get struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row         []byte           `protobuf:"bytes,1,req,name=row" json:"row,omitempty"`
	Column      []*Column        `protobuf:"bytes,2,rep,name=column" json:"column,omitempty"`
	Attribute   []*NameBytesPair `protobuf:"bytes,3,rep,name=attribute" json:"attribute,omitempty"`
	Filter      *Filter          `protobuf:"bytes,4,opt,name=filter" json:"filter,omitempty"`
	TimeRange   *TimeRange       `protobuf:"bytes,5,opt,name=time_range,json=timeRange" json:"time_range,omitempty"`
	MaxVersions *uint32          `protobuf:"varint,6,opt,name=max_versions,json=maxVersions,def=1" json:"max_versions,omitempty"`
	CacheBlocks *bool            `protobuf:"varint,7,opt,name=cache_blocks,json=cacheBlocks,def=1" json:"cache_blocks,omitempty"`
	StoreLimit  *uint32          `protobuf:"varint,8,opt,name=store_limit,json=storeLimit" json:"store_limit,omitempty"`
	StoreOffset *uint32          `protobuf:"varint,9,opt,name=store_offset,json=storeOffset" json:"store_offset,omitempty"`
	// The result isn't asked for, just check for
	// the existence.
	ExistenceOnly *bool `protobuf:"varint,10,opt,name=existence_only,json=existenceOnly,def=0" json:"existence_only,omitempty"`
	// If the row to get doesn't exist, return the
	// closest row before. Deprecated. No longer used!
	// Since hbase-2.0.0 but left in place so can test
	// for Gets with this set and throw Exception.
	ClosestRowBefore           *bool                    `protobuf:"varint,11,opt,name=closest_row_before,json=closestRowBefore,def=0" json:"closest_row_before,omitempty"`
	Consistency                *Consistency             `protobuf:"varint,12,opt,name=consistency,enum=hbase.pb.Consistency,def=0" json:"consistency,omitempty"`
	CfTimeRange                []*ColumnFamilyTimeRange `protobuf:"bytes,13,rep,name=cf_time_range,json=cfTimeRange" json:"cf_time_range,omitempty"`
	LoadColumnFamiliesOnDemand *bool                    `protobuf:"varint,14,opt,name=load_column_families_on_demand,json=loadColumnFamiliesOnDemand" json:"load_column_families_on_demand,omitempty"` // DO NOT add defaults to load_column_families_on_demand.
}

// Default values for Get fields.
const (
	Default_Get_MaxVersions      = uint32(1)
	Default_Get_CacheBlocks      = bool(true)
	Default_Get_ExistenceOnly    = bool(false)
	Default_Get_ClosestRowBefore = bool(false)
	Default_Get_Consistency      = Consistency_STRONG
)

func (x *Get) Reset() {
	*x = Get{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Get) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Get) ProtoMessage() {}

func (x *Get) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Get.ProtoReflect.Descriptor instead.
func (*Get) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{3}
}

func (x *Get) GetRow() []byte {
	if x != nil {
		return x.Row
	}
	return nil
}

func (x *Get) GetColumn() []*Column {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *Get) GetAttribute() []*NameBytesPair {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *Get) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *Get) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *Get) GetMaxVersions() uint32 {
	if x != nil && x.MaxVersions != nil {
		return *x.MaxVersions
	}
	return Default_Get_MaxVersions
}

func (x *Get) GetCacheBlocks() bool {
	if x != nil && x.CacheBlocks != nil {
		return *x.CacheBlocks
	}
	return Default_Get_CacheBlocks
}

func (x *Get) GetStoreLimit() uint32 {
	if x != nil && x.StoreLimit != nil {
		return *x.StoreLimit
	}
	return 0
}

func (x *Get) GetStoreOffset() uint32 {
	if x != nil && x.StoreOffset != nil {
		return *x.StoreOffset
	}
	return 0
}

func (x *Get) GetExistenceOnly() bool {
	if x != nil && x.ExistenceOnly != nil {
		return *x.ExistenceOnly
	}
	return Default_Get_ExistenceOnly
}

func (x *Get) GetClosestRowBefore() bool {
	if x != nil && x.ClosestRowBefore != nil {
		return *x.ClosestRowBefore
	}
	return Default_Get_ClosestRowBefore
}

func (x *Get) GetConsistency() Consistency {
	if x != nil && x.Consistency != nil {
		return *x.Consistency
	}
	return Default_Get_Consistency
}

func (x *Get) GetCfTimeRange() []*ColumnFamilyTimeRange {
	if x != nil {
		return x.CfTimeRange
	}
	return nil
}

func (x *Get) GetLoadColumnFamiliesOnDemand() bool {
	if x != nil && x.LoadColumnFamiliesOnDemand != nil {
		return *x.LoadColumnFamiliesOnDemand
	}
	return false
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result includes the Cells or else it just has a count of Cells
	// that are carried otherwise.
	Cell []*Cell `protobuf:"bytes,1,rep,name=cell" json:"cell,omitempty"`
	// The below count is set when the associated cells are
	// not part of this protobuf message; they are passed alongside
	// and then this Message is just a placeholder with metadata.
	// The count is needed to know how many to peel off the block of Cells as
	// ours.  NOTE: This is different from the pb managed cell_count of the
	// 'cell' field above which is non-null when the cells are pb'd.
	AssociatedCellCount *int32 `protobuf:"varint,2,opt,name=associated_cell_count,json=associatedCellCount" json:"associated_cell_count,omitempty"`
	// used for Get to check existence only. Not set if existence_only was not set to true
	//  in the query.
	Exists *bool `protobuf:"varint,3,opt,name=exists" json:"exists,omitempty"`
	// Whether or not the results are coming from possibly stale data
	Stale *bool `protobuf:"varint,4,opt,name=stale,def=0" json:"stale,omitempty"`
	// Whether or not the entire result could be returned. Results will be split when
	// the RPC chunk size limit is reached. Partial results contain only a subset of the
	// cells for a row and must be combined with a result containing the remaining cells
	// to form a complete result. The equivalent flag in o.a.h.h.client.Result is
	// mayHaveMoreCellsInRow.
	Partial *bool `protobuf:"varint,5,opt,name=partial,def=0" json:"partial,omitempty"`
}

// Default values for Result fields.
const (
	Default_Result_Stale   = bool(false)
	Default_Result_Partial = bool(false)
)

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{4}
}

func (x *Result) GetCell() []*Cell {
	if x != nil {
		return x.Cell
	}
	return nil
}

func (x *Result) GetAssociatedCellCount() int32 {
	if x != nil && x.AssociatedCellCount != nil {
		return *x.AssociatedCellCount
	}
	return 0
}

func (x *Result) GetExists() bool {
	if x != nil && x.Exists != nil {
		return *x.Exists
	}
	return false
}

func (x *Result) GetStale() bool {
	if x != nil && x.Stale != nil {
		return *x.Stale
	}
	return Default_Result_Stale
}

func (x *Result) GetPartial() bool {
	if x != nil && x.Partial != nil {
		return *x.Partial
	}
	return Default_Result_Partial
}

//*
// The get request. Perform a single Get operation.
type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region *RegionSpecifier `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	Get    *Get             `protobuf:"bytes,2,req,name=get" json:"get,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{5}
}

func (x *GetRequest) GetRegion() *RegionSpecifier {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *GetRequest) GetGet() *Get {
	if x != nil {
		return x.Get
	}
	return nil
}

type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{6}
}

func (x *GetResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

//*
// Condition to check if the value of a given cell (row,
// family, qualifier) matches a value via a given comparator.
//
// Condition is used in check and mutate operations.
type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row         []byte       `protobuf:"bytes,1,req,name=row" json:"row,omitempty"`
	Family      []byte       `protobuf:"bytes,2,req,name=family" json:"family,omitempty"`
	Qualifier   []byte       `protobuf:"bytes,3,req,name=qualifier" json:"qualifier,omitempty"`
	CompareType *CompareType `protobuf:"varint,4,req,name=compare_type,json=compareType,enum=hbase.pb.CompareType" json:"compare_type,omitempty"`
	Comparator  *Comparator  `protobuf:"bytes,5,req,name=comparator" json:"comparator,omitempty"`
	TimeRange   *TimeRange   `protobuf:"bytes,6,opt,name=time_range,json=timeRange" json:"time_range,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{7}
}

func (x *Condition) GetRow() []byte {
	if x != nil {
		return x.Row
	}
	return nil
}

func (x *Condition) GetFamily() []byte {
	if x != nil {
		return x.Family
	}
	return nil
}

func (x *Condition) GetQualifier() []byte {
	if x != nil {
		return x.Qualifier
	}
	return nil
}

func (x *Condition) GetCompareType() CompareType {
	if x != nil && x.CompareType != nil {
		return *x.CompareType
	}
	return CompareType_LESS
}

func (x *Condition) GetComparator() *Comparator {
	if x != nil {
		return x.Comparator
	}
	return nil
}

func (x *Condition) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

//*
// A specific mutation inside a mutate request.
// It can be an append, increment, put or delete based
// on the mutation type.  It can be fully filled in or
// only metadata present because data is being carried
// elsewhere outside of pb.
type MutationProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row         []byte                       `protobuf:"bytes,1,opt,name=row" json:"row,omitempty"`
	MutateType  *MutationProto_MutationType  `protobuf:"varint,2,opt,name=mutate_type,json=mutateType,enum=hbase.pb.MutationProto_MutationType" json:"mutate_type,omitempty"`
	ColumnValue []*MutationProto_ColumnValue `protobuf:"bytes,3,rep,name=column_value,json=columnValue" json:"column_value,omitempty"`
	Timestamp   *uint64                      `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Attribute   []*NameBytesPair             `protobuf:"bytes,5,rep,name=attribute" json:"attribute,omitempty"`
	Durability  *MutationProto_Durability    `protobuf:"varint,6,opt,name=durability,enum=hbase.pb.MutationProto_Durability,def=0" json:"durability,omitempty"`
	// For some mutations, a result may be returned, in which case,
	// time range can be specified for potential performance gain
	TimeRange *TimeRange `protobuf:"bytes,7,opt,name=time_range,json=timeRange" json:"time_range,omitempty"`
	// The below count is set when the associated cells are NOT
	// part of this protobuf message; they are passed alongside
	// and then this Message is a placeholder with metadata.  The
	// count is needed to know how many to peel off the block of Cells as
	// ours.  NOTE: This is different from the pb managed cell_count of the
	// 'cell' field above which is non-null when the cells are pb'd.
	AssociatedCellCount *int32  `protobuf:"varint,8,opt,name=associated_cell_count,json=associatedCellCount" json:"associated_cell_count,omitempty"`
	Nonce               *uint64 `protobuf:"varint,9,opt,name=nonce" json:"nonce,omitempty"`
}

// Default values for MutationProto fields.
const (
	Default_MutationProto_Durability = MutationProto_USE_DEFAULT
)

func (x *MutationProto) Reset() {
	*x = MutationProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutationProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutationProto) ProtoMessage() {}

func (x *MutationProto) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutationProto.ProtoReflect.Descriptor instead.
func (*MutationProto) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{8}
}

func (x *MutationProto) GetRow() []byte {
	if x != nil {
		return x.Row
	}
	return nil
}

func (x *MutationProto) GetMutateType() MutationProto_MutationType {
	if x != nil && x.MutateType != nil {
		return *x.MutateType
	}
	return MutationProto_APPEND
}

func (x *MutationProto) GetColumnValue() []*MutationProto_ColumnValue {
	if x != nil {
		return x.ColumnValue
	}
	return nil
}

func (x *MutationProto) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *MutationProto) GetAttribute() []*NameBytesPair {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *MutationProto) GetDurability() MutationProto_Durability {
	if x != nil && x.Durability != nil {
		return *x.Durability
	}
	return Default_MutationProto_Durability
}

func (x *MutationProto) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *MutationProto) GetAssociatedCellCount() int32 {
	if x != nil && x.AssociatedCellCount != nil {
		return *x.AssociatedCellCount
	}
	return 0
}

func (x *MutationProto) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return 0
}

//*
// The mutate request. Perform a single Mutate operation.
//
// Optionally, you can specify a condition. The mutate
// will take place only if the condition is met.  Otherwise,
// the mutate will be ignored.  In the response result,
// parameter processed is used to indicate if the mutate
// actually happened.
type MutateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region     *RegionSpecifier `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	Mutation   *MutationProto   `protobuf:"bytes,2,req,name=mutation" json:"mutation,omitempty"`
	Condition  *Condition       `protobuf:"bytes,3,opt,name=condition" json:"condition,omitempty"`
	NonceGroup *uint64          `protobuf:"varint,4,opt,name=nonce_group,json=nonceGroup" json:"nonce_group,omitempty"`
}

func (x *MutateRequest) Reset() {
	*x = MutateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateRequest) ProtoMessage() {}

func (x *MutateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateRequest.ProtoReflect.Descriptor instead.
func (*MutateRequest) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{9}
}

func (x *MutateRequest) GetRegion() *RegionSpecifier {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *MutateRequest) GetMutation() *MutationProto {
	if x != nil {
		return x.Mutation
	}
	return nil
}

func (x *MutateRequest) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *MutateRequest) GetNonceGroup() uint64 {
	if x != nil && x.NonceGroup != nil {
		return *x.NonceGroup
	}
	return 0
}

type MutateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	// used for mutate to indicate processed only
	Processed *bool `protobuf:"varint,2,opt,name=processed" json:"processed,omitempty"`
}

func (x *MutateResponse) Reset() {
	*x = MutateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateResponse) ProtoMessage() {}

func (x *MutateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateResponse.ProtoReflect.Descriptor instead.
func (*MutateResponse) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{10}
}

func (x *MutateResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *MutateResponse) GetProcessed() bool {
	if x != nil && x.Processed != nil {
		return *x.Processed
	}
	return false
}

//*
// Instead of get from a table, you can scan it with optional filters.
// You can specify the row key range, time range, the columns/families
// to scan and so on.
//
// This scan is used the first time in a scan request. The response of
// the initial scan will return a scanner id, which should be used to
// fetch result batches later on before it is closed.
type Scan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column                     []*Column        `protobuf:"bytes,1,rep,name=column" json:"column,omitempty"`
	Attribute                  []*NameBytesPair `protobuf:"bytes,2,rep,name=attribute" json:"attribute,omitempty"`
	StartRow                   []byte           `protobuf:"bytes,3,opt,name=start_row,json=startRow" json:"start_row,omitempty"`
	StopRow                    []byte           `protobuf:"bytes,4,opt,name=stop_row,json=stopRow" json:"stop_row,omitempty"`
	Filter                     *Filter          `protobuf:"bytes,5,opt,name=filter" json:"filter,omitempty"`
	TimeRange                  *TimeRange       `protobuf:"bytes,6,opt,name=time_range,json=timeRange" json:"time_range,omitempty"`
	MaxVersions                *uint32          `protobuf:"varint,7,opt,name=max_versions,json=maxVersions,def=1" json:"max_versions,omitempty"`
	CacheBlocks                *bool            `protobuf:"varint,8,opt,name=cache_blocks,json=cacheBlocks,def=1" json:"cache_blocks,omitempty"`
	BatchSize                  *uint32          `protobuf:"varint,9,opt,name=batch_size,json=batchSize" json:"batch_size,omitempty"`
	MaxResultSize              *uint64          `protobuf:"varint,10,opt,name=max_result_size,json=maxResultSize" json:"max_result_size,omitempty"`
	StoreLimit                 *uint32          `protobuf:"varint,11,opt,name=store_limit,json=storeLimit" json:"store_limit,omitempty"`
	StoreOffset                *uint32          `protobuf:"varint,12,opt,name=store_offset,json=storeOffset" json:"store_offset,omitempty"`
	LoadColumnFamiliesOnDemand *bool            `protobuf:"varint,13,opt,name=load_column_families_on_demand,json=loadColumnFamiliesOnDemand" json:"load_column_families_on_demand,omitempty"` // DO NOT add defaults to load_column_families_on_demand.
	// Deprecated: Do not use.
	Small               *bool                    `protobuf:"varint,14,opt,name=small" json:"small,omitempty"`
	Reversed            *bool                    `protobuf:"varint,15,opt,name=reversed,def=0" json:"reversed,omitempty"`
	Consistency         *Consistency             `protobuf:"varint,16,opt,name=consistency,enum=hbase.pb.Consistency,def=0" json:"consistency,omitempty"`
	Caching             *uint32                  `protobuf:"varint,17,opt,name=caching" json:"caching,omitempty"`
	AllowPartialResults *bool                    `protobuf:"varint,18,opt,name=allow_partial_results,json=allowPartialResults" json:"allow_partial_results,omitempty"`
	CfTimeRange         []*ColumnFamilyTimeRange `protobuf:"bytes,19,rep,name=cf_time_range,json=cfTimeRange" json:"cf_time_range,omitempty"`
	MvccReadPoint       *uint64                  `protobuf:"varint,20,opt,name=mvcc_read_point,json=mvccReadPoint,def=0" json:"mvcc_read_point,omitempty"`
	IncludeStartRow     *bool                    `protobuf:"varint,21,opt,name=include_start_row,json=includeStartRow,def=1" json:"include_start_row,omitempty"`
	IncludeStopRow      *bool                    `protobuf:"varint,22,opt,name=include_stop_row,json=includeStopRow,def=0" json:"include_stop_row,omitempty"`
	ReadType            *Scan_ReadType           `protobuf:"varint,23,opt,name=readType,enum=hbase.pb.Scan_ReadType,def=0" json:"readType,omitempty"`
	NeedCursorResult    *bool                    `protobuf:"varint,24,opt,name=need_cursor_result,json=needCursorResult,def=0" json:"need_cursor_result,omitempty"`
}

// Default values for Scan fields.
const (
	Default_Scan_MaxVersions      = uint32(1)
	Default_Scan_CacheBlocks      = bool(true)
	Default_Scan_Reversed         = bool(false)
	Default_Scan_Consistency      = Consistency_STRONG
	Default_Scan_MvccReadPoint    = uint64(0)
	Default_Scan_IncludeStartRow  = bool(true)
	Default_Scan_IncludeStopRow   = bool(false)
	Default_Scan_ReadType         = Scan_DEFAULT
	Default_Scan_NeedCursorResult = bool(false)
)

func (x *Scan) Reset() {
	*x = Scan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scan) ProtoMessage() {}

func (x *Scan) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scan.ProtoReflect.Descriptor instead.
func (*Scan) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{11}
}

func (x *Scan) GetColumn() []*Column {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *Scan) GetAttribute() []*NameBytesPair {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *Scan) GetStartRow() []byte {
	if x != nil {
		return x.StartRow
	}
	return nil
}

func (x *Scan) GetStopRow() []byte {
	if x != nil {
		return x.StopRow
	}
	return nil
}

func (x *Scan) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *Scan) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *Scan) GetMaxVersions() uint32 {
	if x != nil && x.MaxVersions != nil {
		return *x.MaxVersions
	}
	return Default_Scan_MaxVersions
}

func (x *Scan) GetCacheBlocks() bool {
	if x != nil && x.CacheBlocks != nil {
		return *x.CacheBlocks
	}
	return Default_Scan_CacheBlocks
}

func (x *Scan) GetBatchSize() uint32 {
	if x != nil && x.BatchSize != nil {
		return *x.BatchSize
	}
	return 0
}

func (x *Scan) GetMaxResultSize() uint64 {
	if x != nil && x.MaxResultSize != nil {
		return *x.MaxResultSize
	}
	return 0
}

func (x *Scan) GetStoreLimit() uint32 {
	if x != nil && x.StoreLimit != nil {
		return *x.StoreLimit
	}
	return 0
}

func (x *Scan) GetStoreOffset() uint32 {
	if x != nil && x.StoreOffset != nil {
		return *x.StoreOffset
	}
	return 0
}

func (x *Scan) GetLoadColumnFamiliesOnDemand() bool {
	if x != nil && x.LoadColumnFamiliesOnDemand != nil {
		return *x.LoadColumnFamiliesOnDemand
	}
	return false
}

// Deprecated: Do not use.
func (x *Scan) GetSmall() bool {
	if x != nil && x.Small != nil {
		return *x.Small
	}
	return false
}

func (x *Scan) GetReversed() bool {
	if x != nil && x.Reversed != nil {
		return *x.Reversed
	}
	return Default_Scan_Reversed
}

func (x *Scan) GetConsistency() Consistency {
	if x != nil && x.Consistency != nil {
		return *x.Consistency
	}
	return Default_Scan_Consistency
}

func (x *Scan) GetCaching() uint32 {
	if x != nil && x.Caching != nil {
		return *x.Caching
	}
	return 0
}

func (x *Scan) GetAllowPartialResults() bool {
	if x != nil && x.AllowPartialResults != nil {
		return *x.AllowPartialResults
	}
	return false
}

func (x *Scan) GetCfTimeRange() []*ColumnFamilyTimeRange {
	if x != nil {
		return x.CfTimeRange
	}
	return nil
}

func (x *Scan) GetMvccReadPoint() uint64 {
	if x != nil && x.MvccReadPoint != nil {
		return *x.MvccReadPoint
	}
	return Default_Scan_MvccReadPoint
}

func (x *Scan) GetIncludeStartRow() bool {
	if x != nil && x.IncludeStartRow != nil {
		return *x.IncludeStartRow
	}
	return Default_Scan_IncludeStartRow
}

func (x *Scan) GetIncludeStopRow() bool {
	if x != nil && x.IncludeStopRow != nil {
		return *x.IncludeStopRow
	}
	return Default_Scan_IncludeStopRow
}

func (x *Scan) GetReadType() Scan_ReadType {
	if x != nil && x.ReadType != nil {
		return *x.ReadType
	}
	return Default_Scan_ReadType
}

func (x *Scan) GetNeedCursorResult() bool {
	if x != nil && x.NeedCursorResult != nil {
		return *x.NeedCursorResult
	}
	return Default_Scan_NeedCursorResult
}

//*
// A scan request. Initially, it should specify a scan. Later on, you
// can use the scanner id returned to fetch result batches with a different
// scan request.
//
// The scanner will remain open if there are more results, and it's not
// asked to be closed explicitly.
//
// You can fetch the results and ask the scanner to be closed to save
// a trip if you are not interested in remaining results.
type ScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region                  *RegionSpecifier `protobuf:"bytes,1,opt,name=region" json:"region,omitempty"`
	Scan                    *Scan            `protobuf:"bytes,2,opt,name=scan" json:"scan,omitempty"`
	ScannerId               *uint64          `protobuf:"varint,3,opt,name=scanner_id,json=scannerId" json:"scanner_id,omitempty"`
	NumberOfRows            *uint32          `protobuf:"varint,4,opt,name=number_of_rows,json=numberOfRows" json:"number_of_rows,omitempty"`
	CloseScanner            *bool            `protobuf:"varint,5,opt,name=close_scanner,json=closeScanner" json:"close_scanner,omitempty"`
	NextCallSeq             *uint64          `protobuf:"varint,6,opt,name=next_call_seq,json=nextCallSeq" json:"next_call_seq,omitempty"`
	ClientHandlesPartials   *bool            `protobuf:"varint,7,opt,name=client_handles_partials,json=clientHandlesPartials" json:"client_handles_partials,omitempty"`
	ClientHandlesHeartbeats *bool            `protobuf:"varint,8,opt,name=client_handles_heartbeats,json=clientHandlesHeartbeats" json:"client_handles_heartbeats,omitempty"`
	TrackScanMetrics        *bool            `protobuf:"varint,9,opt,name=track_scan_metrics,json=trackScanMetrics" json:"track_scan_metrics,omitempty"`
	Renew                   *bool            `protobuf:"varint,10,opt,name=renew,def=0" json:"renew,omitempty"`
	// if we have returned limit_of_rows rows to client, then close the scanner.
	LimitOfRows *uint32 `protobuf:"varint,11,opt,name=limit_of_rows,json=limitOfRows,def=0" json:"limit_of_rows,omitempty"`
}

// Default values for ScanRequest fields.
const (
	Default_ScanRequest_Renew       = bool(false)
	Default_ScanRequest_LimitOfRows = uint32(0)
)

func (x *ScanRequest) Reset() {
	*x = ScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanRequest) ProtoMessage() {}

func (x *ScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanRequest.ProtoReflect.Descriptor instead.
func (*ScanRequest) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{12}
}

func (x *ScanRequest) GetRegion() *RegionSpecifier {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *ScanRequest) GetScan() *Scan {
	if x != nil {
		return x.Scan
	}
	return nil
}

func (x *ScanRequest) GetScannerId() uint64 {
	if x != nil && x.ScannerId != nil {
		return *x.ScannerId
	}
	return 0
}

func (x *ScanRequest) GetNumberOfRows() uint32 {
	if x != nil && x.NumberOfRows != nil {
		return *x.NumberOfRows
	}
	return 0
}

func (x *ScanRequest) GetCloseScanner() bool {
	if x != nil && x.CloseScanner != nil {
		return *x.CloseScanner
	}
	return false
}

func (x *ScanRequest) GetNextCallSeq() uint64 {
	if x != nil && x.NextCallSeq != nil {
		return *x.NextCallSeq
	}
	return 0
}

func (x *ScanRequest) GetClientHandlesPartials() bool {
	if x != nil && x.ClientHandlesPartials != nil {
		return *x.ClientHandlesPartials
	}
	return false
}

func (x *ScanRequest) GetClientHandlesHeartbeats() bool {
	if x != nil && x.ClientHandlesHeartbeats != nil {
		return *x.ClientHandlesHeartbeats
	}
	return false
}

func (x *ScanRequest) GetTrackScanMetrics() bool {
	if x != nil && x.TrackScanMetrics != nil {
		return *x.TrackScanMetrics
	}
	return false
}

func (x *ScanRequest) GetRenew() bool {
	if x != nil && x.Renew != nil {
		return *x.Renew
	}
	return Default_ScanRequest_Renew
}

func (x *ScanRequest) GetLimitOfRows() uint32 {
	if x != nil && x.LimitOfRows != nil {
		return *x.LimitOfRows
	}
	return Default_ScanRequest_LimitOfRows
}

//*
// Scan cursor to tell client where we are scanning.
//
type Cursor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row []byte `protobuf:"bytes,1,opt,name=row" json:"row,omitempty"`
}

func (x *Cursor) Reset() {
	*x = Cursor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cursor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cursor) ProtoMessage() {}

func (x *Cursor) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cursor.ProtoReflect.Descriptor instead.
func (*Cursor) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{13}
}

func (x *Cursor) GetRow() []byte {
	if x != nil {
		return x.Row
	}
	return nil
}

//*
// The scan response. If there are no more results, more_results will
// be false.  If it is not specified, it means there are more.
type ScanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field is filled in if we are doing cellblocks.  A cellblock is made up
	// of all Cells serialized out as one cellblock BUT responses from a server
	// have their Cells grouped by Result.  So we can reconstitute the
	// Results on the client-side, this field is a list of counts of Cells
	// in each Result that makes up the response.  For example, if this field
	// has 3, 3, 3 in it, then we know that on the client, we are to make
	// three Results each of three Cells each.
	CellsPerResult []uint32 `protobuf:"varint,1,rep,name=cells_per_result,json=cellsPerResult" json:"cells_per_result,omitempty"`
	ScannerId      *uint64  `protobuf:"varint,2,opt,name=scanner_id,json=scannerId" json:"scanner_id,omitempty"`
	MoreResults    *bool    `protobuf:"varint,3,opt,name=more_results,json=moreResults" json:"more_results,omitempty"`
	Ttl            *uint32  `protobuf:"varint,4,opt,name=ttl" json:"ttl,omitempty"`
	// If cells are not carried in an accompanying cellblock, then they are pb'd here.
	// This field is mutually exclusive with cells_per_result (since the Cells will
	// be inside the pb'd Result)
	Results []*Result `protobuf:"bytes,5,rep,name=results" json:"results,omitempty"`
	Stale   *bool     `protobuf:"varint,6,opt,name=stale" json:"stale,omitempty"`
	// This field is filled in if we are doing cellblocks. In the event that a row
	// could not fit all of its cells into a single RPC chunk, the results will be
	// returned as partials, and reconstructed into a complete result on the client
	// side. This field is a list of flags indicating whether or not the result
	// that the cells belong to is a partial result. For example, if this field
	// has false, false, true in it, then we know that on the client side, we need to
	// make another RPC request since the last result was only a partial.
	PartialFlagPerResult []bool `protobuf:"varint,7,rep,name=partial_flag_per_result,json=partialFlagPerResult" json:"partial_flag_per_result,omitempty"`
	// A server may choose to limit the number of results returned to the client for
	// reasons such as the size in bytes or quantity of results accumulated. This field
	// will true when more results exist in the current region.
	MoreResultsInRegion *bool `protobuf:"varint,8,opt,name=more_results_in_region,json=moreResultsInRegion" json:"more_results_in_region,omitempty"`
	// This field is filled in if the server is sending back a heartbeat message.
	// Heartbeat messages are sent back to the client to prevent the scanner from
	// timing out. Seeing a heartbeat message communicates to the Client that the
	// server would have continued to scan had the time limit not been reached.
	HeartbeatMessage *bool `protobuf:"varint,9,opt,name=heartbeat_message,json=heartbeatMessage" json:"heartbeat_message,omitempty"`
	// This field is filled in if the client has requested that scan metrics be tracked.
	// The metrics tracked here are sent back to the client to be tracked together with
	// the existing client side metrics.
	ScanMetrics *ScanMetrics `protobuf:"bytes,10,opt,name=scan_metrics,json=scanMetrics" json:"scan_metrics,omitempty"`
	// The mvcc read point which is used to open the scanner at server side. Client can
	// make use of this mvcc_read_point when restarting a scanner to get a consistent view
	// of a row.
	MvccReadPoint *uint64 `protobuf:"varint,11,opt,name=mvcc_read_point,json=mvccReadPoint,def=0" json:"mvcc_read_point,omitempty"`
	// If the Scan need cursor, return the row key we are scanning in heartbeat message.
	// If the Scan doesn't need a cursor, don't set this field to reduce network IO.
	Cursor *Cursor `protobuf:"bytes,12,opt,name=cursor" json:"cursor,omitempty"`
}

// Default values for ScanResponse fields.
const (
	Default_ScanResponse_MvccReadPoint = uint64(0)
)

func (x *ScanResponse) Reset() {
	*x = ScanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanResponse) ProtoMessage() {}

func (x *ScanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanResponse.ProtoReflect.Descriptor instead.
func (*ScanResponse) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{14}
}

func (x *ScanResponse) GetCellsPerResult() []uint32 {
	if x != nil {
		return x.CellsPerResult
	}
	return nil
}

func (x *ScanResponse) GetScannerId() uint64 {
	if x != nil && x.ScannerId != nil {
		return *x.ScannerId
	}
	return 0
}

func (x *ScanResponse) GetMoreResults() bool {
	if x != nil && x.MoreResults != nil {
		return *x.MoreResults
	}
	return false
}

func (x *ScanResponse) GetTtl() uint32 {
	if x != nil && x.Ttl != nil {
		return *x.Ttl
	}
	return 0
}

func (x *ScanResponse) GetResults() []*Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ScanResponse) GetStale() bool {
	if x != nil && x.Stale != nil {
		return *x.Stale
	}
	return false
}

func (x *ScanResponse) GetPartialFlagPerResult() []bool {
	if x != nil {
		return x.PartialFlagPerResult
	}
	return nil
}

func (x *ScanResponse) GetMoreResultsInRegion() bool {
	if x != nil && x.MoreResultsInRegion != nil {
		return *x.MoreResultsInRegion
	}
	return false
}

func (x *ScanResponse) GetHeartbeatMessage() bool {
	if x != nil && x.HeartbeatMessage != nil {
		return *x.HeartbeatMessage
	}
	return false
}

func (x *ScanResponse) GetScanMetrics() *ScanMetrics {
	if x != nil {
		return x.ScanMetrics
	}
	return nil
}

func (x *ScanResponse) GetMvccReadPoint() uint64 {
	if x != nil && x.MvccReadPoint != nil {
		return *x.MvccReadPoint
	}
	return Default_ScanResponse_MvccReadPoint
}

func (x *ScanResponse) GetCursor() *Cursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

//*
// Atomically bulk load multiple HFiles (say from different column families)
// into an open region.
type BulkLoadHFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region       *RegionSpecifier                   `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	FamilyPath   []*BulkLoadHFileRequest_FamilyPath `protobuf:"bytes,2,rep,name=family_path,json=familyPath" json:"family_path,omitempty"`
	AssignSeqNum *bool                              `protobuf:"varint,3,opt,name=assign_seq_num,json=assignSeqNum" json:"assign_seq_num,omitempty"`
	FsToken      *DelegationToken                   `protobuf:"bytes,4,opt,name=fs_token,json=fsToken" json:"fs_token,omitempty"`
	BulkToken    *string                            `protobuf:"bytes,5,opt,name=bulk_token,json=bulkToken" json:"bulk_token,omitempty"`
	CopyFile     *bool                              `protobuf:"varint,6,opt,name=copy_file,json=copyFile,def=0" json:"copy_file,omitempty"`
}

// Default values for BulkLoadHFileRequest fields.
const (
	Default_BulkLoadHFileRequest_CopyFile = bool(false)
)

func (x *BulkLoadHFileRequest) Reset() {
	*x = BulkLoadHFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkLoadHFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkLoadHFileRequest) ProtoMessage() {}

func (x *BulkLoadHFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkLoadHFileRequest.ProtoReflect.Descriptor instead.
func (*BulkLoadHFileRequest) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{15}
}

func (x *BulkLoadHFileRequest) GetRegion() *RegionSpecifier {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *BulkLoadHFileRequest) GetFamilyPath() []*BulkLoadHFileRequest_FamilyPath {
	if x != nil {
		return x.FamilyPath
	}
	return nil
}

func (x *BulkLoadHFileRequest) GetAssignSeqNum() bool {
	if x != nil && x.AssignSeqNum != nil {
		return *x.AssignSeqNum
	}
	return false
}

func (x *BulkLoadHFileRequest) GetFsToken() *DelegationToken {
	if x != nil {
		return x.FsToken
	}
	return nil
}

func (x *BulkLoadHFileRequest) GetBulkToken() string {
	if x != nil && x.BulkToken != nil {
		return *x.BulkToken
	}
	return ""
}

func (x *BulkLoadHFileRequest) GetCopyFile() bool {
	if x != nil && x.CopyFile != nil {
		return *x.CopyFile
	}
	return Default_BulkLoadHFileRequest_CopyFile
}

type BulkLoadHFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Loaded *bool `protobuf:"varint,1,req,name=loaded" json:"loaded,omitempty"`
}

func (x *BulkLoadHFileResponse) Reset() {
	*x = BulkLoadHFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkLoadHFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkLoadHFileResponse) ProtoMessage() {}

func (x *BulkLoadHFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkLoadHFileResponse.ProtoReflect.Descriptor instead.
func (*BulkLoadHFileResponse) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{16}
}

func (x *BulkLoadHFileResponse) GetLoaded() bool {
	if x != nil && x.Loaded != nil {
		return *x.Loaded
	}
	return false
}

type DelegationToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier []byte  `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Password   []byte  `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Kind       *string `protobuf:"bytes,3,opt,name=kind" json:"kind,omitempty"`
	Service    *string `protobuf:"bytes,4,opt,name=service" json:"service,omitempty"`
}

func (x *DelegationToken) Reset() {
	*x = DelegationToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegationToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegationToken) ProtoMessage() {}

func (x *DelegationToken) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegationToken.ProtoReflect.Descriptor instead.
func (*DelegationToken) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{17}
}

func (x *DelegationToken) GetIdentifier() []byte {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *DelegationToken) GetPassword() []byte {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *DelegationToken) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *DelegationToken) GetService() string {
	if x != nil && x.Service != nil {
		return *x.Service
	}
	return ""
}

type PrepareBulkLoadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName *TableName       `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	Region    *RegionSpecifier `protobuf:"bytes,2,opt,name=region" json:"region,omitempty"`
}

func (x *PrepareBulkLoadRequest) Reset() {
	*x = PrepareBulkLoadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareBulkLoadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareBulkLoadRequest) ProtoMessage() {}

func (x *PrepareBulkLoadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareBulkLoadRequest.ProtoReflect.Descriptor instead.
func (*PrepareBulkLoadRequest) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{18}
}

func (x *PrepareBulkLoadRequest) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *PrepareBulkLoadRequest) GetRegion() *RegionSpecifier {
	if x != nil {
		return x.Region
	}
	return nil
}

type PrepareBulkLoadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BulkToken *string `protobuf:"bytes,1,req,name=bulk_token,json=bulkToken" json:"bulk_token,omitempty"`
}

func (x *PrepareBulkLoadResponse) Reset() {
	*x = PrepareBulkLoadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareBulkLoadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareBulkLoadResponse) ProtoMessage() {}

func (x *PrepareBulkLoadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareBulkLoadResponse.ProtoReflect.Descriptor instead.
func (*PrepareBulkLoadResponse) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{19}
}

func (x *PrepareBulkLoadResponse) GetBulkToken() string {
	if x != nil && x.BulkToken != nil {
		return *x.BulkToken
	}
	return ""
}

type CleanupBulkLoadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BulkToken *string          `protobuf:"bytes,1,req,name=bulk_token,json=bulkToken" json:"bulk_token,omitempty"`
	Region    *RegionSpecifier `protobuf:"bytes,2,opt,name=region" json:"region,omitempty"`
}

func (x *CleanupBulkLoadRequest) Reset() {
	*x = CleanupBulkLoadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanupBulkLoadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanupBulkLoadRequest) ProtoMessage() {}

func (x *CleanupBulkLoadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanupBulkLoadRequest.ProtoReflect.Descriptor instead.
func (*CleanupBulkLoadRequest) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{20}
}

func (x *CleanupBulkLoadRequest) GetBulkToken() string {
	if x != nil && x.BulkToken != nil {
		return *x.BulkToken
	}
	return ""
}

func (x *CleanupBulkLoadRequest) GetRegion() *RegionSpecifier {
	if x != nil {
		return x.Region
	}
	return nil
}

type CleanupBulkLoadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CleanupBulkLoadResponse) Reset() {
	*x = CleanupBulkLoadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanupBulkLoadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanupBulkLoadResponse) ProtoMessage() {}

func (x *CleanupBulkLoadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanupBulkLoadResponse.ProtoReflect.Descriptor instead.
func (*CleanupBulkLoadResponse) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{21}
}

type CoprocessorServiceCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row         []byte  `protobuf:"bytes,1,req,name=row" json:"row,omitempty"`
	ServiceName *string `protobuf:"bytes,2,req,name=service_name,json=serviceName" json:"service_name,omitempty"`
	MethodName  *string `protobuf:"bytes,3,req,name=method_name,json=methodName" json:"method_name,omitempty"`
	Request     []byte  `protobuf:"bytes,4,req,name=request" json:"request,omitempty"`
}

func (x *CoprocessorServiceCall) Reset() {
	*x = CoprocessorServiceCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoprocessorServiceCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoprocessorServiceCall) ProtoMessage() {}

func (x *CoprocessorServiceCall) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoprocessorServiceCall.ProtoReflect.Descriptor instead.
func (*CoprocessorServiceCall) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{22}
}

func (x *CoprocessorServiceCall) GetRow() []byte {
	if x != nil {
		return x.Row
	}
	return nil
}

func (x *CoprocessorServiceCall) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

func (x *CoprocessorServiceCall) GetMethodName() string {
	if x != nil && x.MethodName != nil {
		return *x.MethodName
	}
	return ""
}

func (x *CoprocessorServiceCall) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

type CoprocessorServiceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *NameBytesPair `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (x *CoprocessorServiceResult) Reset() {
	*x = CoprocessorServiceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoprocessorServiceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoprocessorServiceResult) ProtoMessage() {}

func (x *CoprocessorServiceResult) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoprocessorServiceResult.ProtoReflect.Descriptor instead.
func (*CoprocessorServiceResult) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{23}
}

func (x *CoprocessorServiceResult) GetValue() *NameBytesPair {
	if x != nil {
		return x.Value
	}
	return nil
}

type CoprocessorServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region *RegionSpecifier        `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	Call   *CoprocessorServiceCall `protobuf:"bytes,2,req,name=call" json:"call,omitempty"`
}

func (x *CoprocessorServiceRequest) Reset() {
	*x = CoprocessorServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoprocessorServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoprocessorServiceRequest) ProtoMessage() {}

func (x *CoprocessorServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoprocessorServiceRequest.ProtoReflect.Descriptor instead.
func (*CoprocessorServiceRequest) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{24}
}

func (x *CoprocessorServiceRequest) GetRegion() *RegionSpecifier {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *CoprocessorServiceRequest) GetCall() *CoprocessorServiceCall {
	if x != nil {
		return x.Call
	}
	return nil
}

type CoprocessorServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region *RegionSpecifier `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	Value  *NameBytesPair   `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *CoprocessorServiceResponse) Reset() {
	*x = CoprocessorServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoprocessorServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoprocessorServiceResponse) ProtoMessage() {}

func (x *CoprocessorServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoprocessorServiceResponse.ProtoReflect.Descriptor instead.
func (*CoprocessorServiceResponse) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{25}
}

func (x *CoprocessorServiceResponse) GetRegion() *RegionSpecifier {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *CoprocessorServiceResponse) GetValue() *NameBytesPair {
	if x != nil {
		return x.Value
	}
	return nil
}

// Either a Get or a Mutation
type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If part of a multi action, useful aligning
	// result with what was originally submitted.
	Index       *uint32                 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Mutation    *MutationProto          `protobuf:"bytes,2,opt,name=mutation" json:"mutation,omitempty"`
	Get         *Get                    `protobuf:"bytes,3,opt,name=get" json:"get,omitempty"`
	ServiceCall *CoprocessorServiceCall `protobuf:"bytes,4,opt,name=service_call,json=serviceCall" json:"service_call,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{26}
}

func (x *Action) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *Action) GetMutation() *MutationProto {
	if x != nil {
		return x.Mutation
	}
	return nil
}

func (x *Action) GetGet() *Get {
	if x != nil {
		return x.Get
	}
	return nil
}

func (x *Action) GetServiceCall() *CoprocessorServiceCall {
	if x != nil {
		return x.ServiceCall
	}
	return nil
}

//*
// Actions to run against a Region.
type RegionAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region *RegionSpecifier `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	// When set, run mutations as atomic unit.
	Atomic *bool     `protobuf:"varint,2,opt,name=atomic" json:"atomic,omitempty"`
	Action []*Action `protobuf:"bytes,3,rep,name=action" json:"action,omitempty"`
}

func (x *RegionAction) Reset() {
	*x = RegionAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionAction) ProtoMessage() {}

func (x *RegionAction) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionAction.ProtoReflect.Descriptor instead.
func (*RegionAction) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{27}
}

func (x *RegionAction) GetRegion() *RegionSpecifier {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *RegionAction) GetAtomic() bool {
	if x != nil && x.Atomic != nil {
		return *x.Atomic
	}
	return false
}

func (x *RegionAction) GetAction() []*Action {
	if x != nil {
		return x.Action
	}
	return nil
}

//
// Statistics about the current load on the region
type RegionLoadStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Percent load on the memstore. Guaranteed to be positive, between 0 and 100.
	MemStoreLoad *int32 `protobuf:"varint,1,opt,name=memStoreLoad,def=0" json:"memStoreLoad,omitempty"`
	// Percent JVM heap occupancy. Guaranteed to be positive, between 0 and 100.
	// We can move this to "ServerLoadStats" should we develop them.
	HeapOccupancy *int32 `protobuf:"varint,2,opt,name=heapOccupancy,def=0" json:"heapOccupancy,omitempty"`
	// Compaction pressure. Guaranteed to be positive, between 0 and 100.
	CompactionPressure *int32 `protobuf:"varint,3,opt,name=compactionPressure,def=0" json:"compactionPressure,omitempty"`
}

// Default values for RegionLoadStats fields.
const (
	Default_RegionLoadStats_MemStoreLoad       = int32(0)
	Default_RegionLoadStats_HeapOccupancy      = int32(0)
	Default_RegionLoadStats_CompactionPressure = int32(0)
)

func (x *RegionLoadStats) Reset() {
	*x = RegionLoadStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionLoadStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionLoadStats) ProtoMessage() {}

func (x *RegionLoadStats) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionLoadStats.ProtoReflect.Descriptor instead.
func (*RegionLoadStats) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{28}
}

func (x *RegionLoadStats) GetMemStoreLoad() int32 {
	if x != nil && x.MemStoreLoad != nil {
		return *x.MemStoreLoad
	}
	return Default_RegionLoadStats_MemStoreLoad
}

func (x *RegionLoadStats) GetHeapOccupancy() int32 {
	if x != nil && x.HeapOccupancy != nil {
		return *x.HeapOccupancy
	}
	return Default_RegionLoadStats_HeapOccupancy
}

func (x *RegionLoadStats) GetCompactionPressure() int32 {
	if x != nil && x.CompactionPressure != nil {
		return *x.CompactionPressure
	}
	return Default_RegionLoadStats_CompactionPressure
}

type MultiRegionLoadStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region []*RegionSpecifier `protobuf:"bytes,1,rep,name=region" json:"region,omitempty"`
	Stat   []*RegionLoadStats `protobuf:"bytes,2,rep,name=stat" json:"stat,omitempty"`
}

func (x *MultiRegionLoadStats) Reset() {
	*x = MultiRegionLoadStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiRegionLoadStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiRegionLoadStats) ProtoMessage() {}

func (x *MultiRegionLoadStats) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiRegionLoadStats.ProtoReflect.Descriptor instead.
func (*MultiRegionLoadStats) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{29}
}

func (x *MultiRegionLoadStats) GetRegion() []*RegionSpecifier {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *MultiRegionLoadStats) GetStat() []*RegionLoadStats {
	if x != nil {
		return x.Stat
	}
	return nil
}

//*
// Either a Result or an Exception NameBytesPair (keyed by
// exception name whose value is the exception stringified)
// or maybe empty if no result and no exception.
type ResultOrException struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If part of a multi call, save original index of the list of all
	// passed so can align this response w/ original request.
	Index     *uint32        `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Result    *Result        `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
	Exception *NameBytesPair `protobuf:"bytes,3,opt,name=exception" json:"exception,omitempty"`
	// result if this was a coprocessor service call
	ServiceResult *CoprocessorServiceResult `protobuf:"bytes,4,opt,name=service_result,json=serviceResult" json:"service_result,omitempty"`
	// current load on the region
	//
	// Deprecated: Do not use.
	LoadStats *RegionLoadStats `protobuf:"bytes,5,opt,name=loadStats" json:"loadStats,omitempty"`
}

func (x *ResultOrException) Reset() {
	*x = ResultOrException{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultOrException) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultOrException) ProtoMessage() {}

func (x *ResultOrException) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultOrException.ProtoReflect.Descriptor instead.
func (*ResultOrException) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{30}
}

func (x *ResultOrException) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *ResultOrException) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ResultOrException) GetException() *NameBytesPair {
	if x != nil {
		return x.Exception
	}
	return nil
}

func (x *ResultOrException) GetServiceResult() *CoprocessorServiceResult {
	if x != nil {
		return x.ServiceResult
	}
	return nil
}

// Deprecated: Do not use.
func (x *ResultOrException) GetLoadStats() *RegionLoadStats {
	if x != nil {
		return x.LoadStats
	}
	return nil
}

//*
// The result of a RegionAction.
type RegionActionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultOrException []*ResultOrException `protobuf:"bytes,1,rep,name=resultOrException" json:"resultOrException,omitempty"`
	// If the operation failed globally for this region, this exception is set
	Exception *NameBytesPair `protobuf:"bytes,2,opt,name=exception" json:"exception,omitempty"`
}

func (x *RegionActionResult) Reset() {
	*x = RegionActionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionActionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionActionResult) ProtoMessage() {}

func (x *RegionActionResult) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionActionResult.ProtoReflect.Descriptor instead.
func (*RegionActionResult) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{31}
}

func (x *RegionActionResult) GetResultOrException() []*ResultOrException {
	if x != nil {
		return x.ResultOrException
	}
	return nil
}

func (x *RegionActionResult) GetException() *NameBytesPair {
	if x != nil {
		return x.Exception
	}
	return nil
}

//*
// Execute a list of actions on a given region in order.
// Nothing prevents a request to contains a set of RegionAction on the same region.
// For this reason, the matching between the MultiRequest and the MultiResponse is not
//  done by the region specifier but by keeping the order of the RegionActionResult vs.
//  the order of the RegionAction.
type MultiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionAction []*RegionAction `protobuf:"bytes,1,rep,name=regionAction" json:"regionAction,omitempty"`
	NonceGroup   *uint64         `protobuf:"varint,2,opt,name=nonceGroup" json:"nonceGroup,omitempty"`
	Condition    *Condition      `protobuf:"bytes,3,opt,name=condition" json:"condition,omitempty"`
}

func (x *MultiRequest) Reset() {
	*x = MultiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiRequest) ProtoMessage() {}

func (x *MultiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiRequest.ProtoReflect.Descriptor instead.
func (*MultiRequest) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{32}
}

func (x *MultiRequest) GetRegionAction() []*RegionAction {
	if x != nil {
		return x.RegionAction
	}
	return nil
}

func (x *MultiRequest) GetNonceGroup() uint64 {
	if x != nil && x.NonceGroup != nil {
		return *x.NonceGroup
	}
	return 0
}

func (x *MultiRequest) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

type MultiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionActionResult []*RegionActionResult `protobuf:"bytes,1,rep,name=regionActionResult" json:"regionActionResult,omitempty"`
	// used for mutate to indicate processed only
	Processed        *bool                 `protobuf:"varint,2,opt,name=processed" json:"processed,omitempty"`
	RegionStatistics *MultiRegionLoadStats `protobuf:"bytes,3,opt,name=regionStatistics" json:"regionStatistics,omitempty"`
}

func (x *MultiResponse) Reset() {
	*x = MultiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiResponse) ProtoMessage() {}

func (x *MultiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiResponse.ProtoReflect.Descriptor instead.
func (*MultiResponse) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{33}
}

func (x *MultiResponse) GetRegionActionResult() []*RegionActionResult {
	if x != nil {
		return x.RegionActionResult
	}
	return nil
}

func (x *MultiResponse) GetProcessed() bool {
	if x != nil && x.Processed != nil {
		return *x.Processed
	}
	return false
}

func (x *MultiResponse) GetRegionStatistics() *MultiRegionLoadStats {
	if x != nil {
		return x.RegionStatistics
	}
	return nil
}

type MutationProto_ColumnValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Family         []byte                                      `protobuf:"bytes,1,req,name=family" json:"family,omitempty"`
	QualifierValue []*MutationProto_ColumnValue_QualifierValue `protobuf:"bytes,2,rep,name=qualifier_value,json=qualifierValue" json:"qualifier_value,omitempty"`
}

func (x *MutationProto_ColumnValue) Reset() {
	*x = MutationProto_ColumnValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutationProto_ColumnValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutationProto_ColumnValue) ProtoMessage() {}

func (x *MutationProto_ColumnValue) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutationProto_ColumnValue.ProtoReflect.Descriptor instead.
func (*MutationProto_ColumnValue) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{8, 0}
}

func (x *MutationProto_ColumnValue) GetFamily() []byte {
	if x != nil {
		return x.Family
	}
	return nil
}

func (x *MutationProto_ColumnValue) GetQualifierValue() []*MutationProto_ColumnValue_QualifierValue {
	if x != nil {
		return x.QualifierValue
	}
	return nil
}

type MutationProto_ColumnValue_QualifierValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qualifier  []byte                    `protobuf:"bytes,1,opt,name=qualifier" json:"qualifier,omitempty"`
	Value      []byte                    `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Timestamp  *uint64                   `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	DeleteType *MutationProto_DeleteType `protobuf:"varint,4,opt,name=delete_type,json=deleteType,enum=hbase.pb.MutationProto_DeleteType" json:"delete_type,omitempty"`
	Tags       []byte                    `protobuf:"bytes,5,opt,name=tags" json:"tags,omitempty"`
}

func (x *MutationProto_ColumnValue_QualifierValue) Reset() {
	*x = MutationProto_ColumnValue_QualifierValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutationProto_ColumnValue_QualifierValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutationProto_ColumnValue_QualifierValue) ProtoMessage() {}

func (x *MutationProto_ColumnValue_QualifierValue) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutationProto_ColumnValue_QualifierValue.ProtoReflect.Descriptor instead.
func (*MutationProto_ColumnValue_QualifierValue) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{8, 0, 0}
}

func (x *MutationProto_ColumnValue_QualifierValue) GetQualifier() []byte {
	if x != nil {
		return x.Qualifier
	}
	return nil
}

func (x *MutationProto_ColumnValue_QualifierValue) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *MutationProto_ColumnValue_QualifierValue) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *MutationProto_ColumnValue_QualifierValue) GetDeleteType() MutationProto_DeleteType {
	if x != nil && x.DeleteType != nil {
		return *x.DeleteType
	}
	return MutationProto_DELETE_ONE_VERSION
}

func (x *MutationProto_ColumnValue_QualifierValue) GetTags() []byte {
	if x != nil {
		return x.Tags
	}
	return nil
}

type BulkLoadHFileRequest_FamilyPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Family []byte  `protobuf:"bytes,1,req,name=family" json:"family,omitempty"`
	Path   *string `protobuf:"bytes,2,req,name=path" json:"path,omitempty"`
}

func (x *BulkLoadHFileRequest_FamilyPath) Reset() {
	*x = BulkLoadHFileRequest_FamilyPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Client_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkLoadHFileRequest_FamilyPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkLoadHFileRequest_FamilyPath) ProtoMessage() {}

func (x *BulkLoadHFileRequest_FamilyPath) ProtoReflect() protoreflect.Message {
	mi := &file_Client_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkLoadHFileRequest_FamilyPath.ProtoReflect.Descriptor instead.
func (*BulkLoadHFileRequest_FamilyPath) Descriptor() ([]byte, []int) {
	return file_Client_proto_rawDescGZIP(), []int{15, 0}
}

func (x *BulkLoadHFileRequest_FamilyPath) GetFamily() []byte {
	if x != nil {
		return x.Family
	}
	return nil
}

func (x *BulkLoadHFileRequest_FamilyPath) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

var File_Client_proto protoreflect.FileDescriptor

var file_Client_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x1a, 0x0b, 0x48, 0x42, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x43, 0x65, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x10, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0f, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x26, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x30, 0x0a, 0x0e, 0x43, 0x65,
	0x6c, 0x6c, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x0a, 0x06,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x96, 0x05, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x28, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x35, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x61, 0x69, 0x72, 0x52, 0x09, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x0e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0d, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x73, 0x74, 0x52, 0x6f, 0x77, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x3a, 0x06, 0x53, 0x54, 0x52, 0x4f, 0x4e, 0x47, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x43, 0x0a, 0x0d,
	0x63, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x63, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x42, 0x0a, 0x1e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x4f, 0x6e, 0x44,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x22, 0x0a, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x04,
	0x63, 0x65, 0x6c, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x1b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x12, 0x1f, 0x0a,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x60,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x03, 0x67, 0x65, 0x74,
	0x22, 0x37, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf7, 0x01, 0x0a, 0x09, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0c, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x32, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0xa2, 0x08, 0x0a, 0x0d, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x45, 0x0a, 0x0b, 0x6d, 0x75, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46,
	0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x64,
	0x75, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x3a, 0x0b, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x1a, 0xc0, 0x02, 0x0a, 0x0b, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x12, 0x5b, 0x0a, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0xbb, 0x01, 0x0a, 0x0e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x57, 0x0a,
	0x0a, 0x44, 0x75, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x53, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x4b, 0x49, 0x50, 0x5f, 0x57, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x53,
	0x59, 0x4e, 0x43, 0x5f, 0x57, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x59, 0x4e,
	0x43, 0x5f, 0x57, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x53, 0x59, 0x4e, 0x43,
	0x5f, 0x57, 0x41, 0x4c, 0x10, 0x04, 0x22, 0x3e, 0x0a, 0x0c, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x22, 0x70, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4f,
	0x4e, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x22, 0xcb, 0x01, 0x0a, 0x0d, 0x4d, 0x75, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x08, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x58, 0x0a, 0x0e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x22, 0xdd, 0x08, 0x0a, 0x04, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x77, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x72, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x52,
	0x6f, 0x77, 0x12, 0x28, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x24, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72,
	0x75, 0x65, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x1e, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69,
	0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1a, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18,
	0x0a, 0x05, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x05, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x3a, 0x06, 0x53, 0x54, 0x52, 0x4f, 0x4e, 0x47, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0d, 0x63, 0x66,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0b, 0x63, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x29, 0x0a, 0x0f, 0x6d, 0x76, 0x63, 0x63, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x6d, 0x76, 0x63,
	0x63, 0x52, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x11, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x77, 0x12, 0x2f, 0x0a, 0x10,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x6f, 0x77,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x6f, 0x77, 0x12, 0x3c, 0x0a,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x12, 0x6e,
	0x65, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10,
	0x6e, 0x65, 0x65, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x2e, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02,
	0x22, 0xd8, 0x03, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61,
	0x6e, 0x52, 0x04, 0x73, 0x63, 0x61, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x63, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73,
	0x65, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x53, 0x65, 0x71, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x3a, 0x0a,
	0x19, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x5f,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x63, 0x61, 0x6e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1b, 0x0a, 0x05, 0x72, 0x65, 0x6e, 0x65, 0x77,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x72,
	0x65, 0x6e, 0x65, 0x77, 0x12, 0x25, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x66,
	0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x52, 0x6f, 0x77, 0x73, 0x22, 0x1a, 0x0a, 0x06, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x22, 0xf6, 0x03, 0x0a, 0x0c, 0x53, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x65, 0x6c, 0x6c,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x2a, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x08, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x50, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x33, 0x0a, 0x16, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x6d, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x49, 0x6e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x38, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0b,
	0x73, 0x63, 0x61, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x29, 0x0a, 0x0f, 0x6d,
	0x76, 0x63, 0x63, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x6d, 0x76, 0x63, 0x63, 0x52, 0x65, 0x61,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x22, 0xee, 0x02, 0x0a, 0x14, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x48, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0b,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x75, 0x6c,
	0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x48, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0a, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x34,
	0x0a, 0x08, 0x66, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x07, 0x66, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x6c, 0x6b, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x63,
	0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x22, 0x2f, 0x0a, 0x15, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x48, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x22, 0x7b, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22,
	0x7f, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x22, 0x38, 0x0a, 0x17, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x4c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x75, 0x6c, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6a, 0x0a, 0x16, 0x43, 0x6c,
	0x65, 0x61, 0x6e, 0x75, 0x70, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x6c, 0x6b, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75,
	0x70, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x88, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x18,
	0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x7e,
	0x0a, 0x1a, 0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb9,
	0x01, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x33, 0x0a, 0x08, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6d, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x03, 0x67, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x83, 0x01, 0x0a, 0x0c, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x94, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x4c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x6d,
	0x65, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x68,
	0x65, 0x61, 0x70, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x70, 0x4f, 0x63, 0x63, 0x75, 0x70,
	0x61, 0x6e, 0x63, 0x79, 0x12, 0x31, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x01, 0x30, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x22, 0x78, 0x0a, 0x14, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x31, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x04, 0x73, 0x74, 0x61,
	0x74, 0x22, 0x92, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x72, 0x45, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a,
	0x11, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x72, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x72, 0x45, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x72, 0x45,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x9d, 0x01, 0x0a, 0x0c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x31, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xc7, 0x01, 0x0a, 0x0d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4c, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x4a, 0x0a,
	0x10, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2a, 0x27, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x4f,
	0x4e, 0x47, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45,
	0x10, 0x01, 0x32, 0xb3, 0x05, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x17, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x75,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x15, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0d,
	0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x48, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61,
	0x64, 0x48, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61,
	0x64, 0x48, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56,
	0x0a, 0x0f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61,
	0x64, 0x12, 0x20, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75,
	0x70, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x20, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x42, 0x75, 0x6c, 0x6b,
	0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x42, 0x75,
	0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58,
	0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x17, 0x45, 0x78, 0x65, 0x63,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38,
	0x0a, 0x05, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x16, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x50, 0x0a, 0x31, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x68, 0x61, 0x64, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0c, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x48, 0x01, 0x5a, 0x05, 0x2e,
	0x2e, 0x2f, 0x70, 0x62, 0x88, 0x01, 0x01, 0xa0, 0x01, 0x01,
}

var (
	file_Client_proto_rawDescOnce sync.Once
	file_Client_proto_rawDescData = file_Client_proto_rawDesc
)

func file_Client_proto_rawDescGZIP() []byte {
	file_Client_proto_rawDescOnce.Do(func() {
		file_Client_proto_rawDescData = protoimpl.X.CompressGZIP(file_Client_proto_rawDescData)
	})
	return file_Client_proto_rawDescData
}

var file_Client_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_Client_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_Client_proto_goTypes = []interface{}{
	(Consistency)(0),                                 // 0: hbase.pb.Consistency
	(MutationProto_Durability)(0),                    // 1: hbase.pb.MutationProto.Durability
	(MutationProto_MutationType)(0),                  // 2: hbase.pb.MutationProto.MutationType
	(MutationProto_DeleteType)(0),                    // 3: hbase.pb.MutationProto.DeleteType
	(Scan_ReadType)(0),                               // 4: hbase.pb.Scan.ReadType
	(*Authorizations)(nil),                           // 5: hbase.pb.Authorizations
	(*CellVisibility)(nil),                           // 6: hbase.pb.CellVisibility
	(*Column)(nil),                                   // 7: hbase.pb.Column
	(*Get)(nil),                                      // 8: hbase.pb.Get
	(*Result)(nil),                                   // 9: hbase.pb.Result
	(*GetRequest)(nil),                               // 10: hbase.pb.GetRequest
	(*GetResponse)(nil),                              // 11: hbase.pb.GetResponse
	(*Condition)(nil),                                // 12: hbase.pb.Condition
	(*MutationProto)(nil),                            // 13: hbase.pb.MutationProto
	(*MutateRequest)(nil),                            // 14: hbase.pb.MutateRequest
	(*MutateResponse)(nil),                           // 15: hbase.pb.MutateResponse
	(*Scan)(nil),                                     // 16: hbase.pb.Scan
	(*ScanRequest)(nil),                              // 17: hbase.pb.ScanRequest
	(*Cursor)(nil),                                   // 18: hbase.pb.Cursor
	(*ScanResponse)(nil),                             // 19: hbase.pb.ScanResponse
	(*BulkLoadHFileRequest)(nil),                     // 20: hbase.pb.BulkLoadHFileRequest
	(*BulkLoadHFileResponse)(nil),                    // 21: hbase.pb.BulkLoadHFileResponse
	(*DelegationToken)(nil),                          // 22: hbase.pb.DelegationToken
	(*PrepareBulkLoadRequest)(nil),                   // 23: hbase.pb.PrepareBulkLoadRequest
	(*PrepareBulkLoadResponse)(nil),                  // 24: hbase.pb.PrepareBulkLoadResponse
	(*CleanupBulkLoadRequest)(nil),                   // 25: hbase.pb.CleanupBulkLoadRequest
	(*CleanupBulkLoadResponse)(nil),                  // 26: hbase.pb.CleanupBulkLoadResponse
	(*CoprocessorServiceCall)(nil),                   // 27: hbase.pb.CoprocessorServiceCall
	(*CoprocessorServiceResult)(nil),                 // 28: hbase.pb.CoprocessorServiceResult
	(*CoprocessorServiceRequest)(nil),                // 29: hbase.pb.CoprocessorServiceRequest
	(*CoprocessorServiceResponse)(nil),               // 30: hbase.pb.CoprocessorServiceResponse
	(*Action)(nil),                                   // 31: hbase.pb.Action
	(*RegionAction)(nil),                             // 32: hbase.pb.RegionAction
	(*RegionLoadStats)(nil),                          // 33: hbase.pb.RegionLoadStats
	(*MultiRegionLoadStats)(nil),                     // 34: hbase.pb.MultiRegionLoadStats
	(*ResultOrException)(nil),                        // 35: hbase.pb.ResultOrException
	(*RegionActionResult)(nil),                       // 36: hbase.pb.RegionActionResult
	(*MultiRequest)(nil),                             // 37: hbase.pb.MultiRequest
	(*MultiResponse)(nil),                            // 38: hbase.pb.MultiResponse
	(*MutationProto_ColumnValue)(nil),                // 39: hbase.pb.MutationProto.ColumnValue
	(*MutationProto_ColumnValue_QualifierValue)(nil), // 40: hbase.pb.MutationProto.ColumnValue.QualifierValue
	(*BulkLoadHFileRequest_FamilyPath)(nil),          // 41: hbase.pb.BulkLoadHFileRequest.FamilyPath
	(*NameBytesPair)(nil),                            // 42: hbase.pb.NameBytesPair
	(*Filter)(nil),                                   // 43: hbase.pb.Filter
	(*TimeRange)(nil),                                // 44: hbase.pb.TimeRange
	(*ColumnFamilyTimeRange)(nil),                    // 45: hbase.pb.ColumnFamilyTimeRange
	(*Cell)(nil),                                     // 46: hbase.pb.Cell
	(*RegionSpecifier)(nil),                          // 47: hbase.pb.RegionSpecifier
	(CompareType)(0),                                 // 48: hbase.pb.CompareType
	(*Comparator)(nil),                               // 49: hbase.pb.Comparator
	(*ScanMetrics)(nil),                              // 50: hbase.pb.ScanMetrics
	(*TableName)(nil),                                // 51: hbase.pb.TableName
}
var file_Client_proto_depIdxs = []int32{
	7,  // 0: hbase.pb.Get.column:type_name -> hbase.pb.Column
	42, // 1: hbase.pb.Get.attribute:type_name -> hbase.pb.NameBytesPair
	43, // 2: hbase.pb.Get.filter:type_name -> hbase.pb.Filter
	44, // 3: hbase.pb.Get.time_range:type_name -> hbase.pb.TimeRange
	0,  // 4: hbase.pb.Get.consistency:type_name -> hbase.pb.Consistency
	45, // 5: hbase.pb.Get.cf_time_range:type_name -> hbase.pb.ColumnFamilyTimeRange
	46, // 6: hbase.pb.Result.cell:type_name -> hbase.pb.Cell
	47, // 7: hbase.pb.GetRequest.region:type_name -> hbase.pb.RegionSpecifier
	8,  // 8: hbase.pb.GetRequest.get:type_name -> hbase.pb.Get
	9,  // 9: hbase.pb.GetResponse.result:type_name -> hbase.pb.Result
	48, // 10: hbase.pb.Condition.compare_type:type_name -> hbase.pb.CompareType
	49, // 11: hbase.pb.Condition.comparator:type_name -> hbase.pb.Comparator
	44, // 12: hbase.pb.Condition.time_range:type_name -> hbase.pb.TimeRange
	2,  // 13: hbase.pb.MutationProto.mutate_type:type_name -> hbase.pb.MutationProto.MutationType
	39, // 14: hbase.pb.MutationProto.column_value:type_name -> hbase.pb.MutationProto.ColumnValue
	42, // 15: hbase.pb.MutationProto.attribute:type_name -> hbase.pb.NameBytesPair
	1,  // 16: hbase.pb.MutationProto.durability:type_name -> hbase.pb.MutationProto.Durability
	44, // 17: hbase.pb.MutationProto.time_range:type_name -> hbase.pb.TimeRange
	47, // 18: hbase.pb.MutateRequest.region:type_name -> hbase.pb.RegionSpecifier
	13, // 19: hbase.pb.MutateRequest.mutation:type_name -> hbase.pb.MutationProto
	12, // 20: hbase.pb.MutateRequest.condition:type_name -> hbase.pb.Condition
	9,  // 21: hbase.pb.MutateResponse.result:type_name -> hbase.pb.Result
	7,  // 22: hbase.pb.Scan.column:type_name -> hbase.pb.Column
	42, // 23: hbase.pb.Scan.attribute:type_name -> hbase.pb.NameBytesPair
	43, // 24: hbase.pb.Scan.filter:type_name -> hbase.pb.Filter
	44, // 25: hbase.pb.Scan.time_range:type_name -> hbase.pb.TimeRange
	0,  // 26: hbase.pb.Scan.consistency:type_name -> hbase.pb.Consistency
	45, // 27: hbase.pb.Scan.cf_time_range:type_name -> hbase.pb.ColumnFamilyTimeRange
	4,  // 28: hbase.pb.Scan.readType:type_name -> hbase.pb.Scan.ReadType
	47, // 29: hbase.pb.ScanRequest.region:type_name -> hbase.pb.RegionSpecifier
	16, // 30: hbase.pb.ScanRequest.scan:type_name -> hbase.pb.Scan
	9,  // 31: hbase.pb.ScanResponse.results:type_name -> hbase.pb.Result
	50, // 32: hbase.pb.ScanResponse.scan_metrics:type_name -> hbase.pb.ScanMetrics
	18, // 33: hbase.pb.ScanResponse.cursor:type_name -> hbase.pb.Cursor
	47, // 34: hbase.pb.BulkLoadHFileRequest.region:type_name -> hbase.pb.RegionSpecifier
	41, // 35: hbase.pb.BulkLoadHFileRequest.family_path:type_name -> hbase.pb.BulkLoadHFileRequest.FamilyPath
	22, // 36: hbase.pb.BulkLoadHFileRequest.fs_token:type_name -> hbase.pb.DelegationToken
	51, // 37: hbase.pb.PrepareBulkLoadRequest.table_name:type_name -> hbase.pb.TableName
	47, // 38: hbase.pb.PrepareBulkLoadRequest.region:type_name -> hbase.pb.RegionSpecifier
	47, // 39: hbase.pb.CleanupBulkLoadRequest.region:type_name -> hbase.pb.RegionSpecifier
	42, // 40: hbase.pb.CoprocessorServiceResult.value:type_name -> hbase.pb.NameBytesPair
	47, // 41: hbase.pb.CoprocessorServiceRequest.region:type_name -> hbase.pb.RegionSpecifier
	27, // 42: hbase.pb.CoprocessorServiceRequest.call:type_name -> hbase.pb.CoprocessorServiceCall
	47, // 43: hbase.pb.CoprocessorServiceResponse.region:type_name -> hbase.pb.RegionSpecifier
	42, // 44: hbase.pb.CoprocessorServiceResponse.value:type_name -> hbase.pb.NameBytesPair
	13, // 45: hbase.pb.Action.mutation:type_name -> hbase.pb.MutationProto
	8,  // 46: hbase.pb.Action.get:type_name -> hbase.pb.Get
	27, // 47: hbase.pb.Action.service_call:type_name -> hbase.pb.CoprocessorServiceCall
	47, // 48: hbase.pb.RegionAction.region:type_name -> hbase.pb.RegionSpecifier
	31, // 49: hbase.pb.RegionAction.action:type_name -> hbase.pb.Action
	47, // 50: hbase.pb.MultiRegionLoadStats.region:type_name -> hbase.pb.RegionSpecifier
	33, // 51: hbase.pb.MultiRegionLoadStats.stat:type_name -> hbase.pb.RegionLoadStats
	9,  // 52: hbase.pb.ResultOrException.result:type_name -> hbase.pb.Result
	42, // 53: hbase.pb.ResultOrException.exception:type_name -> hbase.pb.NameBytesPair
	28, // 54: hbase.pb.ResultOrException.service_result:type_name -> hbase.pb.CoprocessorServiceResult
	33, // 55: hbase.pb.ResultOrException.loadStats:type_name -> hbase.pb.RegionLoadStats
	35, // 56: hbase.pb.RegionActionResult.resultOrException:type_name -> hbase.pb.ResultOrException
	42, // 57: hbase.pb.RegionActionResult.exception:type_name -> hbase.pb.NameBytesPair
	32, // 58: hbase.pb.MultiRequest.regionAction:type_name -> hbase.pb.RegionAction
	12, // 59: hbase.pb.MultiRequest.condition:type_name -> hbase.pb.Condition
	36, // 60: hbase.pb.MultiResponse.regionActionResult:type_name -> hbase.pb.RegionActionResult
	34, // 61: hbase.pb.MultiResponse.regionStatistics:type_name -> hbase.pb.MultiRegionLoadStats
	40, // 62: hbase.pb.MutationProto.ColumnValue.qualifier_value:type_name -> hbase.pb.MutationProto.ColumnValue.QualifierValue
	3,  // 63: hbase.pb.MutationProto.ColumnValue.QualifierValue.delete_type:type_name -> hbase.pb.MutationProto.DeleteType
	10, // 64: hbase.pb.ClientService.Get:input_type -> hbase.pb.GetRequest
	14, // 65: hbase.pb.ClientService.Mutate:input_type -> hbase.pb.MutateRequest
	17, // 66: hbase.pb.ClientService.Scan:input_type -> hbase.pb.ScanRequest
	20, // 67: hbase.pb.ClientService.BulkLoadHFile:input_type -> hbase.pb.BulkLoadHFileRequest
	23, // 68: hbase.pb.ClientService.PrepareBulkLoad:input_type -> hbase.pb.PrepareBulkLoadRequest
	25, // 69: hbase.pb.ClientService.CleanupBulkLoad:input_type -> hbase.pb.CleanupBulkLoadRequest
	29, // 70: hbase.pb.ClientService.ExecService:input_type -> hbase.pb.CoprocessorServiceRequest
	29, // 71: hbase.pb.ClientService.ExecRegionServerService:input_type -> hbase.pb.CoprocessorServiceRequest
	37, // 72: hbase.pb.ClientService.Multi:input_type -> hbase.pb.MultiRequest
	11, // 73: hbase.pb.ClientService.Get:output_type -> hbase.pb.GetResponse
	15, // 74: hbase.pb.ClientService.Mutate:output_type -> hbase.pb.MutateResponse
	19, // 75: hbase.pb.ClientService.Scan:output_type -> hbase.pb.ScanResponse
	21, // 76: hbase.pb.ClientService.BulkLoadHFile:output_type -> hbase.pb.BulkLoadHFileResponse
	24, // 77: hbase.pb.ClientService.PrepareBulkLoad:output_type -> hbase.pb.PrepareBulkLoadResponse
	26, // 78: hbase.pb.ClientService.CleanupBulkLoad:output_type -> hbase.pb.CleanupBulkLoadResponse
	30, // 79: hbase.pb.ClientService.ExecService:output_type -> hbase.pb.CoprocessorServiceResponse
	30, // 80: hbase.pb.ClientService.ExecRegionServerService:output_type -> hbase.pb.CoprocessorServiceResponse
	38, // 81: hbase.pb.ClientService.Multi:output_type -> hbase.pb.MultiResponse
	73, // [73:82] is the sub-list for method output_type
	64, // [64:73] is the sub-list for method input_type
	64, // [64:64] is the sub-list for extension type_name
	64, // [64:64] is the sub-list for extension extendee
	0,  // [0:64] is the sub-list for field type_name
}

func init() { file_Client_proto_init() }
func file_Client_proto_init() {
	if File_Client_proto != nil {
		return
	}
	file_HBase_proto_init()
	file_Filter_proto_init()
	file_Cell_proto_init()
	file_Comparator_proto_init()
	file_MapReduce_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_Client_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authorizations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellVisibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Get); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutationProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cursor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkLoadHFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkLoadHFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegationToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareBulkLoadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareBulkLoadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanupBulkLoadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanupBulkLoadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoprocessorServiceCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoprocessorServiceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoprocessorServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoprocessorServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionLoadStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiRegionLoadStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultOrException); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionActionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutationProto_ColumnValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutationProto_ColumnValue_QualifierValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Client_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkLoadHFileRequest_FamilyPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Client_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_Client_proto_goTypes,
		DependencyIndexes: file_Client_proto_depIdxs,
		EnumInfos:         file_Client_proto_enumTypes,
		MessageInfos:      file_Client_proto_msgTypes,
	}.Build()
	File_Client_proto = out.File
	file_Client_proto_rawDesc = nil
	file_Client_proto_goTypes = nil
	file_Client_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ClientServiceClient is the client API for ClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Mutate(ctx context.Context, in *MutateRequest, opts ...grpc.CallOption) (*MutateResponse, error)
	Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResponse, error)
	BulkLoadHFile(ctx context.Context, in *BulkLoadHFileRequest, opts ...grpc.CallOption) (*BulkLoadHFileResponse, error)
	PrepareBulkLoad(ctx context.Context, in *PrepareBulkLoadRequest, opts ...grpc.CallOption) (*PrepareBulkLoadResponse, error)
	CleanupBulkLoad(ctx context.Context, in *CleanupBulkLoadRequest, opts ...grpc.CallOption) (*CleanupBulkLoadResponse, error)
	ExecService(ctx context.Context, in *CoprocessorServiceRequest, opts ...grpc.CallOption) (*CoprocessorServiceResponse, error)
	ExecRegionServerService(ctx context.Context, in *CoprocessorServiceRequest, opts ...grpc.CallOption) (*CoprocessorServiceResponse, error)
	Multi(ctx context.Context, in *MultiRequest, opts ...grpc.CallOption) (*MultiResponse, error)
}

type clientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientServiceClient(cc grpc.ClientConnInterface) ClientServiceClient {
	return &clientServiceClient{cc}
}

func (c *clientServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.ClientService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) Mutate(ctx context.Context, in *MutateRequest, opts ...grpc.CallOption) (*MutateResponse, error) {
	out := new(MutateResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.ClientService/Mutate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResponse, error) {
	out := new(ScanResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.ClientService/Scan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) BulkLoadHFile(ctx context.Context, in *BulkLoadHFileRequest, opts ...grpc.CallOption) (*BulkLoadHFileResponse, error) {
	out := new(BulkLoadHFileResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.ClientService/BulkLoadHFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) PrepareBulkLoad(ctx context.Context, in *PrepareBulkLoadRequest, opts ...grpc.CallOption) (*PrepareBulkLoadResponse, error) {
	out := new(PrepareBulkLoadResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.ClientService/PrepareBulkLoad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) CleanupBulkLoad(ctx context.Context, in *CleanupBulkLoadRequest, opts ...grpc.CallOption) (*CleanupBulkLoadResponse, error) {
	out := new(CleanupBulkLoadResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.ClientService/CleanupBulkLoad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) ExecService(ctx context.Context, in *CoprocessorServiceRequest, opts ...grpc.CallOption) (*CoprocessorServiceResponse, error) {
	out := new(CoprocessorServiceResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.ClientService/ExecService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) ExecRegionServerService(ctx context.Context, in *CoprocessorServiceRequest, opts ...grpc.CallOption) (*CoprocessorServiceResponse, error) {
	out := new(CoprocessorServiceResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.ClientService/ExecRegionServerService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) Multi(ctx context.Context, in *MultiRequest, opts ...grpc.CallOption) (*MultiResponse, error) {
	out := new(MultiResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.ClientService/Multi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServiceServer is the server API for ClientService service.
type ClientServiceServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Mutate(context.Context, *MutateRequest) (*MutateResponse, error)
	Scan(context.Context, *ScanRequest) (*ScanResponse, error)
	BulkLoadHFile(context.Context, *BulkLoadHFileRequest) (*BulkLoadHFileResponse, error)
	PrepareBulkLoad(context.Context, *PrepareBulkLoadRequest) (*PrepareBulkLoadResponse, error)
	CleanupBulkLoad(context.Context, *CleanupBulkLoadRequest) (*CleanupBulkLoadResponse, error)
	ExecService(context.Context, *CoprocessorServiceRequest) (*CoprocessorServiceResponse, error)
	ExecRegionServerService(context.Context, *CoprocessorServiceRequest) (*CoprocessorServiceResponse, error)
	Multi(context.Context, *MultiRequest) (*MultiResponse, error)
}

// UnimplementedClientServiceServer can be embedded to have forward compatible implementations.
type UnimplementedClientServiceServer struct {
}

func (*UnimplementedClientServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedClientServiceServer) Mutate(context.Context, *MutateRequest) (*MutateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mutate not implemented")
}
func (*UnimplementedClientServiceServer) Scan(context.Context, *ScanRequest) (*ScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (*UnimplementedClientServiceServer) BulkLoadHFile(context.Context, *BulkLoadHFileRequest) (*BulkLoadHFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkLoadHFile not implemented")
}
func (*UnimplementedClientServiceServer) PrepareBulkLoad(context.Context, *PrepareBulkLoadRequest) (*PrepareBulkLoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareBulkLoad not implemented")
}
func (*UnimplementedClientServiceServer) CleanupBulkLoad(context.Context, *CleanupBulkLoadRequest) (*CleanupBulkLoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanupBulkLoad not implemented")
}
func (*UnimplementedClientServiceServer) ExecService(context.Context, *CoprocessorServiceRequest) (*CoprocessorServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecService not implemented")
}
func (*UnimplementedClientServiceServer) ExecRegionServerService(context.Context, *CoprocessorServiceRequest) (*CoprocessorServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecRegionServerService not implemented")
}
func (*UnimplementedClientServiceServer) Multi(context.Context, *MultiRequest) (*MultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multi not implemented")
}

func RegisterClientServiceServer(s *grpc.Server, srv ClientServiceServer) {
	s.RegisterService(&_ClientService_serviceDesc, srv)
}

func _ClientService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.ClientService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_Mutate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).Mutate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.ClientService/Mutate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).Mutate(ctx, req.(*MutateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.ClientService/Scan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).Scan(ctx, req.(*ScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_BulkLoadHFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkLoadHFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).BulkLoadHFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.ClientService/BulkLoadHFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).BulkLoadHFile(ctx, req.(*BulkLoadHFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_PrepareBulkLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareBulkLoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).PrepareBulkLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.ClientService/PrepareBulkLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).PrepareBulkLoad(ctx, req.(*PrepareBulkLoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_CleanupBulkLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanupBulkLoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).CleanupBulkLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.ClientService/CleanupBulkLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).CleanupBulkLoad(ctx, req.(*CleanupBulkLoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_ExecService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoprocessorServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).ExecService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.ClientService/ExecService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).ExecService(ctx, req.(*CoprocessorServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_ExecRegionServerService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoprocessorServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).ExecRegionServerService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.ClientService/ExecRegionServerService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).ExecRegionServerService(ctx, req.(*CoprocessorServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_Multi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).Multi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.ClientService/Multi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).Multi(ctx, req.(*MultiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hbase.pb.ClientService",
	HandlerType: (*ClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ClientService_Get_Handler,
		},
		{
			MethodName: "Mutate",
			Handler:    _ClientService_Mutate_Handler,
		},
		{
			MethodName: "Scan",
			Handler:    _ClientService_Scan_Handler,
		},
		{
			MethodName: "BulkLoadHFile",
			Handler:    _ClientService_BulkLoadHFile_Handler,
		},
		{
			MethodName: "PrepareBulkLoad",
			Handler:    _ClientService_PrepareBulkLoad_Handler,
		},
		{
			MethodName: "CleanupBulkLoad",
			Handler:    _ClientService_CleanupBulkLoad_Handler,
		},
		{
			MethodName: "ExecService",
			Handler:    _ClientService_ExecService_Handler,
		},
		{
			MethodName: "ExecRegionServerService",
			Handler:    _ClientService_ExecRegionServerService_Handler,
		},
		{
			MethodName: "Multi",
			Handler:    _ClientService_Multi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Client.proto",
}
