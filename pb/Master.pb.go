//*
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-rc.1
// 	protoc        v3.17.3
// source: Master.proto

// All to do with the Master.  Includes schema management since these
// changes are run by the Master process.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MasterSwitchType int32

const (
	MasterSwitchType_SPLIT MasterSwitchType = 0
	MasterSwitchType_MERGE MasterSwitchType = 1
)

// Enum value maps for MasterSwitchType.
var (
	MasterSwitchType_name = map[int32]string{
		0: "SPLIT",
		1: "MERGE",
	}
	MasterSwitchType_value = map[string]int32{
		"SPLIT": 0,
		"MERGE": 1,
	}
)

func (x MasterSwitchType) Enum() *MasterSwitchType {
	p := new(MasterSwitchType)
	*p = x
	return p
}

func (x MasterSwitchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MasterSwitchType) Descriptor() protoreflect.EnumDescriptor {
	return file_Master_proto_enumTypes[0].Descriptor()
}

func (MasterSwitchType) Type() protoreflect.EnumType {
	return &file_Master_proto_enumTypes[0]
}

func (x MasterSwitchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MasterSwitchType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MasterSwitchType(num)
	return nil
}

// Deprecated: Use MasterSwitchType.Descriptor instead.
func (MasterSwitchType) EnumDescriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{0}
}

type GetProcedureResultResponse_State int32

const (
	GetProcedureResultResponse_NOT_FOUND GetProcedureResultResponse_State = 0
	GetProcedureResultResponse_RUNNING   GetProcedureResultResponse_State = 1
	GetProcedureResultResponse_FINISHED  GetProcedureResultResponse_State = 2
)

// Enum value maps for GetProcedureResultResponse_State.
var (
	GetProcedureResultResponse_State_name = map[int32]string{
		0: "NOT_FOUND",
		1: "RUNNING",
		2: "FINISHED",
	}
	GetProcedureResultResponse_State_value = map[string]int32{
		"NOT_FOUND": 0,
		"RUNNING":   1,
		"FINISHED":  2,
	}
)

func (x GetProcedureResultResponse_State) Enum() *GetProcedureResultResponse_State {
	p := new(GetProcedureResultResponse_State)
	*p = x
	return p
}

func (x GetProcedureResultResponse_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetProcedureResultResponse_State) Descriptor() protoreflect.EnumDescriptor {
	return file_Master_proto_enumTypes[1].Descriptor()
}

func (GetProcedureResultResponse_State) Type() protoreflect.EnumType {
	return &file_Master_proto_enumTypes[1]
}

func (x GetProcedureResultResponse_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetProcedureResultResponse_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetProcedureResultResponse_State(num)
	return nil
}

// Deprecated: Use GetProcedureResultResponse_State.Descriptor instead.
func (GetProcedureResultResponse_State) EnumDescriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{107, 0}
}

type SecurityCapabilitiesResponse_Capability int32

const (
	SecurityCapabilitiesResponse_SIMPLE_AUTHENTICATION SecurityCapabilitiesResponse_Capability = 0
	SecurityCapabilitiesResponse_SECURE_AUTHENTICATION SecurityCapabilitiesResponse_Capability = 1
	SecurityCapabilitiesResponse_AUTHORIZATION         SecurityCapabilitiesResponse_Capability = 2
	SecurityCapabilitiesResponse_CELL_AUTHORIZATION    SecurityCapabilitiesResponse_Capability = 3
	SecurityCapabilitiesResponse_CELL_VISIBILITY       SecurityCapabilitiesResponse_Capability = 4
)

// Enum value maps for SecurityCapabilitiesResponse_Capability.
var (
	SecurityCapabilitiesResponse_Capability_name = map[int32]string{
		0: "SIMPLE_AUTHENTICATION",
		1: "SECURE_AUTHENTICATION",
		2: "AUTHORIZATION",
		3: "CELL_AUTHORIZATION",
		4: "CELL_VISIBILITY",
	}
	SecurityCapabilitiesResponse_Capability_value = map[string]int32{
		"SIMPLE_AUTHENTICATION": 0,
		"SECURE_AUTHENTICATION": 1,
		"AUTHORIZATION":         2,
		"CELL_AUTHORIZATION":    3,
		"CELL_VISIBILITY":       4,
	}
)

func (x SecurityCapabilitiesResponse_Capability) Enum() *SecurityCapabilitiesResponse_Capability {
	p := new(SecurityCapabilitiesResponse_Capability)
	*p = x
	return p
}

func (x SecurityCapabilitiesResponse_Capability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityCapabilitiesResponse_Capability) Descriptor() protoreflect.EnumDescriptor {
	return file_Master_proto_enumTypes[2].Descriptor()
}

func (SecurityCapabilitiesResponse_Capability) Type() protoreflect.EnumType {
	return &file_Master_proto_enumTypes[2]
}

func (x SecurityCapabilitiesResponse_Capability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SecurityCapabilitiesResponse_Capability) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SecurityCapabilitiesResponse_Capability(num)
	return nil
}

// Deprecated: Use SecurityCapabilitiesResponse_Capability.Descriptor instead.
func (SecurityCapabilitiesResponse_Capability) EnumDescriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{120, 0}
}

type AddColumnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName      *TableName          `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	ColumnFamilies *ColumnFamilySchema `protobuf:"bytes,2,req,name=column_families,json=columnFamilies" json:"column_families,omitempty"`
	NonceGroup     *uint64             `protobuf:"varint,3,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce          *uint64             `protobuf:"varint,4,opt,name=nonce,def=0" json:"nonce,omitempty"`
}

// Default values for AddColumnRequest fields.
const (
	Default_AddColumnRequest_NonceGroup = uint64(0)
	Default_AddColumnRequest_Nonce      = uint64(0)
)

func (x *AddColumnRequest) Reset() {
	*x = AddColumnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddColumnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddColumnRequest) ProtoMessage() {}

func (x *AddColumnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddColumnRequest.ProtoReflect.Descriptor instead.
func (*AddColumnRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{0}
}

func (x *AddColumnRequest) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *AddColumnRequest) GetColumnFamilies() *ColumnFamilySchema {
	if x != nil {
		return x.ColumnFamilies
	}
	return nil
}

func (x *AddColumnRequest) GetNonceGroup() uint64 {
	if x != nil && x.NonceGroup != nil {
		return *x.NonceGroup
	}
	return Default_AddColumnRequest_NonceGroup
}

func (x *AddColumnRequest) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return Default_AddColumnRequest_Nonce
}

type AddColumnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcId *uint64 `protobuf:"varint,1,opt,name=proc_id,json=procId" json:"proc_id,omitempty"`
}

func (x *AddColumnResponse) Reset() {
	*x = AddColumnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddColumnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddColumnResponse) ProtoMessage() {}

func (x *AddColumnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddColumnResponse.ProtoReflect.Descriptor instead.
func (*AddColumnResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{1}
}

func (x *AddColumnResponse) GetProcId() uint64 {
	if x != nil && x.ProcId != nil {
		return *x.ProcId
	}
	return 0
}

type DeleteColumnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName  *TableName `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	ColumnName []byte     `protobuf:"bytes,2,req,name=column_name,json=columnName" json:"column_name,omitempty"`
	NonceGroup *uint64    `protobuf:"varint,3,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce      *uint64    `protobuf:"varint,4,opt,name=nonce,def=0" json:"nonce,omitempty"`
}

// Default values for DeleteColumnRequest fields.
const (
	Default_DeleteColumnRequest_NonceGroup = uint64(0)
	Default_DeleteColumnRequest_Nonce      = uint64(0)
)

func (x *DeleteColumnRequest) Reset() {
	*x = DeleteColumnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteColumnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteColumnRequest) ProtoMessage() {}

func (x *DeleteColumnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteColumnRequest.ProtoReflect.Descriptor instead.
func (*DeleteColumnRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteColumnRequest) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *DeleteColumnRequest) GetColumnName() []byte {
	if x != nil {
		return x.ColumnName
	}
	return nil
}

func (x *DeleteColumnRequest) GetNonceGroup() uint64 {
	if x != nil && x.NonceGroup != nil {
		return *x.NonceGroup
	}
	return Default_DeleteColumnRequest_NonceGroup
}

func (x *DeleteColumnRequest) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return Default_DeleteColumnRequest_Nonce
}

type DeleteColumnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcId *uint64 `protobuf:"varint,1,opt,name=proc_id,json=procId" json:"proc_id,omitempty"`
}

func (x *DeleteColumnResponse) Reset() {
	*x = DeleteColumnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteColumnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteColumnResponse) ProtoMessage() {}

func (x *DeleteColumnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteColumnResponse.ProtoReflect.Descriptor instead.
func (*DeleteColumnResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteColumnResponse) GetProcId() uint64 {
	if x != nil && x.ProcId != nil {
		return *x.ProcId
	}
	return 0
}

type ModifyColumnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName      *TableName          `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	ColumnFamilies *ColumnFamilySchema `protobuf:"bytes,2,req,name=column_families,json=columnFamilies" json:"column_families,omitempty"`
	NonceGroup     *uint64             `protobuf:"varint,3,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce          *uint64             `protobuf:"varint,4,opt,name=nonce,def=0" json:"nonce,omitempty"`
}

// Default values for ModifyColumnRequest fields.
const (
	Default_ModifyColumnRequest_NonceGroup = uint64(0)
	Default_ModifyColumnRequest_Nonce      = uint64(0)
)

func (x *ModifyColumnRequest) Reset() {
	*x = ModifyColumnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyColumnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyColumnRequest) ProtoMessage() {}

func (x *ModifyColumnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyColumnRequest.ProtoReflect.Descriptor instead.
func (*ModifyColumnRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{4}
}

func (x *ModifyColumnRequest) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *ModifyColumnRequest) GetColumnFamilies() *ColumnFamilySchema {
	if x != nil {
		return x.ColumnFamilies
	}
	return nil
}

func (x *ModifyColumnRequest) GetNonceGroup() uint64 {
	if x != nil && x.NonceGroup != nil {
		return *x.NonceGroup
	}
	return Default_ModifyColumnRequest_NonceGroup
}

func (x *ModifyColumnRequest) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return Default_ModifyColumnRequest_Nonce
}

type ModifyColumnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcId *uint64 `protobuf:"varint,1,opt,name=proc_id,json=procId" json:"proc_id,omitempty"`
}

func (x *ModifyColumnResponse) Reset() {
	*x = ModifyColumnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyColumnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyColumnResponse) ProtoMessage() {}

func (x *ModifyColumnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyColumnResponse.ProtoReflect.Descriptor instead.
func (*ModifyColumnResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{5}
}

func (x *ModifyColumnResponse) GetProcId() uint64 {
	if x != nil && x.ProcId != nil {
		return *x.ProcId
	}
	return 0
}

type MoveRegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region         *RegionSpecifier `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	DestServerName *ServerName      `protobuf:"bytes,2,opt,name=dest_server_name,json=destServerName" json:"dest_server_name,omitempty"`
}

func (x *MoveRegionRequest) Reset() {
	*x = MoveRegionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveRegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveRegionRequest) ProtoMessage() {}

func (x *MoveRegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveRegionRequest.ProtoReflect.Descriptor instead.
func (*MoveRegionRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{6}
}

func (x *MoveRegionRequest) GetRegion() *RegionSpecifier {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *MoveRegionRequest) GetDestServerName() *ServerName {
	if x != nil {
		return x.DestServerName
	}
	return nil
}

type MoveRegionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MoveRegionResponse) Reset() {
	*x = MoveRegionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveRegionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveRegionResponse) ProtoMessage() {}

func (x *MoveRegionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveRegionResponse.ProtoReflect.Descriptor instead.
func (*MoveRegionResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{7}
}

//*
// Merging the specified regions in a table.
type MergeTableRegionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region     []*RegionSpecifier `protobuf:"bytes,1,rep,name=region" json:"region,omitempty"`
	Forcible   *bool              `protobuf:"varint,3,opt,name=forcible,def=0" json:"forcible,omitempty"`
	NonceGroup *uint64            `protobuf:"varint,4,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce      *uint64            `protobuf:"varint,5,opt,name=nonce,def=0" json:"nonce,omitempty"`
}

// Default values for MergeTableRegionsRequest fields.
const (
	Default_MergeTableRegionsRequest_Forcible   = bool(false)
	Default_MergeTableRegionsRequest_NonceGroup = uint64(0)
	Default_MergeTableRegionsRequest_Nonce      = uint64(0)
)

func (x *MergeTableRegionsRequest) Reset() {
	*x = MergeTableRegionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeTableRegionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeTableRegionsRequest) ProtoMessage() {}

func (x *MergeTableRegionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeTableRegionsRequest.ProtoReflect.Descriptor instead.
func (*MergeTableRegionsRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{8}
}

func (x *MergeTableRegionsRequest) GetRegion() []*RegionSpecifier {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *MergeTableRegionsRequest) GetForcible() bool {
	if x != nil && x.Forcible != nil {
		return *x.Forcible
	}
	return Default_MergeTableRegionsRequest_Forcible
}

func (x *MergeTableRegionsRequest) GetNonceGroup() uint64 {
	if x != nil && x.NonceGroup != nil {
		return *x.NonceGroup
	}
	return Default_MergeTableRegionsRequest_NonceGroup
}

func (x *MergeTableRegionsRequest) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return Default_MergeTableRegionsRequest_Nonce
}

type MergeTableRegionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcId *uint64 `protobuf:"varint,1,opt,name=proc_id,json=procId" json:"proc_id,omitempty"`
}

func (x *MergeTableRegionsResponse) Reset() {
	*x = MergeTableRegionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeTableRegionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeTableRegionsResponse) ProtoMessage() {}

func (x *MergeTableRegionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeTableRegionsResponse.ProtoReflect.Descriptor instead.
func (*MergeTableRegionsResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{9}
}

func (x *MergeTableRegionsResponse) GetProcId() uint64 {
	if x != nil && x.ProcId != nil {
		return *x.ProcId
	}
	return 0
}

type AssignRegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region   *RegionSpecifier `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	Override *bool            `protobuf:"varint,2,opt,name=override,def=0" json:"override,omitempty"`
}

// Default values for AssignRegionRequest fields.
const (
	Default_AssignRegionRequest_Override = bool(false)
)

func (x *AssignRegionRequest) Reset() {
	*x = AssignRegionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignRegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignRegionRequest) ProtoMessage() {}

func (x *AssignRegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignRegionRequest.ProtoReflect.Descriptor instead.
func (*AssignRegionRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{10}
}

func (x *AssignRegionRequest) GetRegion() *RegionSpecifier {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *AssignRegionRequest) GetOverride() bool {
	if x != nil && x.Override != nil {
		return *x.Override
	}
	return Default_AssignRegionRequest_Override
}

type AssignRegionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AssignRegionResponse) Reset() {
	*x = AssignRegionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignRegionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignRegionResponse) ProtoMessage() {}

func (x *AssignRegionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignRegionResponse.ProtoReflect.Descriptor instead.
func (*AssignRegionResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{11}
}

type UnassignRegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region *RegionSpecifier `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	Force  *bool            `protobuf:"varint,2,opt,name=force,def=0" json:"force,omitempty"`
}

// Default values for UnassignRegionRequest fields.
const (
	Default_UnassignRegionRequest_Force = bool(false)
)

func (x *UnassignRegionRequest) Reset() {
	*x = UnassignRegionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnassignRegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnassignRegionRequest) ProtoMessage() {}

func (x *UnassignRegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnassignRegionRequest.ProtoReflect.Descriptor instead.
func (*UnassignRegionRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{12}
}

func (x *UnassignRegionRequest) GetRegion() *RegionSpecifier {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *UnassignRegionRequest) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return Default_UnassignRegionRequest_Force
}

type UnassignRegionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnassignRegionResponse) Reset() {
	*x = UnassignRegionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnassignRegionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnassignRegionResponse) ProtoMessage() {}

func (x *UnassignRegionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnassignRegionResponse.ProtoReflect.Descriptor instead.
func (*UnassignRegionResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{13}
}

type OfflineRegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region *RegionSpecifier `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
}

func (x *OfflineRegionRequest) Reset() {
	*x = OfflineRegionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineRegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineRegionRequest) ProtoMessage() {}

func (x *OfflineRegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineRegionRequest.ProtoReflect.Descriptor instead.
func (*OfflineRegionRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{14}
}

func (x *OfflineRegionRequest) GetRegion() *RegionSpecifier {
	if x != nil {
		return x.Region
	}
	return nil
}

type OfflineRegionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OfflineRegionResponse) Reset() {
	*x = OfflineRegionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineRegionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineRegionResponse) ProtoMessage() {}

func (x *OfflineRegionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineRegionResponse.ProtoReflect.Descriptor instead.
func (*OfflineRegionResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{15}
}

type SplitTableRegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionInfo *RegionInfo `protobuf:"bytes,1,req,name=region_info,json=regionInfo" json:"region_info,omitempty"`
	SplitRow   []byte      `protobuf:"bytes,2,opt,name=split_row,json=splitRow" json:"split_row,omitempty"`
	NonceGroup *uint64     `protobuf:"varint,3,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce      *uint64     `protobuf:"varint,4,opt,name=nonce,def=0" json:"nonce,omitempty"`
}

// Default values for SplitTableRegionRequest fields.
const (
	Default_SplitTableRegionRequest_NonceGroup = uint64(0)
	Default_SplitTableRegionRequest_Nonce      = uint64(0)
)

func (x *SplitTableRegionRequest) Reset() {
	*x = SplitTableRegionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitTableRegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitTableRegionRequest) ProtoMessage() {}

func (x *SplitTableRegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitTableRegionRequest.ProtoReflect.Descriptor instead.
func (*SplitTableRegionRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{16}
}

func (x *SplitTableRegionRequest) GetRegionInfo() *RegionInfo {
	if x != nil {
		return x.RegionInfo
	}
	return nil
}

func (x *SplitTableRegionRequest) GetSplitRow() []byte {
	if x != nil {
		return x.SplitRow
	}
	return nil
}

func (x *SplitTableRegionRequest) GetNonceGroup() uint64 {
	if x != nil && x.NonceGroup != nil {
		return *x.NonceGroup
	}
	return Default_SplitTableRegionRequest_NonceGroup
}

func (x *SplitTableRegionRequest) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return Default_SplitTableRegionRequest_Nonce
}

type SplitTableRegionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcId *uint64 `protobuf:"varint,1,opt,name=proc_id,json=procId" json:"proc_id,omitempty"`
}

func (x *SplitTableRegionResponse) Reset() {
	*x = SplitTableRegionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitTableRegionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitTableRegionResponse) ProtoMessage() {}

func (x *SplitTableRegionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitTableRegionResponse.ProtoReflect.Descriptor instead.
func (*SplitTableRegionResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{17}
}

func (x *SplitTableRegionResponse) GetProcId() uint64 {
	if x != nil && x.ProcId != nil {
		return *x.ProcId
	}
	return 0
}

type CreateTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableSchema *TableSchema `protobuf:"bytes,1,req,name=table_schema,json=tableSchema" json:"table_schema,omitempty"`
	SplitKeys   [][]byte     `protobuf:"bytes,2,rep,name=split_keys,json=splitKeys" json:"split_keys,omitempty"`
	NonceGroup  *uint64      `protobuf:"varint,3,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce       *uint64      `protobuf:"varint,4,opt,name=nonce,def=0" json:"nonce,omitempty"`
}

// Default values for CreateTableRequest fields.
const (
	Default_CreateTableRequest_NonceGroup = uint64(0)
	Default_CreateTableRequest_Nonce      = uint64(0)
)

func (x *CreateTableRequest) Reset() {
	*x = CreateTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableRequest) ProtoMessage() {}

func (x *CreateTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableRequest.ProtoReflect.Descriptor instead.
func (*CreateTableRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{18}
}

func (x *CreateTableRequest) GetTableSchema() *TableSchema {
	if x != nil {
		return x.TableSchema
	}
	return nil
}

func (x *CreateTableRequest) GetSplitKeys() [][]byte {
	if x != nil {
		return x.SplitKeys
	}
	return nil
}

func (x *CreateTableRequest) GetNonceGroup() uint64 {
	if x != nil && x.NonceGroup != nil {
		return *x.NonceGroup
	}
	return Default_CreateTableRequest_NonceGroup
}

func (x *CreateTableRequest) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return Default_CreateTableRequest_Nonce
}

type CreateTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcId *uint64 `protobuf:"varint,1,opt,name=proc_id,json=procId" json:"proc_id,omitempty"`
}

func (x *CreateTableResponse) Reset() {
	*x = CreateTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableResponse) ProtoMessage() {}

func (x *CreateTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableResponse.ProtoReflect.Descriptor instead.
func (*CreateTableResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{19}
}

func (x *CreateTableResponse) GetProcId() uint64 {
	if x != nil && x.ProcId != nil {
		return *x.ProcId
	}
	return 0
}

type DeleteTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName  *TableName `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	NonceGroup *uint64    `protobuf:"varint,2,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce      *uint64    `protobuf:"varint,3,opt,name=nonce,def=0" json:"nonce,omitempty"`
}

// Default values for DeleteTableRequest fields.
const (
	Default_DeleteTableRequest_NonceGroup = uint64(0)
	Default_DeleteTableRequest_Nonce      = uint64(0)
)

func (x *DeleteTableRequest) Reset() {
	*x = DeleteTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTableRequest) ProtoMessage() {}

func (x *DeleteTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTableRequest.ProtoReflect.Descriptor instead.
func (*DeleteTableRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteTableRequest) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *DeleteTableRequest) GetNonceGroup() uint64 {
	if x != nil && x.NonceGroup != nil {
		return *x.NonceGroup
	}
	return Default_DeleteTableRequest_NonceGroup
}

func (x *DeleteTableRequest) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return Default_DeleteTableRequest_Nonce
}

type DeleteTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcId *uint64 `protobuf:"varint,1,opt,name=proc_id,json=procId" json:"proc_id,omitempty"`
}

func (x *DeleteTableResponse) Reset() {
	*x = DeleteTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTableResponse) ProtoMessage() {}

func (x *DeleteTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTableResponse.ProtoReflect.Descriptor instead.
func (*DeleteTableResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteTableResponse) GetProcId() uint64 {
	if x != nil && x.ProcId != nil {
		return *x.ProcId
	}
	return 0
}

type TruncateTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName      *TableName `protobuf:"bytes,1,req,name=tableName" json:"tableName,omitempty"`
	PreserveSplits *bool      `protobuf:"varint,2,opt,name=preserveSplits,def=0" json:"preserveSplits,omitempty"`
	NonceGroup     *uint64    `protobuf:"varint,3,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce          *uint64    `protobuf:"varint,4,opt,name=nonce,def=0" json:"nonce,omitempty"`
}

// Default values for TruncateTableRequest fields.
const (
	Default_TruncateTableRequest_PreserveSplits = bool(false)
	Default_TruncateTableRequest_NonceGroup     = uint64(0)
	Default_TruncateTableRequest_Nonce          = uint64(0)
)

func (x *TruncateTableRequest) Reset() {
	*x = TruncateTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TruncateTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateTableRequest) ProtoMessage() {}

func (x *TruncateTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateTableRequest.ProtoReflect.Descriptor instead.
func (*TruncateTableRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{22}
}

func (x *TruncateTableRequest) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *TruncateTableRequest) GetPreserveSplits() bool {
	if x != nil && x.PreserveSplits != nil {
		return *x.PreserveSplits
	}
	return Default_TruncateTableRequest_PreserveSplits
}

func (x *TruncateTableRequest) GetNonceGroup() uint64 {
	if x != nil && x.NonceGroup != nil {
		return *x.NonceGroup
	}
	return Default_TruncateTableRequest_NonceGroup
}

func (x *TruncateTableRequest) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return Default_TruncateTableRequest_Nonce
}

type TruncateTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcId *uint64 `protobuf:"varint,1,opt,name=proc_id,json=procId" json:"proc_id,omitempty"`
}

func (x *TruncateTableResponse) Reset() {
	*x = TruncateTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TruncateTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateTableResponse) ProtoMessage() {}

func (x *TruncateTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateTableResponse.ProtoReflect.Descriptor instead.
func (*TruncateTableResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{23}
}

func (x *TruncateTableResponse) GetProcId() uint64 {
	if x != nil && x.ProcId != nil {
		return *x.ProcId
	}
	return 0
}

type EnableTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName  *TableName `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	NonceGroup *uint64    `protobuf:"varint,2,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce      *uint64    `protobuf:"varint,3,opt,name=nonce,def=0" json:"nonce,omitempty"`
}

// Default values for EnableTableRequest fields.
const (
	Default_EnableTableRequest_NonceGroup = uint64(0)
	Default_EnableTableRequest_Nonce      = uint64(0)
)

func (x *EnableTableRequest) Reset() {
	*x = EnableTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableTableRequest) ProtoMessage() {}

func (x *EnableTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableTableRequest.ProtoReflect.Descriptor instead.
func (*EnableTableRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{24}
}

func (x *EnableTableRequest) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *EnableTableRequest) GetNonceGroup() uint64 {
	if x != nil && x.NonceGroup != nil {
		return *x.NonceGroup
	}
	return Default_EnableTableRequest_NonceGroup
}

func (x *EnableTableRequest) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return Default_EnableTableRequest_Nonce
}

type EnableTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcId *uint64 `protobuf:"varint,1,opt,name=proc_id,json=procId" json:"proc_id,omitempty"`
}

func (x *EnableTableResponse) Reset() {
	*x = EnableTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableTableResponse) ProtoMessage() {}

func (x *EnableTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableTableResponse.ProtoReflect.Descriptor instead.
func (*EnableTableResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{25}
}

func (x *EnableTableResponse) GetProcId() uint64 {
	if x != nil && x.ProcId != nil {
		return *x.ProcId
	}
	return 0
}

type DisableTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName  *TableName `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	NonceGroup *uint64    `protobuf:"varint,2,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce      *uint64    `protobuf:"varint,3,opt,name=nonce,def=0" json:"nonce,omitempty"`
}

// Default values for DisableTableRequest fields.
const (
	Default_DisableTableRequest_NonceGroup = uint64(0)
	Default_DisableTableRequest_Nonce      = uint64(0)
)

func (x *DisableTableRequest) Reset() {
	*x = DisableTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableTableRequest) ProtoMessage() {}

func (x *DisableTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableTableRequest.ProtoReflect.Descriptor instead.
func (*DisableTableRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{26}
}

func (x *DisableTableRequest) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *DisableTableRequest) GetNonceGroup() uint64 {
	if x != nil && x.NonceGroup != nil {
		return *x.NonceGroup
	}
	return Default_DisableTableRequest_NonceGroup
}

func (x *DisableTableRequest) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return Default_DisableTableRequest_Nonce
}

type DisableTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcId *uint64 `protobuf:"varint,1,opt,name=proc_id,json=procId" json:"proc_id,omitempty"`
}

func (x *DisableTableResponse) Reset() {
	*x = DisableTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableTableResponse) ProtoMessage() {}

func (x *DisableTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableTableResponse.ProtoReflect.Descriptor instead.
func (*DisableTableResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{27}
}

func (x *DisableTableResponse) GetProcId() uint64 {
	if x != nil && x.ProcId != nil {
		return *x.ProcId
	}
	return 0
}

type ModifyTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName   *TableName   `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	TableSchema *TableSchema `protobuf:"bytes,2,req,name=table_schema,json=tableSchema" json:"table_schema,omitempty"`
	NonceGroup  *uint64      `protobuf:"varint,3,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce       *uint64      `protobuf:"varint,4,opt,name=nonce,def=0" json:"nonce,omitempty"`
}

// Default values for ModifyTableRequest fields.
const (
	Default_ModifyTableRequest_NonceGroup = uint64(0)
	Default_ModifyTableRequest_Nonce      = uint64(0)
)

func (x *ModifyTableRequest) Reset() {
	*x = ModifyTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyTableRequest) ProtoMessage() {}

func (x *ModifyTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyTableRequest.ProtoReflect.Descriptor instead.
func (*ModifyTableRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{28}
}

func (x *ModifyTableRequest) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *ModifyTableRequest) GetTableSchema() *TableSchema {
	if x != nil {
		return x.TableSchema
	}
	return nil
}

func (x *ModifyTableRequest) GetNonceGroup() uint64 {
	if x != nil && x.NonceGroup != nil {
		return *x.NonceGroup
	}
	return Default_ModifyTableRequest_NonceGroup
}

func (x *ModifyTableRequest) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return Default_ModifyTableRequest_Nonce
}

type ModifyTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcId *uint64 `protobuf:"varint,1,opt,name=proc_id,json=procId" json:"proc_id,omitempty"`
}

func (x *ModifyTableResponse) Reset() {
	*x = ModifyTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyTableResponse) ProtoMessage() {}

func (x *ModifyTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyTableResponse.ProtoReflect.Descriptor instead.
func (*ModifyTableResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{29}
}

func (x *ModifyTableResponse) GetProcId() uint64 {
	if x != nil && x.ProcId != nil {
		return *x.ProcId
	}
	return 0
}

type CreateNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceDescriptor *NamespaceDescriptor `protobuf:"bytes,1,req,name=namespaceDescriptor" json:"namespaceDescriptor,omitempty"`
	NonceGroup          *uint64              `protobuf:"varint,2,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce               *uint64              `protobuf:"varint,3,opt,name=nonce,def=0" json:"nonce,omitempty"`
}

// Default values for CreateNamespaceRequest fields.
const (
	Default_CreateNamespaceRequest_NonceGroup = uint64(0)
	Default_CreateNamespaceRequest_Nonce      = uint64(0)
)

func (x *CreateNamespaceRequest) Reset() {
	*x = CreateNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamespaceRequest) ProtoMessage() {}

func (x *CreateNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamespaceRequest.ProtoReflect.Descriptor instead.
func (*CreateNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{30}
}

func (x *CreateNamespaceRequest) GetNamespaceDescriptor() *NamespaceDescriptor {
	if x != nil {
		return x.NamespaceDescriptor
	}
	return nil
}

func (x *CreateNamespaceRequest) GetNonceGroup() uint64 {
	if x != nil && x.NonceGroup != nil {
		return *x.NonceGroup
	}
	return Default_CreateNamespaceRequest_NonceGroup
}

func (x *CreateNamespaceRequest) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return Default_CreateNamespaceRequest_Nonce
}

type CreateNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcId *uint64 `protobuf:"varint,1,opt,name=proc_id,json=procId" json:"proc_id,omitempty"`
}

func (x *CreateNamespaceResponse) Reset() {
	*x = CreateNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamespaceResponse) ProtoMessage() {}

func (x *CreateNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamespaceResponse.ProtoReflect.Descriptor instead.
func (*CreateNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{31}
}

func (x *CreateNamespaceResponse) GetProcId() uint64 {
	if x != nil && x.ProcId != nil {
		return *x.ProcId
	}
	return 0
}

type DeleteNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceName *string `protobuf:"bytes,1,req,name=namespaceName" json:"namespaceName,omitempty"`
	NonceGroup    *uint64 `protobuf:"varint,2,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce         *uint64 `protobuf:"varint,3,opt,name=nonce,def=0" json:"nonce,omitempty"`
}

// Default values for DeleteNamespaceRequest fields.
const (
	Default_DeleteNamespaceRequest_NonceGroup = uint64(0)
	Default_DeleteNamespaceRequest_Nonce      = uint64(0)
)

func (x *DeleteNamespaceRequest) Reset() {
	*x = DeleteNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNamespaceRequest) ProtoMessage() {}

func (x *DeleteNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNamespaceRequest.ProtoReflect.Descriptor instead.
func (*DeleteNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteNamespaceRequest) GetNamespaceName() string {
	if x != nil && x.NamespaceName != nil {
		return *x.NamespaceName
	}
	return ""
}

func (x *DeleteNamespaceRequest) GetNonceGroup() uint64 {
	if x != nil && x.NonceGroup != nil {
		return *x.NonceGroup
	}
	return Default_DeleteNamespaceRequest_NonceGroup
}

func (x *DeleteNamespaceRequest) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return Default_DeleteNamespaceRequest_Nonce
}

type DeleteNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcId *uint64 `protobuf:"varint,1,opt,name=proc_id,json=procId" json:"proc_id,omitempty"`
}

func (x *DeleteNamespaceResponse) Reset() {
	*x = DeleteNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNamespaceResponse) ProtoMessage() {}

func (x *DeleteNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNamespaceResponse.ProtoReflect.Descriptor instead.
func (*DeleteNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteNamespaceResponse) GetProcId() uint64 {
	if x != nil && x.ProcId != nil {
		return *x.ProcId
	}
	return 0
}

type ModifyNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceDescriptor *NamespaceDescriptor `protobuf:"bytes,1,req,name=namespaceDescriptor" json:"namespaceDescriptor,omitempty"`
	NonceGroup          *uint64              `protobuf:"varint,2,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce               *uint64              `protobuf:"varint,3,opt,name=nonce,def=0" json:"nonce,omitempty"`
}

// Default values for ModifyNamespaceRequest fields.
const (
	Default_ModifyNamespaceRequest_NonceGroup = uint64(0)
	Default_ModifyNamespaceRequest_Nonce      = uint64(0)
)

func (x *ModifyNamespaceRequest) Reset() {
	*x = ModifyNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyNamespaceRequest) ProtoMessage() {}

func (x *ModifyNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyNamespaceRequest.ProtoReflect.Descriptor instead.
func (*ModifyNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{34}
}

func (x *ModifyNamespaceRequest) GetNamespaceDescriptor() *NamespaceDescriptor {
	if x != nil {
		return x.NamespaceDescriptor
	}
	return nil
}

func (x *ModifyNamespaceRequest) GetNonceGroup() uint64 {
	if x != nil && x.NonceGroup != nil {
		return *x.NonceGroup
	}
	return Default_ModifyNamespaceRequest_NonceGroup
}

func (x *ModifyNamespaceRequest) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return Default_ModifyNamespaceRequest_Nonce
}

type ModifyNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcId *uint64 `protobuf:"varint,1,opt,name=proc_id,json=procId" json:"proc_id,omitempty"`
}

func (x *ModifyNamespaceResponse) Reset() {
	*x = ModifyNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyNamespaceResponse) ProtoMessage() {}

func (x *ModifyNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyNamespaceResponse.ProtoReflect.Descriptor instead.
func (*ModifyNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{35}
}

func (x *ModifyNamespaceResponse) GetProcId() uint64 {
	if x != nil && x.ProcId != nil {
		return *x.ProcId
	}
	return 0
}

type GetNamespaceDescriptorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceName *string `protobuf:"bytes,1,req,name=namespaceName" json:"namespaceName,omitempty"`
}

func (x *GetNamespaceDescriptorRequest) Reset() {
	*x = GetNamespaceDescriptorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNamespaceDescriptorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNamespaceDescriptorRequest) ProtoMessage() {}

func (x *GetNamespaceDescriptorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNamespaceDescriptorRequest.ProtoReflect.Descriptor instead.
func (*GetNamespaceDescriptorRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{36}
}

func (x *GetNamespaceDescriptorRequest) GetNamespaceName() string {
	if x != nil && x.NamespaceName != nil {
		return *x.NamespaceName
	}
	return ""
}

type GetNamespaceDescriptorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceDescriptor *NamespaceDescriptor `protobuf:"bytes,1,req,name=namespaceDescriptor" json:"namespaceDescriptor,omitempty"`
}

func (x *GetNamespaceDescriptorResponse) Reset() {
	*x = GetNamespaceDescriptorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNamespaceDescriptorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNamespaceDescriptorResponse) ProtoMessage() {}

func (x *GetNamespaceDescriptorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNamespaceDescriptorResponse.ProtoReflect.Descriptor instead.
func (*GetNamespaceDescriptorResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{37}
}

func (x *GetNamespaceDescriptorResponse) GetNamespaceDescriptor() *NamespaceDescriptor {
	if x != nil {
		return x.NamespaceDescriptor
	}
	return nil
}

type ListNamespaceDescriptorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListNamespaceDescriptorsRequest) Reset() {
	*x = ListNamespaceDescriptorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamespaceDescriptorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespaceDescriptorsRequest) ProtoMessage() {}

func (x *ListNamespaceDescriptorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespaceDescriptorsRequest.ProtoReflect.Descriptor instead.
func (*ListNamespaceDescriptorsRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{38}
}

type ListNamespaceDescriptorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceDescriptor []*NamespaceDescriptor `protobuf:"bytes,1,rep,name=namespaceDescriptor" json:"namespaceDescriptor,omitempty"`
}

func (x *ListNamespaceDescriptorsResponse) Reset() {
	*x = ListNamespaceDescriptorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamespaceDescriptorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespaceDescriptorsResponse) ProtoMessage() {}

func (x *ListNamespaceDescriptorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespaceDescriptorsResponse.ProtoReflect.Descriptor instead.
func (*ListNamespaceDescriptorsResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{39}
}

func (x *ListNamespaceDescriptorsResponse) GetNamespaceDescriptor() []*NamespaceDescriptor {
	if x != nil {
		return x.NamespaceDescriptor
	}
	return nil
}

type ListTableDescriptorsByNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceName *string `protobuf:"bytes,1,req,name=namespaceName" json:"namespaceName,omitempty"`
}

func (x *ListTableDescriptorsByNamespaceRequest) Reset() {
	*x = ListTableDescriptorsByNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTableDescriptorsByNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTableDescriptorsByNamespaceRequest) ProtoMessage() {}

func (x *ListTableDescriptorsByNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTableDescriptorsByNamespaceRequest.ProtoReflect.Descriptor instead.
func (*ListTableDescriptorsByNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{40}
}

func (x *ListTableDescriptorsByNamespaceRequest) GetNamespaceName() string {
	if x != nil && x.NamespaceName != nil {
		return *x.NamespaceName
	}
	return ""
}

type ListTableDescriptorsByNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableSchema []*TableSchema `protobuf:"bytes,1,rep,name=tableSchema" json:"tableSchema,omitempty"`
}

func (x *ListTableDescriptorsByNamespaceResponse) Reset() {
	*x = ListTableDescriptorsByNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTableDescriptorsByNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTableDescriptorsByNamespaceResponse) ProtoMessage() {}

func (x *ListTableDescriptorsByNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTableDescriptorsByNamespaceResponse.ProtoReflect.Descriptor instead.
func (*ListTableDescriptorsByNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{41}
}

func (x *ListTableDescriptorsByNamespaceResponse) GetTableSchema() []*TableSchema {
	if x != nil {
		return x.TableSchema
	}
	return nil
}

type ListTableNamesByNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceName *string `protobuf:"bytes,1,req,name=namespaceName" json:"namespaceName,omitempty"`
}

func (x *ListTableNamesByNamespaceRequest) Reset() {
	*x = ListTableNamesByNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTableNamesByNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTableNamesByNamespaceRequest) ProtoMessage() {}

func (x *ListTableNamesByNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTableNamesByNamespaceRequest.ProtoReflect.Descriptor instead.
func (*ListTableNamesByNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{42}
}

func (x *ListTableNamesByNamespaceRequest) GetNamespaceName() string {
	if x != nil && x.NamespaceName != nil {
		return *x.NamespaceName
	}
	return ""
}

type ListTableNamesByNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName []*TableName `protobuf:"bytes,1,rep,name=tableName" json:"tableName,omitempty"`
}

func (x *ListTableNamesByNamespaceResponse) Reset() {
	*x = ListTableNamesByNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTableNamesByNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTableNamesByNamespaceResponse) ProtoMessage() {}

func (x *ListTableNamesByNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTableNamesByNamespaceResponse.ProtoReflect.Descriptor instead.
func (*ListTableNamesByNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{43}
}

func (x *ListTableNamesByNamespaceResponse) GetTableName() []*TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

type ShutdownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutdownRequest) Reset() {
	*x = ShutdownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownRequest) ProtoMessage() {}

func (x *ShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownRequest.ProtoReflect.Descriptor instead.
func (*ShutdownRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{44}
}

type ShutdownResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutdownResponse) Reset() {
	*x = ShutdownResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownResponse) ProtoMessage() {}

func (x *ShutdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownResponse.ProtoReflect.Descriptor instead.
func (*ShutdownResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{45}
}

type StopMasterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopMasterRequest) Reset() {
	*x = StopMasterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopMasterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopMasterRequest) ProtoMessage() {}

func (x *StopMasterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopMasterRequest.ProtoReflect.Descriptor instead.
func (*StopMasterRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{46}
}

type StopMasterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopMasterResponse) Reset() {
	*x = StopMasterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopMasterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopMasterResponse) ProtoMessage() {}

func (x *StopMasterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopMasterResponse.ProtoReflect.Descriptor instead.
func (*StopMasterResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{47}
}

type IsInMaintenanceModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsInMaintenanceModeRequest) Reset() {
	*x = IsInMaintenanceModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsInMaintenanceModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsInMaintenanceModeRequest) ProtoMessage() {}

func (x *IsInMaintenanceModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsInMaintenanceModeRequest.ProtoReflect.Descriptor instead.
func (*IsInMaintenanceModeRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{48}
}

type IsInMaintenanceModeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InMaintenanceMode *bool `protobuf:"varint,1,req,name=inMaintenanceMode" json:"inMaintenanceMode,omitempty"`
}

func (x *IsInMaintenanceModeResponse) Reset() {
	*x = IsInMaintenanceModeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsInMaintenanceModeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsInMaintenanceModeResponse) ProtoMessage() {}

func (x *IsInMaintenanceModeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsInMaintenanceModeResponse.ProtoReflect.Descriptor instead.
func (*IsInMaintenanceModeResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{49}
}

func (x *IsInMaintenanceModeResponse) GetInMaintenanceMode() bool {
	if x != nil && x.InMaintenanceMode != nil {
		return *x.InMaintenanceMode
	}
	return false
}

type BalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Force *bool `protobuf:"varint,1,opt,name=force" json:"force,omitempty"`
}

func (x *BalanceRequest) Reset() {
	*x = BalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceRequest) ProtoMessage() {}

func (x *BalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceRequest.ProtoReflect.Descriptor instead.
func (*BalanceRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{50}
}

func (x *BalanceRequest) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return false
}

type BalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BalancerRan *bool `protobuf:"varint,1,req,name=balancer_ran,json=balancerRan" json:"balancer_ran,omitempty"`
}

func (x *BalanceResponse) Reset() {
	*x = BalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceResponse) ProtoMessage() {}

func (x *BalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceResponse.ProtoReflect.Descriptor instead.
func (*BalanceResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{51}
}

func (x *BalanceResponse) GetBalancerRan() bool {
	if x != nil && x.BalancerRan != nil {
		return *x.BalancerRan
	}
	return false
}

type SetBalancerRunningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	On          *bool `protobuf:"varint,1,req,name=on" json:"on,omitempty"`
	Synchronous *bool `protobuf:"varint,2,opt,name=synchronous" json:"synchronous,omitempty"`
}

func (x *SetBalancerRunningRequest) Reset() {
	*x = SetBalancerRunningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBalancerRunningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBalancerRunningRequest) ProtoMessage() {}

func (x *SetBalancerRunningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBalancerRunningRequest.ProtoReflect.Descriptor instead.
func (*SetBalancerRunningRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{52}
}

func (x *SetBalancerRunningRequest) GetOn() bool {
	if x != nil && x.On != nil {
		return *x.On
	}
	return false
}

func (x *SetBalancerRunningRequest) GetSynchronous() bool {
	if x != nil && x.Synchronous != nil {
		return *x.Synchronous
	}
	return false
}

type SetBalancerRunningResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevBalanceValue *bool `protobuf:"varint,1,opt,name=prev_balance_value,json=prevBalanceValue" json:"prev_balance_value,omitempty"`
}

func (x *SetBalancerRunningResponse) Reset() {
	*x = SetBalancerRunningResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBalancerRunningResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBalancerRunningResponse) ProtoMessage() {}

func (x *SetBalancerRunningResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBalancerRunningResponse.ProtoReflect.Descriptor instead.
func (*SetBalancerRunningResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{53}
}

func (x *SetBalancerRunningResponse) GetPrevBalanceValue() bool {
	if x != nil && x.PrevBalanceValue != nil {
		return *x.PrevBalanceValue
	}
	return false
}

type IsBalancerEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsBalancerEnabledRequest) Reset() {
	*x = IsBalancerEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsBalancerEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBalancerEnabledRequest) ProtoMessage() {}

func (x *IsBalancerEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBalancerEnabledRequest.ProtoReflect.Descriptor instead.
func (*IsBalancerEnabledRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{54}
}

type IsBalancerEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *bool `protobuf:"varint,1,req,name=enabled" json:"enabled,omitempty"`
}

func (x *IsBalancerEnabledResponse) Reset() {
	*x = IsBalancerEnabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsBalancerEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBalancerEnabledResponse) ProtoMessage() {}

func (x *IsBalancerEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBalancerEnabledResponse.ProtoReflect.Descriptor instead.
func (*IsBalancerEnabledResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{55}
}

func (x *IsBalancerEnabledResponse) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type SetSplitOrMergeEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled     *bool              `protobuf:"varint,1,req,name=enabled" json:"enabled,omitempty"`
	Synchronous *bool              `protobuf:"varint,2,opt,name=synchronous" json:"synchronous,omitempty"`
	SwitchTypes []MasterSwitchType `protobuf:"varint,3,rep,name=switch_types,json=switchTypes,enum=hbase.pb.MasterSwitchType" json:"switch_types,omitempty"`
}

func (x *SetSplitOrMergeEnabledRequest) Reset() {
	*x = SetSplitOrMergeEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSplitOrMergeEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSplitOrMergeEnabledRequest) ProtoMessage() {}

func (x *SetSplitOrMergeEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSplitOrMergeEnabledRequest.ProtoReflect.Descriptor instead.
func (*SetSplitOrMergeEnabledRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{56}
}

func (x *SetSplitOrMergeEnabledRequest) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *SetSplitOrMergeEnabledRequest) GetSynchronous() bool {
	if x != nil && x.Synchronous != nil {
		return *x.Synchronous
	}
	return false
}

func (x *SetSplitOrMergeEnabledRequest) GetSwitchTypes() []MasterSwitchType {
	if x != nil {
		return x.SwitchTypes
	}
	return nil
}

type SetSplitOrMergeEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevValue []bool `protobuf:"varint,1,rep,name=prev_value,json=prevValue" json:"prev_value,omitempty"`
}

func (x *SetSplitOrMergeEnabledResponse) Reset() {
	*x = SetSplitOrMergeEnabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSplitOrMergeEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSplitOrMergeEnabledResponse) ProtoMessage() {}

func (x *SetSplitOrMergeEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSplitOrMergeEnabledResponse.ProtoReflect.Descriptor instead.
func (*SetSplitOrMergeEnabledResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{57}
}

func (x *SetSplitOrMergeEnabledResponse) GetPrevValue() []bool {
	if x != nil {
		return x.PrevValue
	}
	return nil
}

type IsSplitOrMergeEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwitchType *MasterSwitchType `protobuf:"varint,1,req,name=switch_type,json=switchType,enum=hbase.pb.MasterSwitchType" json:"switch_type,omitempty"`
}

func (x *IsSplitOrMergeEnabledRequest) Reset() {
	*x = IsSplitOrMergeEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsSplitOrMergeEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsSplitOrMergeEnabledRequest) ProtoMessage() {}

func (x *IsSplitOrMergeEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsSplitOrMergeEnabledRequest.ProtoReflect.Descriptor instead.
func (*IsSplitOrMergeEnabledRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{58}
}

func (x *IsSplitOrMergeEnabledRequest) GetSwitchType() MasterSwitchType {
	if x != nil && x.SwitchType != nil {
		return *x.SwitchType
	}
	return MasterSwitchType_SPLIT
}

type IsSplitOrMergeEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *bool `protobuf:"varint,1,req,name=enabled" json:"enabled,omitempty"`
}

func (x *IsSplitOrMergeEnabledResponse) Reset() {
	*x = IsSplitOrMergeEnabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsSplitOrMergeEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsSplitOrMergeEnabledResponse) ProtoMessage() {}

func (x *IsSplitOrMergeEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsSplitOrMergeEnabledResponse.ProtoReflect.Descriptor instead.
func (*IsSplitOrMergeEnabledResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{59}
}

func (x *IsSplitOrMergeEnabledResponse) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type NormalizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NormalizeRequest) Reset() {
	*x = NormalizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NormalizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalizeRequest) ProtoMessage() {}

func (x *NormalizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalizeRequest.ProtoReflect.Descriptor instead.
func (*NormalizeRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{60}
}

type NormalizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NormalizerRan *bool `protobuf:"varint,1,req,name=normalizer_ran,json=normalizerRan" json:"normalizer_ran,omitempty"`
}

func (x *NormalizeResponse) Reset() {
	*x = NormalizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NormalizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalizeResponse) ProtoMessage() {}

func (x *NormalizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalizeResponse.ProtoReflect.Descriptor instead.
func (*NormalizeResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{61}
}

func (x *NormalizeResponse) GetNormalizerRan() bool {
	if x != nil && x.NormalizerRan != nil {
		return *x.NormalizerRan
	}
	return false
}

type SetNormalizerRunningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	On *bool `protobuf:"varint,1,req,name=on" json:"on,omitempty"`
}

func (x *SetNormalizerRunningRequest) Reset() {
	*x = SetNormalizerRunningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNormalizerRunningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNormalizerRunningRequest) ProtoMessage() {}

func (x *SetNormalizerRunningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNormalizerRunningRequest.ProtoReflect.Descriptor instead.
func (*SetNormalizerRunningRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{62}
}

func (x *SetNormalizerRunningRequest) GetOn() bool {
	if x != nil && x.On != nil {
		return *x.On
	}
	return false
}

type SetNormalizerRunningResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevNormalizerValue *bool `protobuf:"varint,1,opt,name=prev_normalizer_value,json=prevNormalizerValue" json:"prev_normalizer_value,omitempty"`
}

func (x *SetNormalizerRunningResponse) Reset() {
	*x = SetNormalizerRunningResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNormalizerRunningResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNormalizerRunningResponse) ProtoMessage() {}

func (x *SetNormalizerRunningResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNormalizerRunningResponse.ProtoReflect.Descriptor instead.
func (*SetNormalizerRunningResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{63}
}

func (x *SetNormalizerRunningResponse) GetPrevNormalizerValue() bool {
	if x != nil && x.PrevNormalizerValue != nil {
		return *x.PrevNormalizerValue
	}
	return false
}

type IsNormalizerEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsNormalizerEnabledRequest) Reset() {
	*x = IsNormalizerEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsNormalizerEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsNormalizerEnabledRequest) ProtoMessage() {}

func (x *IsNormalizerEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsNormalizerEnabledRequest.ProtoReflect.Descriptor instead.
func (*IsNormalizerEnabledRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{64}
}

type IsNormalizerEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *bool `protobuf:"varint,1,req,name=enabled" json:"enabled,omitempty"`
}

func (x *IsNormalizerEnabledResponse) Reset() {
	*x = IsNormalizerEnabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsNormalizerEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsNormalizerEnabledResponse) ProtoMessage() {}

func (x *IsNormalizerEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsNormalizerEnabledResponse.ProtoReflect.Descriptor instead.
func (*IsNormalizerEnabledResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{65}
}

func (x *IsNormalizerEnabledResponse) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type RunCatalogScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunCatalogScanRequest) Reset() {
	*x = RunCatalogScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCatalogScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCatalogScanRequest) ProtoMessage() {}

func (x *RunCatalogScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCatalogScanRequest.ProtoReflect.Descriptor instead.
func (*RunCatalogScanRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{66}
}

type RunCatalogScanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is how many archiving tasks we started as a result of this scan.
	ScanResult *int32 `protobuf:"varint,1,opt,name=scan_result,json=scanResult" json:"scan_result,omitempty"`
}

func (x *RunCatalogScanResponse) Reset() {
	*x = RunCatalogScanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCatalogScanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCatalogScanResponse) ProtoMessage() {}

func (x *RunCatalogScanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCatalogScanResponse.ProtoReflect.Descriptor instead.
func (*RunCatalogScanResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{67}
}

func (x *RunCatalogScanResponse) GetScanResult() int32 {
	if x != nil && x.ScanResult != nil {
		return *x.ScanResult
	}
	return 0
}

type EnableCatalogJanitorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable *bool `protobuf:"varint,1,req,name=enable" json:"enable,omitempty"`
}

func (x *EnableCatalogJanitorRequest) Reset() {
	*x = EnableCatalogJanitorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableCatalogJanitorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableCatalogJanitorRequest) ProtoMessage() {}

func (x *EnableCatalogJanitorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableCatalogJanitorRequest.ProtoReflect.Descriptor instead.
func (*EnableCatalogJanitorRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{68}
}

func (x *EnableCatalogJanitorRequest) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

type EnableCatalogJanitorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevValue *bool `protobuf:"varint,1,opt,name=prev_value,json=prevValue" json:"prev_value,omitempty"`
}

func (x *EnableCatalogJanitorResponse) Reset() {
	*x = EnableCatalogJanitorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableCatalogJanitorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableCatalogJanitorResponse) ProtoMessage() {}

func (x *EnableCatalogJanitorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableCatalogJanitorResponse.ProtoReflect.Descriptor instead.
func (*EnableCatalogJanitorResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{69}
}

func (x *EnableCatalogJanitorResponse) GetPrevValue() bool {
	if x != nil && x.PrevValue != nil {
		return *x.PrevValue
	}
	return false
}

type IsCatalogJanitorEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsCatalogJanitorEnabledRequest) Reset() {
	*x = IsCatalogJanitorEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCatalogJanitorEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCatalogJanitorEnabledRequest) ProtoMessage() {}

func (x *IsCatalogJanitorEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCatalogJanitorEnabledRequest.ProtoReflect.Descriptor instead.
func (*IsCatalogJanitorEnabledRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{70}
}

type IsCatalogJanitorEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *bool `protobuf:"varint,1,req,name=value" json:"value,omitempty"`
}

func (x *IsCatalogJanitorEnabledResponse) Reset() {
	*x = IsCatalogJanitorEnabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCatalogJanitorEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCatalogJanitorEnabledResponse) ProtoMessage() {}

func (x *IsCatalogJanitorEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCatalogJanitorEnabledResponse.ProtoReflect.Descriptor instead.
func (*IsCatalogJanitorEnabledResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{71}
}

func (x *IsCatalogJanitorEnabledResponse) GetValue() bool {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return false
}

type RunCleanerChoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunCleanerChoreRequest) Reset() {
	*x = RunCleanerChoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCleanerChoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCleanerChoreRequest) ProtoMessage() {}

func (x *RunCleanerChoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCleanerChoreRequest.ProtoReflect.Descriptor instead.
func (*RunCleanerChoreRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{72}
}

type RunCleanerChoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CleanerChoreRan *bool `protobuf:"varint,1,req,name=cleaner_chore_ran,json=cleanerChoreRan" json:"cleaner_chore_ran,omitempty"`
}

func (x *RunCleanerChoreResponse) Reset() {
	*x = RunCleanerChoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCleanerChoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCleanerChoreResponse) ProtoMessage() {}

func (x *RunCleanerChoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCleanerChoreResponse.ProtoReflect.Descriptor instead.
func (*RunCleanerChoreResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{73}
}

func (x *RunCleanerChoreResponse) GetCleanerChoreRan() bool {
	if x != nil && x.CleanerChoreRan != nil {
		return *x.CleanerChoreRan
	}
	return false
}

type SetCleanerChoreRunningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	On *bool `protobuf:"varint,1,req,name=on" json:"on,omitempty"`
}

func (x *SetCleanerChoreRunningRequest) Reset() {
	*x = SetCleanerChoreRunningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCleanerChoreRunningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCleanerChoreRunningRequest) ProtoMessage() {}

func (x *SetCleanerChoreRunningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCleanerChoreRunningRequest.ProtoReflect.Descriptor instead.
func (*SetCleanerChoreRunningRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{74}
}

func (x *SetCleanerChoreRunningRequest) GetOn() bool {
	if x != nil && x.On != nil {
		return *x.On
	}
	return false
}

type SetCleanerChoreRunningResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevValue *bool `protobuf:"varint,1,opt,name=prev_value,json=prevValue" json:"prev_value,omitempty"`
}

func (x *SetCleanerChoreRunningResponse) Reset() {
	*x = SetCleanerChoreRunningResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCleanerChoreRunningResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCleanerChoreRunningResponse) ProtoMessage() {}

func (x *SetCleanerChoreRunningResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCleanerChoreRunningResponse.ProtoReflect.Descriptor instead.
func (*SetCleanerChoreRunningResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{75}
}

func (x *SetCleanerChoreRunningResponse) GetPrevValue() bool {
	if x != nil && x.PrevValue != nil {
		return *x.PrevValue
	}
	return false
}

type IsCleanerChoreEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsCleanerChoreEnabledRequest) Reset() {
	*x = IsCleanerChoreEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCleanerChoreEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCleanerChoreEnabledRequest) ProtoMessage() {}

func (x *IsCleanerChoreEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCleanerChoreEnabledRequest.ProtoReflect.Descriptor instead.
func (*IsCleanerChoreEnabledRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{76}
}

type IsCleanerChoreEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *bool `protobuf:"varint,1,req,name=value" json:"value,omitempty"`
}

func (x *IsCleanerChoreEnabledResponse) Reset() {
	*x = IsCleanerChoreEnabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCleanerChoreEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCleanerChoreEnabledResponse) ProtoMessage() {}

func (x *IsCleanerChoreEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCleanerChoreEnabledResponse.ProtoReflect.Descriptor instead.
func (*IsCleanerChoreEnabledResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{77}
}

func (x *IsCleanerChoreEnabledResponse) GetValue() bool {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return false
}

type SnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshot *SnapshotDescription `protobuf:"bytes,1,req,name=snapshot" json:"snapshot,omitempty"`
}

func (x *SnapshotRequest) Reset() {
	*x = SnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotRequest) ProtoMessage() {}

func (x *SnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotRequest.ProtoReflect.Descriptor instead.
func (*SnapshotRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{78}
}

func (x *SnapshotRequest) GetSnapshot() *SnapshotDescription {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

type SnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpectedTimeout *int64 `protobuf:"varint,1,req,name=expected_timeout,json=expectedTimeout" json:"expected_timeout,omitempty"`
}

func (x *SnapshotResponse) Reset() {
	*x = SnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotResponse) ProtoMessage() {}

func (x *SnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotResponse.ProtoReflect.Descriptor instead.
func (*SnapshotResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{79}
}

func (x *SnapshotResponse) GetExpectedTimeout() int64 {
	if x != nil && x.ExpectedTimeout != nil {
		return *x.ExpectedTimeout
	}
	return 0
}

type GetCompletedSnapshotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCompletedSnapshotsRequest) Reset() {
	*x = GetCompletedSnapshotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompletedSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompletedSnapshotsRequest) ProtoMessage() {}

func (x *GetCompletedSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompletedSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*GetCompletedSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{80}
}

type GetCompletedSnapshotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshots []*SnapshotDescription `protobuf:"bytes,1,rep,name=snapshots" json:"snapshots,omitempty"`
}

func (x *GetCompletedSnapshotsResponse) Reset() {
	*x = GetCompletedSnapshotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompletedSnapshotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompletedSnapshotsResponse) ProtoMessage() {}

func (x *GetCompletedSnapshotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompletedSnapshotsResponse.ProtoReflect.Descriptor instead.
func (*GetCompletedSnapshotsResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{81}
}

func (x *GetCompletedSnapshotsResponse) GetSnapshots() []*SnapshotDescription {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

type DeleteSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshot *SnapshotDescription `protobuf:"bytes,1,req,name=snapshot" json:"snapshot,omitempty"`
}

func (x *DeleteSnapshotRequest) Reset() {
	*x = DeleteSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSnapshotRequest) ProtoMessage() {}

func (x *DeleteSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSnapshotRequest.ProtoReflect.Descriptor instead.
func (*DeleteSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{82}
}

func (x *DeleteSnapshotRequest) GetSnapshot() *SnapshotDescription {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

type DeleteSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSnapshotResponse) Reset() {
	*x = DeleteSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSnapshotResponse) ProtoMessage() {}

func (x *DeleteSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSnapshotResponse.ProtoReflect.Descriptor instead.
func (*DeleteSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{83}
}

type RestoreSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshot   *SnapshotDescription `protobuf:"bytes,1,req,name=snapshot" json:"snapshot,omitempty"`
	NonceGroup *uint64              `protobuf:"varint,2,opt,name=nonce_group,json=nonceGroup,def=0" json:"nonce_group,omitempty"`
	Nonce      *uint64              `protobuf:"varint,3,opt,name=nonce,def=0" json:"nonce,omitempty"`
	RestoreACL *bool                `protobuf:"varint,4,opt,name=restoreACL,def=0" json:"restoreACL,omitempty"`
}

// Default values for RestoreSnapshotRequest fields.
const (
	Default_RestoreSnapshotRequest_NonceGroup = uint64(0)
	Default_RestoreSnapshotRequest_Nonce      = uint64(0)
	Default_RestoreSnapshotRequest_RestoreACL = bool(false)
)

func (x *RestoreSnapshotRequest) Reset() {
	*x = RestoreSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreSnapshotRequest) ProtoMessage() {}

func (x *RestoreSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreSnapshotRequest.ProtoReflect.Descriptor instead.
func (*RestoreSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{84}
}

func (x *RestoreSnapshotRequest) GetSnapshot() *SnapshotDescription {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *RestoreSnapshotRequest) GetNonceGroup() uint64 {
	if x != nil && x.NonceGroup != nil {
		return *x.NonceGroup
	}
	return Default_RestoreSnapshotRequest_NonceGroup
}

func (x *RestoreSnapshotRequest) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return Default_RestoreSnapshotRequest_Nonce
}

func (x *RestoreSnapshotRequest) GetRestoreACL() bool {
	if x != nil && x.RestoreACL != nil {
		return *x.RestoreACL
	}
	return Default_RestoreSnapshotRequest_RestoreACL
}

type RestoreSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcId *uint64 `protobuf:"varint,1,req,name=proc_id,json=procId" json:"proc_id,omitempty"`
}

func (x *RestoreSnapshotResponse) Reset() {
	*x = RestoreSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreSnapshotResponse) ProtoMessage() {}

func (x *RestoreSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreSnapshotResponse.ProtoReflect.Descriptor instead.
func (*RestoreSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{85}
}

func (x *RestoreSnapshotResponse) GetProcId() uint64 {
	if x != nil && x.ProcId != nil {
		return *x.ProcId
	}
	return 0
}

// if you don't send the snapshot, then you will get it back
// in the response (if the snapshot is done) so you can check the snapshot
type IsSnapshotDoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshot *SnapshotDescription `protobuf:"bytes,1,opt,name=snapshot" json:"snapshot,omitempty"`
}

func (x *IsSnapshotDoneRequest) Reset() {
	*x = IsSnapshotDoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsSnapshotDoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsSnapshotDoneRequest) ProtoMessage() {}

func (x *IsSnapshotDoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsSnapshotDoneRequest.ProtoReflect.Descriptor instead.
func (*IsSnapshotDoneRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{86}
}

func (x *IsSnapshotDoneRequest) GetSnapshot() *SnapshotDescription {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

type IsSnapshotDoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Done     *bool                `protobuf:"varint,1,opt,name=done,def=0" json:"done,omitempty"`
	Snapshot *SnapshotDescription `protobuf:"bytes,2,opt,name=snapshot" json:"snapshot,omitempty"`
}

// Default values for IsSnapshotDoneResponse fields.
const (
	Default_IsSnapshotDoneResponse_Done = bool(false)
)

func (x *IsSnapshotDoneResponse) Reset() {
	*x = IsSnapshotDoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsSnapshotDoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsSnapshotDoneResponse) ProtoMessage() {}

func (x *IsSnapshotDoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsSnapshotDoneResponse.ProtoReflect.Descriptor instead.
func (*IsSnapshotDoneResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{87}
}

func (x *IsSnapshotDoneResponse) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return Default_IsSnapshotDoneResponse_Done
}

func (x *IsSnapshotDoneResponse) GetSnapshot() *SnapshotDescription {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

type IsRestoreSnapshotDoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshot *SnapshotDescription `protobuf:"bytes,1,opt,name=snapshot" json:"snapshot,omitempty"`
}

func (x *IsRestoreSnapshotDoneRequest) Reset() {
	*x = IsRestoreSnapshotDoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsRestoreSnapshotDoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsRestoreSnapshotDoneRequest) ProtoMessage() {}

func (x *IsRestoreSnapshotDoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsRestoreSnapshotDoneRequest.ProtoReflect.Descriptor instead.
func (*IsRestoreSnapshotDoneRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{88}
}

func (x *IsRestoreSnapshotDoneRequest) GetSnapshot() *SnapshotDescription {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

type IsRestoreSnapshotDoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Done *bool `protobuf:"varint,1,opt,name=done,def=0" json:"done,omitempty"`
}

// Default values for IsRestoreSnapshotDoneResponse fields.
const (
	Default_IsRestoreSnapshotDoneResponse_Done = bool(false)
)

func (x *IsRestoreSnapshotDoneResponse) Reset() {
	*x = IsRestoreSnapshotDoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsRestoreSnapshotDoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsRestoreSnapshotDoneResponse) ProtoMessage() {}

func (x *IsRestoreSnapshotDoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsRestoreSnapshotDoneResponse.ProtoReflect.Descriptor instead.
func (*IsRestoreSnapshotDoneResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{89}
}

func (x *IsRestoreSnapshotDoneResponse) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return Default_IsRestoreSnapshotDoneResponse_Done
}

type GetSchemaAlterStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName *TableName `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
}

func (x *GetSchemaAlterStatusRequest) Reset() {
	*x = GetSchemaAlterStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaAlterStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaAlterStatusRequest) ProtoMessage() {}

func (x *GetSchemaAlterStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaAlterStatusRequest.ProtoReflect.Descriptor instead.
func (*GetSchemaAlterStatusRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{90}
}

func (x *GetSchemaAlterStatusRequest) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

type GetSchemaAlterStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YetToUpdateRegions *uint32 `protobuf:"varint,1,opt,name=yet_to_update_regions,json=yetToUpdateRegions" json:"yet_to_update_regions,omitempty"`
	TotalRegions       *uint32 `protobuf:"varint,2,opt,name=total_regions,json=totalRegions" json:"total_regions,omitempty"`
}

func (x *GetSchemaAlterStatusResponse) Reset() {
	*x = GetSchemaAlterStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaAlterStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaAlterStatusResponse) ProtoMessage() {}

func (x *GetSchemaAlterStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaAlterStatusResponse.ProtoReflect.Descriptor instead.
func (*GetSchemaAlterStatusResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{91}
}

func (x *GetSchemaAlterStatusResponse) GetYetToUpdateRegions() uint32 {
	if x != nil && x.YetToUpdateRegions != nil {
		return *x.YetToUpdateRegions
	}
	return 0
}

func (x *GetSchemaAlterStatusResponse) GetTotalRegions() uint32 {
	if x != nil && x.TotalRegions != nil {
		return *x.TotalRegions
	}
	return 0
}

type GetTableDescriptorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableNames       []*TableName `protobuf:"bytes,1,rep,name=table_names,json=tableNames" json:"table_names,omitempty"`
	Regex            *string      `protobuf:"bytes,2,opt,name=regex" json:"regex,omitempty"`
	IncludeSysTables *bool        `protobuf:"varint,3,opt,name=include_sys_tables,json=includeSysTables,def=0" json:"include_sys_tables,omitempty"`
	Namespace        *string      `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
}

// Default values for GetTableDescriptorsRequest fields.
const (
	Default_GetTableDescriptorsRequest_IncludeSysTables = bool(false)
)

func (x *GetTableDescriptorsRequest) Reset() {
	*x = GetTableDescriptorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableDescriptorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableDescriptorsRequest) ProtoMessage() {}

func (x *GetTableDescriptorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableDescriptorsRequest.ProtoReflect.Descriptor instead.
func (*GetTableDescriptorsRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{92}
}

func (x *GetTableDescriptorsRequest) GetTableNames() []*TableName {
	if x != nil {
		return x.TableNames
	}
	return nil
}

func (x *GetTableDescriptorsRequest) GetRegex() string {
	if x != nil && x.Regex != nil {
		return *x.Regex
	}
	return ""
}

func (x *GetTableDescriptorsRequest) GetIncludeSysTables() bool {
	if x != nil && x.IncludeSysTables != nil {
		return *x.IncludeSysTables
	}
	return Default_GetTableDescriptorsRequest_IncludeSysTables
}

func (x *GetTableDescriptorsRequest) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

type GetTableDescriptorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableSchema []*TableSchema `protobuf:"bytes,1,rep,name=table_schema,json=tableSchema" json:"table_schema,omitempty"`
}

func (x *GetTableDescriptorsResponse) Reset() {
	*x = GetTableDescriptorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableDescriptorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableDescriptorsResponse) ProtoMessage() {}

func (x *GetTableDescriptorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableDescriptorsResponse.ProtoReflect.Descriptor instead.
func (*GetTableDescriptorsResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{93}
}

func (x *GetTableDescriptorsResponse) GetTableSchema() []*TableSchema {
	if x != nil {
		return x.TableSchema
	}
	return nil
}

type GetTableNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regex            *string `protobuf:"bytes,1,opt,name=regex" json:"regex,omitempty"`
	IncludeSysTables *bool   `protobuf:"varint,2,opt,name=include_sys_tables,json=includeSysTables,def=0" json:"include_sys_tables,omitempty"`
	Namespace        *string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
}

// Default values for GetTableNamesRequest fields.
const (
	Default_GetTableNamesRequest_IncludeSysTables = bool(false)
)

func (x *GetTableNamesRequest) Reset() {
	*x = GetTableNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableNamesRequest) ProtoMessage() {}

func (x *GetTableNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableNamesRequest.ProtoReflect.Descriptor instead.
func (*GetTableNamesRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{94}
}

func (x *GetTableNamesRequest) GetRegex() string {
	if x != nil && x.Regex != nil {
		return *x.Regex
	}
	return ""
}

func (x *GetTableNamesRequest) GetIncludeSysTables() bool {
	if x != nil && x.IncludeSysTables != nil {
		return *x.IncludeSysTables
	}
	return Default_GetTableNamesRequest_IncludeSysTables
}

func (x *GetTableNamesRequest) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

type GetTableNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableNames []*TableName `protobuf:"bytes,1,rep,name=table_names,json=tableNames" json:"table_names,omitempty"`
}

func (x *GetTableNamesResponse) Reset() {
	*x = GetTableNamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableNamesResponse) ProtoMessage() {}

func (x *GetTableNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableNamesResponse.ProtoReflect.Descriptor instead.
func (*GetTableNamesResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{95}
}

func (x *GetTableNamesResponse) GetTableNames() []*TableName {
	if x != nil {
		return x.TableNames
	}
	return nil
}

type GetTableStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName *TableName `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
}

func (x *GetTableStateRequest) Reset() {
	*x = GetTableStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableStateRequest) ProtoMessage() {}

func (x *GetTableStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableStateRequest.ProtoReflect.Descriptor instead.
func (*GetTableStateRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{96}
}

func (x *GetTableStateRequest) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

type GetTableStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableState *TableState `protobuf:"bytes,1,req,name=table_state,json=tableState" json:"table_state,omitempty"`
}

func (x *GetTableStateResponse) Reset() {
	*x = GetTableStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableStateResponse) ProtoMessage() {}

func (x *GetTableStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableStateResponse.ProtoReflect.Descriptor instead.
func (*GetTableStateResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{97}
}

func (x *GetTableStateResponse) GetTableState() *TableState {
	if x != nil {
		return x.TableState
	}
	return nil
}

type GetClusterStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options []Option `protobuf:"varint,1,rep,name=options,enum=hbase.pb.Option" json:"options,omitempty"`
}

func (x *GetClusterStatusRequest) Reset() {
	*x = GetClusterStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterStatusRequest) ProtoMessage() {}

func (x *GetClusterStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterStatusRequest.ProtoReflect.Descriptor instead.
func (*GetClusterStatusRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{98}
}

func (x *GetClusterStatusRequest) GetOptions() []Option {
	if x != nil {
		return x.Options
	}
	return nil
}

type GetClusterStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterStatus *ClusterStatus `protobuf:"bytes,1,req,name=cluster_status,json=clusterStatus" json:"cluster_status,omitempty"`
}

func (x *GetClusterStatusResponse) Reset() {
	*x = GetClusterStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterStatusResponse) ProtoMessage() {}

func (x *GetClusterStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterStatusResponse.ProtoReflect.Descriptor instead.
func (*GetClusterStatusResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{99}
}

func (x *GetClusterStatusResponse) GetClusterStatus() *ClusterStatus {
	if x != nil {
		return x.ClusterStatus
	}
	return nil
}

type IsMasterRunningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsMasterRunningRequest) Reset() {
	*x = IsMasterRunningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsMasterRunningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsMasterRunningRequest) ProtoMessage() {}

func (x *IsMasterRunningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsMasterRunningRequest.ProtoReflect.Descriptor instead.
func (*IsMasterRunningRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{100}
}

type IsMasterRunningResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsMasterRunning *bool `protobuf:"varint,1,req,name=is_master_running,json=isMasterRunning" json:"is_master_running,omitempty"`
}

func (x *IsMasterRunningResponse) Reset() {
	*x = IsMasterRunningResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsMasterRunningResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsMasterRunningResponse) ProtoMessage() {}

func (x *IsMasterRunningResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsMasterRunningResponse.ProtoReflect.Descriptor instead.
func (*IsMasterRunningResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{101}
}

func (x *IsMasterRunningResponse) GetIsMasterRunning() bool {
	if x != nil && x.IsMasterRunning != nil {
		return *x.IsMasterRunning
	}
	return false
}

type ExecProcedureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Procedure *ProcedureDescription `protobuf:"bytes,1,req,name=procedure" json:"procedure,omitempty"`
}

func (x *ExecProcedureRequest) Reset() {
	*x = ExecProcedureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecProcedureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecProcedureRequest) ProtoMessage() {}

func (x *ExecProcedureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecProcedureRequest.ProtoReflect.Descriptor instead.
func (*ExecProcedureRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{102}
}

func (x *ExecProcedureRequest) GetProcedure() *ProcedureDescription {
	if x != nil {
		return x.Procedure
	}
	return nil
}

type ExecProcedureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpectedTimeout *int64 `protobuf:"varint,1,opt,name=expected_timeout,json=expectedTimeout" json:"expected_timeout,omitempty"`
	ReturnData      []byte `protobuf:"bytes,2,opt,name=return_data,json=returnData" json:"return_data,omitempty"`
}

func (x *ExecProcedureResponse) Reset() {
	*x = ExecProcedureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecProcedureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecProcedureResponse) ProtoMessage() {}

func (x *ExecProcedureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecProcedureResponse.ProtoReflect.Descriptor instead.
func (*ExecProcedureResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{103}
}

func (x *ExecProcedureResponse) GetExpectedTimeout() int64 {
	if x != nil && x.ExpectedTimeout != nil {
		return *x.ExpectedTimeout
	}
	return 0
}

func (x *ExecProcedureResponse) GetReturnData() []byte {
	if x != nil {
		return x.ReturnData
	}
	return nil
}

type IsProcedureDoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Procedure *ProcedureDescription `protobuf:"bytes,1,opt,name=procedure" json:"procedure,omitempty"`
}

func (x *IsProcedureDoneRequest) Reset() {
	*x = IsProcedureDoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsProcedureDoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsProcedureDoneRequest) ProtoMessage() {}

func (x *IsProcedureDoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsProcedureDoneRequest.ProtoReflect.Descriptor instead.
func (*IsProcedureDoneRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{104}
}

func (x *IsProcedureDoneRequest) GetProcedure() *ProcedureDescription {
	if x != nil {
		return x.Procedure
	}
	return nil
}

type IsProcedureDoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Done     *bool                 `protobuf:"varint,1,opt,name=done,def=0" json:"done,omitempty"`
	Snapshot *ProcedureDescription `protobuf:"bytes,2,opt,name=snapshot" json:"snapshot,omitempty"`
}

// Default values for IsProcedureDoneResponse fields.
const (
	Default_IsProcedureDoneResponse_Done = bool(false)
)

func (x *IsProcedureDoneResponse) Reset() {
	*x = IsProcedureDoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsProcedureDoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsProcedureDoneResponse) ProtoMessage() {}

func (x *IsProcedureDoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsProcedureDoneResponse.ProtoReflect.Descriptor instead.
func (*IsProcedureDoneResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{105}
}

func (x *IsProcedureDoneResponse) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return Default_IsProcedureDoneResponse_Done
}

func (x *IsProcedureDoneResponse) GetSnapshot() *ProcedureDescription {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

type GetProcedureResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcId *uint64 `protobuf:"varint,1,req,name=proc_id,json=procId" json:"proc_id,omitempty"`
}

func (x *GetProcedureResultRequest) Reset() {
	*x = GetProcedureResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProcedureResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcedureResultRequest) ProtoMessage() {}

func (x *GetProcedureResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcedureResultRequest.ProtoReflect.Descriptor instead.
func (*GetProcedureResultRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{106}
}

func (x *GetProcedureResultRequest) GetProcId() uint64 {
	if x != nil && x.ProcId != nil {
		return *x.ProcId
	}
	return 0
}

type GetProcedureResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State         *GetProcedureResultResponse_State `protobuf:"varint,1,req,name=state,enum=hbase.pb.GetProcedureResultResponse_State" json:"state,omitempty"`
	SubmittedTime *uint64                           `protobuf:"varint,2,opt,name=submitted_time,json=submittedTime" json:"submitted_time,omitempty"`
	LastUpdate    *uint64                           `protobuf:"varint,3,opt,name=last_update,json=lastUpdate" json:"last_update,omitempty"`
	Result        []byte                            `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
	Exception     *ForeignExceptionMessage          `protobuf:"bytes,5,opt,name=exception" json:"exception,omitempty"`
}

func (x *GetProcedureResultResponse) Reset() {
	*x = GetProcedureResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProcedureResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcedureResultResponse) ProtoMessage() {}

func (x *GetProcedureResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcedureResultResponse.ProtoReflect.Descriptor instead.
func (*GetProcedureResultResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{107}
}

func (x *GetProcedureResultResponse) GetState() GetProcedureResultResponse_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return GetProcedureResultResponse_NOT_FOUND
}

func (x *GetProcedureResultResponse) GetSubmittedTime() uint64 {
	if x != nil && x.SubmittedTime != nil {
		return *x.SubmittedTime
	}
	return 0
}

func (x *GetProcedureResultResponse) GetLastUpdate() uint64 {
	if x != nil && x.LastUpdate != nil {
		return *x.LastUpdate
	}
	return 0
}

func (x *GetProcedureResultResponse) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *GetProcedureResultResponse) GetException() *ForeignExceptionMessage {
	if x != nil {
		return x.Exception
	}
	return nil
}

type AbortProcedureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcId                *uint64 `protobuf:"varint,1,req,name=proc_id,json=procId" json:"proc_id,omitempty"`
	MayInterruptIfRunning *bool   `protobuf:"varint,2,opt,name=mayInterruptIfRunning,def=1" json:"mayInterruptIfRunning,omitempty"`
}

// Default values for AbortProcedureRequest fields.
const (
	Default_AbortProcedureRequest_MayInterruptIfRunning = bool(true)
)

func (x *AbortProcedureRequest) Reset() {
	*x = AbortProcedureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortProcedureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortProcedureRequest) ProtoMessage() {}

func (x *AbortProcedureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortProcedureRequest.ProtoReflect.Descriptor instead.
func (*AbortProcedureRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{108}
}

func (x *AbortProcedureRequest) GetProcId() uint64 {
	if x != nil && x.ProcId != nil {
		return *x.ProcId
	}
	return 0
}

func (x *AbortProcedureRequest) GetMayInterruptIfRunning() bool {
	if x != nil && x.MayInterruptIfRunning != nil {
		return *x.MayInterruptIfRunning
	}
	return Default_AbortProcedureRequest_MayInterruptIfRunning
}

type AbortProcedureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsProcedureAborted *bool `protobuf:"varint,1,req,name=is_procedure_aborted,json=isProcedureAborted" json:"is_procedure_aborted,omitempty"`
}

func (x *AbortProcedureResponse) Reset() {
	*x = AbortProcedureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortProcedureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortProcedureResponse) ProtoMessage() {}

func (x *AbortProcedureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortProcedureResponse.ProtoReflect.Descriptor instead.
func (*AbortProcedureResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{109}
}

func (x *AbortProcedureResponse) GetIsProcedureAborted() bool {
	if x != nil && x.IsProcedureAborted != nil {
		return *x.IsProcedureAborted
	}
	return false
}

type GetProceduresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetProceduresRequest) Reset() {
	*x = GetProceduresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProceduresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProceduresRequest) ProtoMessage() {}

func (x *GetProceduresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProceduresRequest.ProtoReflect.Descriptor instead.
func (*GetProceduresRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{110}
}

type GetProceduresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Procedure []*Procedure `protobuf:"bytes,1,rep,name=procedure" json:"procedure,omitempty"`
}

func (x *GetProceduresResponse) Reset() {
	*x = GetProceduresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProceduresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProceduresResponse) ProtoMessage() {}

func (x *GetProceduresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProceduresResponse.ProtoReflect.Descriptor instead.
func (*GetProceduresResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{111}
}

func (x *GetProceduresResponse) GetProcedure() []*Procedure {
	if x != nil {
		return x.Procedure
	}
	return nil
}

type GetLocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLocksRequest) Reset() {
	*x = GetLocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocksRequest) ProtoMessage() {}

func (x *GetLocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocksRequest.ProtoReflect.Descriptor instead.
func (*GetLocksRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{112}
}

type GetLocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lock []*LockedResource `protobuf:"bytes,1,rep,name=lock" json:"lock,omitempty"`
}

func (x *GetLocksResponse) Reset() {
	*x = GetLocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocksResponse) ProtoMessage() {}

func (x *GetLocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocksResponse.ProtoReflect.Descriptor instead.
func (*GetLocksResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{113}
}

func (x *GetLocksResponse) GetLock() []*LockedResource {
	if x != nil {
		return x.Lock
	}
	return nil
}

type SetQuotaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName      *string            `protobuf:"bytes,1,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	UserGroup     *string            `protobuf:"bytes,2,opt,name=user_group,json=userGroup" json:"user_group,omitempty"`
	Namespace     *string            `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	TableName     *TableName         `protobuf:"bytes,4,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	RemoveAll     *bool              `protobuf:"varint,5,opt,name=remove_all,json=removeAll" json:"remove_all,omitempty"`
	BypassGlobals *bool              `protobuf:"varint,6,opt,name=bypass_globals,json=bypassGlobals" json:"bypass_globals,omitempty"`
	Throttle      *ThrottleRequest   `protobuf:"bytes,7,opt,name=throttle" json:"throttle,omitempty"`
	SpaceLimit    *SpaceLimitRequest `protobuf:"bytes,8,opt,name=space_limit,json=spaceLimit" json:"space_limit,omitempty"`
	RegionServer  *string            `protobuf:"bytes,9,opt,name=region_server,json=regionServer" json:"region_server,omitempty"`
}

func (x *SetQuotaRequest) Reset() {
	*x = SetQuotaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetQuotaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetQuotaRequest) ProtoMessage() {}

func (x *SetQuotaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetQuotaRequest.ProtoReflect.Descriptor instead.
func (*SetQuotaRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{114}
}

func (x *SetQuotaRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *SetQuotaRequest) GetUserGroup() string {
	if x != nil && x.UserGroup != nil {
		return *x.UserGroup
	}
	return ""
}

func (x *SetQuotaRequest) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *SetQuotaRequest) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *SetQuotaRequest) GetRemoveAll() bool {
	if x != nil && x.RemoveAll != nil {
		return *x.RemoveAll
	}
	return false
}

func (x *SetQuotaRequest) GetBypassGlobals() bool {
	if x != nil && x.BypassGlobals != nil {
		return *x.BypassGlobals
	}
	return false
}

func (x *SetQuotaRequest) GetThrottle() *ThrottleRequest {
	if x != nil {
		return x.Throttle
	}
	return nil
}

func (x *SetQuotaRequest) GetSpaceLimit() *SpaceLimitRequest {
	if x != nil {
		return x.SpaceLimit
	}
	return nil
}

func (x *SetQuotaRequest) GetRegionServer() string {
	if x != nil && x.RegionServer != nil {
		return *x.RegionServer
	}
	return ""
}

type SetQuotaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetQuotaResponse) Reset() {
	*x = SetQuotaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetQuotaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetQuotaResponse) ProtoMessage() {}

func (x *SetQuotaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetQuotaResponse.ProtoReflect.Descriptor instead.
func (*SetQuotaResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{115}
}

type MajorCompactionTimestampRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName *TableName `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
}

func (x *MajorCompactionTimestampRequest) Reset() {
	*x = MajorCompactionTimestampRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MajorCompactionTimestampRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MajorCompactionTimestampRequest) ProtoMessage() {}

func (x *MajorCompactionTimestampRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MajorCompactionTimestampRequest.ProtoReflect.Descriptor instead.
func (*MajorCompactionTimestampRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{116}
}

func (x *MajorCompactionTimestampRequest) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

type MajorCompactionTimestampForRegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region *RegionSpecifier `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
}

func (x *MajorCompactionTimestampForRegionRequest) Reset() {
	*x = MajorCompactionTimestampForRegionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MajorCompactionTimestampForRegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MajorCompactionTimestampForRegionRequest) ProtoMessage() {}

func (x *MajorCompactionTimestampForRegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MajorCompactionTimestampForRegionRequest.ProtoReflect.Descriptor instead.
func (*MajorCompactionTimestampForRegionRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{117}
}

func (x *MajorCompactionTimestampForRegionRequest) GetRegion() *RegionSpecifier {
	if x != nil {
		return x.Region
	}
	return nil
}

type MajorCompactionTimestampResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompactionTimestamp *int64 `protobuf:"varint,1,req,name=compaction_timestamp,json=compactionTimestamp" json:"compaction_timestamp,omitempty"`
}

func (x *MajorCompactionTimestampResponse) Reset() {
	*x = MajorCompactionTimestampResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MajorCompactionTimestampResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MajorCompactionTimestampResponse) ProtoMessage() {}

func (x *MajorCompactionTimestampResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MajorCompactionTimestampResponse.ProtoReflect.Descriptor instead.
func (*MajorCompactionTimestampResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{118}
}

func (x *MajorCompactionTimestampResponse) GetCompactionTimestamp() int64 {
	if x != nil && x.CompactionTimestamp != nil {
		return *x.CompactionTimestamp
	}
	return 0
}

type SecurityCapabilitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SecurityCapabilitiesRequest) Reset() {
	*x = SecurityCapabilitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityCapabilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityCapabilitiesRequest) ProtoMessage() {}

func (x *SecurityCapabilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityCapabilitiesRequest.ProtoReflect.Descriptor instead.
func (*SecurityCapabilitiesRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{119}
}

type SecurityCapabilitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capabilities []SecurityCapabilitiesResponse_Capability `protobuf:"varint,1,rep,name=capabilities,enum=hbase.pb.SecurityCapabilitiesResponse_Capability" json:"capabilities,omitempty"`
}

func (x *SecurityCapabilitiesResponse) Reset() {
	*x = SecurityCapabilitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityCapabilitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityCapabilitiesResponse) ProtoMessage() {}

func (x *SecurityCapabilitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityCapabilitiesResponse.ProtoReflect.Descriptor instead.
func (*SecurityCapabilitiesResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{120}
}

func (x *SecurityCapabilitiesResponse) GetCapabilities() []SecurityCapabilitiesResponse_Capability {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type ListDecommissionedRegionServersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListDecommissionedRegionServersRequest) Reset() {
	*x = ListDecommissionedRegionServersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDecommissionedRegionServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDecommissionedRegionServersRequest) ProtoMessage() {}

func (x *ListDecommissionedRegionServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDecommissionedRegionServersRequest.ProtoReflect.Descriptor instead.
func (*ListDecommissionedRegionServersRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{121}
}

type ListDecommissionedRegionServersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerName []*ServerName `protobuf:"bytes,1,rep,name=server_name,json=serverName" json:"server_name,omitempty"`
}

func (x *ListDecommissionedRegionServersResponse) Reset() {
	*x = ListDecommissionedRegionServersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDecommissionedRegionServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDecommissionedRegionServersResponse) ProtoMessage() {}

func (x *ListDecommissionedRegionServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDecommissionedRegionServersResponse.ProtoReflect.Descriptor instead.
func (*ListDecommissionedRegionServersResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{122}
}

func (x *ListDecommissionedRegionServersResponse) GetServerName() []*ServerName {
	if x != nil {
		return x.ServerName
	}
	return nil
}

type DecommissionRegionServersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerName []*ServerName `protobuf:"bytes,1,rep,name=server_name,json=serverName" json:"server_name,omitempty"`
	Offload    *bool         `protobuf:"varint,2,req,name=offload" json:"offload,omitempty"`
}

func (x *DecommissionRegionServersRequest) Reset() {
	*x = DecommissionRegionServersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionRegionServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionRegionServersRequest) ProtoMessage() {}

func (x *DecommissionRegionServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionRegionServersRequest.ProtoReflect.Descriptor instead.
func (*DecommissionRegionServersRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{123}
}

func (x *DecommissionRegionServersRequest) GetServerName() []*ServerName {
	if x != nil {
		return x.ServerName
	}
	return nil
}

func (x *DecommissionRegionServersRequest) GetOffload() bool {
	if x != nil && x.Offload != nil {
		return *x.Offload
	}
	return false
}

type DecommissionRegionServersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DecommissionRegionServersResponse) Reset() {
	*x = DecommissionRegionServersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecommissionRegionServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecommissionRegionServersResponse) ProtoMessage() {}

func (x *DecommissionRegionServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecommissionRegionServersResponse.ProtoReflect.Descriptor instead.
func (*DecommissionRegionServersResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{124}
}

type RecommissionRegionServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerName *ServerName        `protobuf:"bytes,1,req,name=server_name,json=serverName" json:"server_name,omitempty"`
	Region     []*RegionSpecifier `protobuf:"bytes,2,rep,name=region" json:"region,omitempty"`
}

func (x *RecommissionRegionServerRequest) Reset() {
	*x = RecommissionRegionServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommissionRegionServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommissionRegionServerRequest) ProtoMessage() {}

func (x *RecommissionRegionServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommissionRegionServerRequest.ProtoReflect.Descriptor instead.
func (*RecommissionRegionServerRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{125}
}

func (x *RecommissionRegionServerRequest) GetServerName() *ServerName {
	if x != nil {
		return x.ServerName
	}
	return nil
}

func (x *RecommissionRegionServerRequest) GetRegion() []*RegionSpecifier {
	if x != nil {
		return x.Region
	}
	return nil
}

type RecommissionRegionServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecommissionRegionServerResponse) Reset() {
	*x = RecommissionRegionServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommissionRegionServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommissionRegionServerResponse) ProtoMessage() {}

func (x *RecommissionRegionServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommissionRegionServerResponse.ProtoReflect.Descriptor instead.
func (*RecommissionRegionServerResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{126}
}

type ClearDeadServersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerName []*ServerName `protobuf:"bytes,1,rep,name=server_name,json=serverName" json:"server_name,omitempty"`
}

func (x *ClearDeadServersRequest) Reset() {
	*x = ClearDeadServersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearDeadServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearDeadServersRequest) ProtoMessage() {}

func (x *ClearDeadServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearDeadServersRequest.ProtoReflect.Descriptor instead.
func (*ClearDeadServersRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{127}
}

func (x *ClearDeadServersRequest) GetServerName() []*ServerName {
	if x != nil {
		return x.ServerName
	}
	return nil
}

type ClearDeadServersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerName []*ServerName `protobuf:"bytes,1,rep,name=server_name,json=serverName" json:"server_name,omitempty"`
}

func (x *ClearDeadServersResponse) Reset() {
	*x = ClearDeadServersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearDeadServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearDeadServersResponse) ProtoMessage() {}

func (x *ClearDeadServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearDeadServersResponse.ProtoReflect.Descriptor instead.
func (*ClearDeadServersResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{128}
}

func (x *ClearDeadServersResponse) GetServerName() []*ServerName {
	if x != nil {
		return x.ServerName
	}
	return nil
}

type SwitchRpcThrottleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpcThrottleEnabled *bool `protobuf:"varint,1,req,name=rpc_throttle_enabled,json=rpcThrottleEnabled" json:"rpc_throttle_enabled,omitempty"`
}

func (x *SwitchRpcThrottleRequest) Reset() {
	*x = SwitchRpcThrottleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchRpcThrottleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchRpcThrottleRequest) ProtoMessage() {}

func (x *SwitchRpcThrottleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchRpcThrottleRequest.ProtoReflect.Descriptor instead.
func (*SwitchRpcThrottleRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{129}
}

func (x *SwitchRpcThrottleRequest) GetRpcThrottleEnabled() bool {
	if x != nil && x.RpcThrottleEnabled != nil {
		return *x.RpcThrottleEnabled
	}
	return false
}

type SwitchRpcThrottleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviousRpcThrottleEnabled *bool `protobuf:"varint,1,req,name=previous_rpc_throttle_enabled,json=previousRpcThrottleEnabled" json:"previous_rpc_throttle_enabled,omitempty"`
}

func (x *SwitchRpcThrottleResponse) Reset() {
	*x = SwitchRpcThrottleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchRpcThrottleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchRpcThrottleResponse) ProtoMessage() {}

func (x *SwitchRpcThrottleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchRpcThrottleResponse.ProtoReflect.Descriptor instead.
func (*SwitchRpcThrottleResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{130}
}

func (x *SwitchRpcThrottleResponse) GetPreviousRpcThrottleEnabled() bool {
	if x != nil && x.PreviousRpcThrottleEnabled != nil {
		return *x.PreviousRpcThrottleEnabled
	}
	return false
}

type IsRpcThrottleEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsRpcThrottleEnabledRequest) Reset() {
	*x = IsRpcThrottleEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsRpcThrottleEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsRpcThrottleEnabledRequest) ProtoMessage() {}

func (x *IsRpcThrottleEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsRpcThrottleEnabledRequest.ProtoReflect.Descriptor instead.
func (*IsRpcThrottleEnabledRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{131}
}

type IsRpcThrottleEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpcThrottleEnabled *bool `protobuf:"varint,1,req,name=rpc_throttle_enabled,json=rpcThrottleEnabled" json:"rpc_throttle_enabled,omitempty"`
}

func (x *IsRpcThrottleEnabledResponse) Reset() {
	*x = IsRpcThrottleEnabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsRpcThrottleEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsRpcThrottleEnabledResponse) ProtoMessage() {}

func (x *IsRpcThrottleEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsRpcThrottleEnabledResponse.ProtoReflect.Descriptor instead.
func (*IsRpcThrottleEnabledResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{132}
}

func (x *IsRpcThrottleEnabledResponse) GetRpcThrottleEnabled() bool {
	if x != nil && x.RpcThrottleEnabled != nil {
		return *x.RpcThrottleEnabled
	}
	return false
}

type SwitchExceedThrottleQuotaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExceedThrottleQuotaEnabled *bool `protobuf:"varint,1,req,name=exceed_throttle_quota_enabled,json=exceedThrottleQuotaEnabled" json:"exceed_throttle_quota_enabled,omitempty"`
}

func (x *SwitchExceedThrottleQuotaRequest) Reset() {
	*x = SwitchExceedThrottleQuotaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchExceedThrottleQuotaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchExceedThrottleQuotaRequest) ProtoMessage() {}

func (x *SwitchExceedThrottleQuotaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchExceedThrottleQuotaRequest.ProtoReflect.Descriptor instead.
func (*SwitchExceedThrottleQuotaRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{133}
}

func (x *SwitchExceedThrottleQuotaRequest) GetExceedThrottleQuotaEnabled() bool {
	if x != nil && x.ExceedThrottleQuotaEnabled != nil {
		return *x.ExceedThrottleQuotaEnabled
	}
	return false
}

type SwitchExceedThrottleQuotaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviousExceedThrottleQuotaEnabled *bool `protobuf:"varint,1,req,name=previous_exceed_throttle_quota_enabled,json=previousExceedThrottleQuotaEnabled" json:"previous_exceed_throttle_quota_enabled,omitempty"`
}

func (x *SwitchExceedThrottleQuotaResponse) Reset() {
	*x = SwitchExceedThrottleQuotaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchExceedThrottleQuotaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchExceedThrottleQuotaResponse) ProtoMessage() {}

func (x *SwitchExceedThrottleQuotaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchExceedThrottleQuotaResponse.ProtoReflect.Descriptor instead.
func (*SwitchExceedThrottleQuotaResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{134}
}

func (x *SwitchExceedThrottleQuotaResponse) GetPreviousExceedThrottleQuotaEnabled() bool {
	if x != nil && x.PreviousExceedThrottleQuotaEnabled != nil {
		return *x.PreviousExceedThrottleQuotaEnabled
	}
	return false
}

type SetTableStateInMetaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName  *TableName  `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	TableState *TableState `protobuf:"bytes,2,req,name=table_state,json=tableState" json:"table_state,omitempty"`
}

func (x *SetTableStateInMetaRequest) Reset() {
	*x = SetTableStateInMetaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTableStateInMetaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTableStateInMetaRequest) ProtoMessage() {}

func (x *SetTableStateInMetaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTableStateInMetaRequest.ProtoReflect.Descriptor instead.
func (*SetTableStateInMetaRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{135}
}

func (x *SetTableStateInMetaRequest) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *SetTableStateInMetaRequest) GetTableState() *TableState {
	if x != nil {
		return x.TableState
	}
	return nil
}

// NOTE: In hbck.proto, there is a define for
// AssignRegionRequest -- singular 'Region'. This
// is plural to convey it can carry more than one
// Region at a time.
type AssignsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region   []*RegionSpecifier `protobuf:"bytes,1,rep,name=region" json:"region,omitempty"`
	Override *bool              `protobuf:"varint,2,opt,name=override,def=0" json:"override,omitempty"`
}

// Default values for AssignsRequest fields.
const (
	Default_AssignsRequest_Override = bool(false)
)

func (x *AssignsRequest) Reset() {
	*x = AssignsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignsRequest) ProtoMessage() {}

func (x *AssignsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignsRequest.ProtoReflect.Descriptor instead.
func (*AssignsRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{136}
}

func (x *AssignsRequest) GetRegion() []*RegionSpecifier {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *AssignsRequest) GetOverride() bool {
	if x != nil && x.Override != nil {
		return *x.Override
	}
	return Default_AssignsRequest_Override
}

//* Like Admin's AssignRegionResponse except it can
// return one or more pids as result -- one per assign.
type AssignsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid []uint64 `protobuf:"varint,1,rep,name=pid" json:"pid,omitempty"`
}

func (x *AssignsResponse) Reset() {
	*x = AssignsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignsResponse) ProtoMessage() {}

func (x *AssignsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignsResponse.ProtoReflect.Descriptor instead.
func (*AssignsResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{137}
}

func (x *AssignsResponse) GetPid() []uint64 {
	if x != nil {
		return x.Pid
	}
	return nil
}

//* Like Admin's UnassignRegionRequest except it can
// take one or more Regions at a time.
type UnassignsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region   []*RegionSpecifier `protobuf:"bytes,1,rep,name=region" json:"region,omitempty"`
	Override *bool              `protobuf:"varint,2,opt,name=override,def=0" json:"override,omitempty"`
}

// Default values for UnassignsRequest fields.
const (
	Default_UnassignsRequest_Override = bool(false)
)

func (x *UnassignsRequest) Reset() {
	*x = UnassignsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnassignsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnassignsRequest) ProtoMessage() {}

func (x *UnassignsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnassignsRequest.ProtoReflect.Descriptor instead.
func (*UnassignsRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{138}
}

func (x *UnassignsRequest) GetRegion() []*RegionSpecifier {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *UnassignsRequest) GetOverride() bool {
	if x != nil && x.Override != nil {
		return *x.Override
	}
	return Default_UnassignsRequest_Override
}

//* Like Admin's UnassignRegionResponse except it can
// return one or more pids as result -- one per unassign.
type UnassignsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid []uint64 `protobuf:"varint,1,rep,name=pid" json:"pid,omitempty"`
}

func (x *UnassignsResponse) Reset() {
	*x = UnassignsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnassignsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnassignsResponse) ProtoMessage() {}

func (x *UnassignsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnassignsResponse.ProtoReflect.Descriptor instead.
func (*UnassignsResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{139}
}

func (x *UnassignsResponse) GetPid() []uint64 {
	if x != nil {
		return x.Pid
	}
	return nil
}

type BypassProcedureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcId    []uint64 `protobuf:"varint,1,rep,name=proc_id,json=procId" json:"proc_id,omitempty"`
	WaitTime  *uint64  `protobuf:"varint,2,opt,name=waitTime" json:"waitTime,omitempty"`       // wait time in ms to acquire lock on a procedure
	Override  *bool    `protobuf:"varint,3,opt,name=override,def=0" json:"override,omitempty"` // if true, procedure is marked for bypass even if its executing
	Recursive *bool    `protobuf:"varint,4,opt,name=recursive" json:"recursive,omitempty"`
}

// Default values for BypassProcedureRequest fields.
const (
	Default_BypassProcedureRequest_Override = bool(false)
)

func (x *BypassProcedureRequest) Reset() {
	*x = BypassProcedureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypassProcedureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypassProcedureRequest) ProtoMessage() {}

func (x *BypassProcedureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypassProcedureRequest.ProtoReflect.Descriptor instead.
func (*BypassProcedureRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{140}
}

func (x *BypassProcedureRequest) GetProcId() []uint64 {
	if x != nil {
		return x.ProcId
	}
	return nil
}

func (x *BypassProcedureRequest) GetWaitTime() uint64 {
	if x != nil && x.WaitTime != nil {
		return *x.WaitTime
	}
	return 0
}

func (x *BypassProcedureRequest) GetOverride() bool {
	if x != nil && x.Override != nil {
		return *x.Override
	}
	return Default_BypassProcedureRequest_Override
}

func (x *BypassProcedureRequest) GetRecursive() bool {
	if x != nil && x.Recursive != nil {
		return *x.Recursive
	}
	return false
}

type BypassProcedureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bypassed []bool `protobuf:"varint,1,rep,name=bypassed" json:"bypassed,omitempty"`
}

func (x *BypassProcedureResponse) Reset() {
	*x = BypassProcedureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypassProcedureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypassProcedureResponse) ProtoMessage() {}

func (x *BypassProcedureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypassProcedureResponse.ProtoReflect.Descriptor instead.
func (*BypassProcedureResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{141}
}

func (x *BypassProcedureResponse) GetBypassed() []bool {
	if x != nil {
		return x.Bypassed
	}
	return nil
}

type ScheduleServerCrashProcedureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerName []*ServerName `protobuf:"bytes,1,rep,name=serverName" json:"serverName,omitempty"`
}

func (x *ScheduleServerCrashProcedureRequest) Reset() {
	*x = ScheduleServerCrashProcedureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleServerCrashProcedureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleServerCrashProcedureRequest) ProtoMessage() {}

func (x *ScheduleServerCrashProcedureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleServerCrashProcedureRequest.ProtoReflect.Descriptor instead.
func (*ScheduleServerCrashProcedureRequest) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{142}
}

func (x *ScheduleServerCrashProcedureRequest) GetServerName() []*ServerName {
	if x != nil {
		return x.ServerName
	}
	return nil
}

type ScheduleServerCrashProcedureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid []uint64 `protobuf:"varint,1,rep,name=pid" json:"pid,omitempty"`
}

func (x *ScheduleServerCrashProcedureResponse) Reset() {
	*x = ScheduleServerCrashProcedureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Master_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleServerCrashProcedureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleServerCrashProcedureResponse) ProtoMessage() {}

func (x *ScheduleServerCrashProcedureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Master_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleServerCrashProcedureResponse.ProtoReflect.Descriptor instead.
func (*ScheduleServerCrashProcedureResponse) Descriptor() ([]byte, []int) {
	return file_Master_proto_rawDescGZIP(), []int{143}
}

func (x *ScheduleServerCrashProcedureResponse) GetPid() []uint64 {
	if x != nil {
		return x.Pid
	}
	return nil
}

var File_Master_proto protoreflect.FileDescriptor

var file_Master_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x1a, 0x0b, 0x48, 0x42, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x4c,
	0x6f, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0b, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xca, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x45, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0a,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x22, 0x2c, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x63, 0x49,
	0x64, 0x22, 0xa7, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x2f, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x64, 0x22, 0xcd, 0x01, 0x0a,
	0x13, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x2f, 0x0a, 0x14,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x64, 0x22, 0x86, 0x01,
	0x0a, 0x11, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xad, 0x01, 0x0a,
	0x18, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x08,
	0x66, 0x6f, 0x72, 0x63, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x63, 0x69, 0x62, 0x6c, 0x65, 0x12,
	0x22, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x34, 0x0a, 0x19,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x63,
	0x49, 0x64, 0x22, 0x6b, 0x0a, 0x13, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x08,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22,
	0x16, 0x0a, 0x14, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x0a, 0x15, 0x55, 0x6e, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x22, 0x18, 0x0a, 0x16, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x0a, 0x14, 0x4f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x17, 0x0a, 0x15, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaa,
	0x01, 0x0a, 0x17, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x6f, 0x77, 0x12, 0x22,
	0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x33, 0x0a, 0x18, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x64,
	0x22, 0xaa, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x22, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x2e, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x64, 0x22, 0x85, 0x01,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x0a, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x2e, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70,
	0x72, 0x6f, 0x63, 0x49, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x73,
	0x12, 0x22, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x30, 0x0a,
	0x15, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x64, 0x22,
	0x85, 0x01, 0x0a, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x3a,
	0x01, 0x30, 0x52, 0x0a, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x17,
	0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x2e, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x22, 0x2f, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x63, 0x49,
	0x64, 0x22, 0xbf, 0x01, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0c,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x22, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0a,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x22, 0x2e, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x72, 0x6f,
	0x63, 0x49, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f,
	0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x13, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12,
	0x22, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x32, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x64,
	0x22, 0x7b, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x32, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x63, 0x49,
	0x64, 0x22, 0xa6, 0x01, 0x0a, 0x16, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x13,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a,
	0x0b, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x32, 0x0a, 0x17, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x64, 0x22, 0x45,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x71, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x52, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x22, 0x21, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x73, 0x0a, 0x20, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x13, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x22, 0x4e, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x62, 0x0a, 0x27, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x22, 0x48, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x56,
	0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x0a,
	0x11, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x49, 0x73, 0x49, 0x6e,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x1b, 0x49, 0x73, 0x49, 0x6e, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x11, 0x69, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x22, 0x26, 0x0a, 0x0e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x34, 0x0a, 0x0f, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x61,
	0x6e, 0x22, 0x4d, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73,
	0x22, 0x4a, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x72, 0x65, 0x76,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1a, 0x0a, 0x18,
	0x49, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x19, 0x49, 0x73, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0x9a, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4f, 0x72, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x12, 0x3d, 0x0a,
	0x0c, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x3f, 0x0a, 0x1e,
	0x53, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4f, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x65, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5b, 0x0a,
	0x1c, 0x49, 0x73, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4f, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a,
	0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0x39, 0x0a, 0x1d, 0x49, 0x73,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x4f, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3a, 0x0a, 0x11, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x72, 0x52, 0x61, 0x6e, 0x22, 0x2d, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x02, 0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x72, 0x65, 0x76, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x49, 0x73, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x37, 0x0a, 0x1b, 0x49, 0x73, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0x17, 0x0a, 0x15, 0x52, 0x75, 0x6e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x63, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x39, 0x0a, 0x16, 0x52, 0x75, 0x6e, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x35, 0x0a, 0x1b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x4a, 0x61, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x3d, 0x0a, 0x1c, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4a, 0x61, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x65, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x49, 0x73, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4a, 0x61, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x37, 0x0a, 0x1f, 0x49,
	0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4a, 0x61, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x75, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x6e,
	0x65, 0x72, 0x43, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x45,
	0x0a, 0x17, 0x52, 0x75, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x65,
	0x61, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x6f,
	0x72, 0x65, 0x52, 0x61, 0x6e, 0x22, 0x2f, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x65, 0x61,
	0x6e, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x02, 0x6f, 0x6e, 0x22, 0x3f, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x49, 0x73, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x1d, 0x49, 0x73, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4c,
	0x0a, 0x0f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x3d, 0x0a, 0x10,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5c, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x18, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x22, 0x0a,
	0x0b, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x43, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x43,
	0x4c, 0x22, 0x32, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06, 0x70,
	0x72, 0x6f, 0x63, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x15, 0x49, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39,
	0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x6e, 0x0a, 0x16, 0x49, 0x73, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x39,
	0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x59, 0x0a, 0x1c, 0x49, 0x73, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x22, 0x3a, 0x0a, 0x1d, 0x49, 0x73, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65,
	0x22, 0x51, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x41, 0x6c, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x76, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x41, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x79, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x79, 0x65, 0x74, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x12, 0x33, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x73, 0x79, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x57, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x22, 0x7f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65,
	0x67, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78,
	0x12, 0x33, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x79, 0x73, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0x4d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0b,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0x4a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4e,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x45,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x18, 0x0a, 0x16, 0x49, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x45, 0x0a, 0x17, 0x49,
	0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x0f, 0x69, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x22, 0x54, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x22, 0x63, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x56, 0x0a,
	0x16, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x22, 0x70, 0x0a, 0x17, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x19, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x34, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x64, 0x22, 0xb2, 0x02,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x31, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44,
	0x10, 0x02, 0x22, 0x6c, 0x0a, 0x15, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06, 0x70, 0x72,
	0x6f, 0x63, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x15, 0x6d, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x49, 0x66, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x15, 0x6d, 0x61, 0x79, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x49, 0x66, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x22, 0x4a, 0x0a, 0x16, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x22, 0x16, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x4a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x40, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xff, 0x02, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73,
	0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x12, 0x35, 0x0a,
	0x08, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x68, 0x72, 0x6f, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x74, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x0a, 0x1f, 0x4d,
	0x61, 0x6a, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x28, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x6f,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x22, 0x55, 0x0a, 0x20, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x1d, 0x0a, 0x1b, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xfa, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x31,
	0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22,
	0x82, 0x01, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x19,
	0x0a, 0x15, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x45, 0x4c, 0x4c, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x10, 0x04, 0x22, 0x28, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x60,
	0x0a, 0x27, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x73, 0x0a, 0x20, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x66,
	0x66, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x23, 0x0a, 0x21, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x1f, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x22, 0x0a, 0x20, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x0a, 0x17,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x51,
	0x0a, 0x18, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x4c, 0x0a, 0x18, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x70, 0x63, 0x54, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x14, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x12, 0x72, 0x70, 0x63,
	0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0x5e, 0x0a, 0x19, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x70, 0x63, 0x54, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x1d,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x68, 0x72,
	0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x1a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x70, 0x63,
	0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0x1d, 0x0a, 0x1b, 0x49, 0x73, 0x52, 0x70, 0x63, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x50,
	0x0a, 0x1c, 0x49, 0x73, 0x52, 0x70, 0x63, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x12, 0x72, 0x70,
	0x63, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0x65, 0x0a, 0x20, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64,
	0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x5f, 0x74,
	0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x1a, 0x65, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x77, 0x0a, 0x21, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x26,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x5f,
	0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x22, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x54, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0x87, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x66, 0x0a, 0x0e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x22, 0x23, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22, 0x68, 0x0a, 0x10, 0x55, 0x6e, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x22, 0x25, 0x0a, 0x11, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x16, 0x42, 0x79, 0x70,
	0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x22, 0x35, 0x0a, 0x17, 0x42, 0x79, 0x70,
	0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x08, 0x52, 0x08, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64,
	0x22, 0x5b, 0x0a, 0x23, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x72, 0x61, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a,
	0x24, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x72, 0x61, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x03, 0x70, 0x69, 0x64, 0x2a, 0x28, 0x0a, 0x10, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x53,
	0x50, 0x4c, 0x49, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x10,
	0x01, 0x32, 0x8a, 0x3c, 0x0a, 0x0d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x41, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x41, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x24, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x1e, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x59, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x49,
	0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x20,
	0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x1a, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1d, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1d, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x4d, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5c, 0x0a, 0x11, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x0c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a,
	0x0e, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0b, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c,
	0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x53,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x19, 0x49, 0x73, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x49, 0x73, 0x49, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x49, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3e, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5f, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x49, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x49, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6b, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4f, 0x72, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x27, 0x2e, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4f, 0x72,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4f, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a,
	0x15, 0x49, 0x73, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4f, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x49, 0x73, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4f, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x4f, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a,
	0x14, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x13, 0x49, 0x73, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x1f, 0x2e, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a,
	0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4a, 0x61,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4a, 0x61,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4a, 0x61, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x17, 0x49, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x4a, 0x61, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x28, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x4a, 0x61, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4a, 0x61,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x52, 0x75, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x6e,
	0x65, 0x72, 0x43, 0x68, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x65, 0x72, 0x43,
	0x68, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x16,
	0x53, 0x65, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x72, 0x65, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x72,
	0x65, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6c,
	0x65, 0x61, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x15, 0x49, 0x73, 0x43,
	0x6c, 0x65, 0x61, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x26, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x73,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x65, 0x72, 0x43,
	0x68, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12,
	0x26, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x53, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x1f, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x49, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x49, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x20, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x12, 0x1e, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a,
	0x0f, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x6e, 0x65,
	0x12, 0x20, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x73,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a,
	0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x20, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x29, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01,
	0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x30, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x2a, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x08, 0x53, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x19, 0x2e, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x78, 0x0a, 0x1f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x6a, 0x6f,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x6a, 0x6f, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x28,
	0x67, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46,
	0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x6f, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23,
	0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x17, 0x67, 0x65, 0x74,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a,
	0x12, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68,
	0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x15, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x65,
	0x72, 0x12, 0x26, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6b, 0x0a, 0x16, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x71, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x7a, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x2c, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x30, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74,
	0x0a, 0x19, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x18, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x29, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x7a, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x59, 0x0a, 0x10, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x44, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x52, 0x70, 0x63, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x12,
	0x22, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x52, 0x70, 0x63, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x70, 0x63, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x14, 0x49, 0x73, 0x52, 0x70,
	0x63, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x25, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x52, 0x70,
	0x63, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x49, 0x73, 0x52, 0x70, 0x63, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x74, 0x0a, 0x19, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x54,
	0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x2a, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64,
	0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x16,
	0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x06, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0x17, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x23, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a,
	0x12, 0x48, 0x61, 0x73, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x48,
	0x61, 0x73, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x48, 0x61, 0x73, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xc8,
	0x03, 0x0a, 0x0b, 0x48, 0x62, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5c,
	0x0a, 0x13, 0x53, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x24, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x18, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x09,
	0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x1a, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x20, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x1c, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x72, 0x61, 0x73,
	0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x2e, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x72, 0x61, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x72, 0x61, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x50, 0x0a, 0x31, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x68, 0x61, 0x64, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0c,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x48, 0x01, 0x5a, 0x05,
	0x2e, 0x2e, 0x2f, 0x70, 0x62, 0x88, 0x01, 0x01, 0xa0, 0x01, 0x01,
}

var (
	file_Master_proto_rawDescOnce sync.Once
	file_Master_proto_rawDescData = file_Master_proto_rawDesc
)

func file_Master_proto_rawDescGZIP() []byte {
	file_Master_proto_rawDescOnce.Do(func() {
		file_Master_proto_rawDescData = protoimpl.X.CompressGZIP(file_Master_proto_rawDescData)
	})
	return file_Master_proto_rawDescData
}

var file_Master_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_Master_proto_msgTypes = make([]protoimpl.MessageInfo, 144)
var file_Master_proto_goTypes = []interface{}{
	(MasterSwitchType)(0),                            // 0: hbase.pb.MasterSwitchType
	(GetProcedureResultResponse_State)(0),            // 1: hbase.pb.GetProcedureResultResponse.State
	(SecurityCapabilitiesResponse_Capability)(0),     // 2: hbase.pb.SecurityCapabilitiesResponse.Capability
	(*AddColumnRequest)(nil),                         // 3: hbase.pb.AddColumnRequest
	(*AddColumnResponse)(nil),                        // 4: hbase.pb.AddColumnResponse
	(*DeleteColumnRequest)(nil),                      // 5: hbase.pb.DeleteColumnRequest
	(*DeleteColumnResponse)(nil),                     // 6: hbase.pb.DeleteColumnResponse
	(*ModifyColumnRequest)(nil),                      // 7: hbase.pb.ModifyColumnRequest
	(*ModifyColumnResponse)(nil),                     // 8: hbase.pb.ModifyColumnResponse
	(*MoveRegionRequest)(nil),                        // 9: hbase.pb.MoveRegionRequest
	(*MoveRegionResponse)(nil),                       // 10: hbase.pb.MoveRegionResponse
	(*MergeTableRegionsRequest)(nil),                 // 11: hbase.pb.MergeTableRegionsRequest
	(*MergeTableRegionsResponse)(nil),                // 12: hbase.pb.MergeTableRegionsResponse
	(*AssignRegionRequest)(nil),                      // 13: hbase.pb.AssignRegionRequest
	(*AssignRegionResponse)(nil),                     // 14: hbase.pb.AssignRegionResponse
	(*UnassignRegionRequest)(nil),                    // 15: hbase.pb.UnassignRegionRequest
	(*UnassignRegionResponse)(nil),                   // 16: hbase.pb.UnassignRegionResponse
	(*OfflineRegionRequest)(nil),                     // 17: hbase.pb.OfflineRegionRequest
	(*OfflineRegionResponse)(nil),                    // 18: hbase.pb.OfflineRegionResponse
	(*SplitTableRegionRequest)(nil),                  // 19: hbase.pb.SplitTableRegionRequest
	(*SplitTableRegionResponse)(nil),                 // 20: hbase.pb.SplitTableRegionResponse
	(*CreateTableRequest)(nil),                       // 21: hbase.pb.CreateTableRequest
	(*CreateTableResponse)(nil),                      // 22: hbase.pb.CreateTableResponse
	(*DeleteTableRequest)(nil),                       // 23: hbase.pb.DeleteTableRequest
	(*DeleteTableResponse)(nil),                      // 24: hbase.pb.DeleteTableResponse
	(*TruncateTableRequest)(nil),                     // 25: hbase.pb.TruncateTableRequest
	(*TruncateTableResponse)(nil),                    // 26: hbase.pb.TruncateTableResponse
	(*EnableTableRequest)(nil),                       // 27: hbase.pb.EnableTableRequest
	(*EnableTableResponse)(nil),                      // 28: hbase.pb.EnableTableResponse
	(*DisableTableRequest)(nil),                      // 29: hbase.pb.DisableTableRequest
	(*DisableTableResponse)(nil),                     // 30: hbase.pb.DisableTableResponse
	(*ModifyTableRequest)(nil),                       // 31: hbase.pb.ModifyTableRequest
	(*ModifyTableResponse)(nil),                      // 32: hbase.pb.ModifyTableResponse
	(*CreateNamespaceRequest)(nil),                   // 33: hbase.pb.CreateNamespaceRequest
	(*CreateNamespaceResponse)(nil),                  // 34: hbase.pb.CreateNamespaceResponse
	(*DeleteNamespaceRequest)(nil),                   // 35: hbase.pb.DeleteNamespaceRequest
	(*DeleteNamespaceResponse)(nil),                  // 36: hbase.pb.DeleteNamespaceResponse
	(*ModifyNamespaceRequest)(nil),                   // 37: hbase.pb.ModifyNamespaceRequest
	(*ModifyNamespaceResponse)(nil),                  // 38: hbase.pb.ModifyNamespaceResponse
	(*GetNamespaceDescriptorRequest)(nil),            // 39: hbase.pb.GetNamespaceDescriptorRequest
	(*GetNamespaceDescriptorResponse)(nil),           // 40: hbase.pb.GetNamespaceDescriptorResponse
	(*ListNamespaceDescriptorsRequest)(nil),          // 41: hbase.pb.ListNamespaceDescriptorsRequest
	(*ListNamespaceDescriptorsResponse)(nil),         // 42: hbase.pb.ListNamespaceDescriptorsResponse
	(*ListTableDescriptorsByNamespaceRequest)(nil),   // 43: hbase.pb.ListTableDescriptorsByNamespaceRequest
	(*ListTableDescriptorsByNamespaceResponse)(nil),  // 44: hbase.pb.ListTableDescriptorsByNamespaceResponse
	(*ListTableNamesByNamespaceRequest)(nil),         // 45: hbase.pb.ListTableNamesByNamespaceRequest
	(*ListTableNamesByNamespaceResponse)(nil),        // 46: hbase.pb.ListTableNamesByNamespaceResponse
	(*ShutdownRequest)(nil),                          // 47: hbase.pb.ShutdownRequest
	(*ShutdownResponse)(nil),                         // 48: hbase.pb.ShutdownResponse
	(*StopMasterRequest)(nil),                        // 49: hbase.pb.StopMasterRequest
	(*StopMasterResponse)(nil),                       // 50: hbase.pb.StopMasterResponse
	(*IsInMaintenanceModeRequest)(nil),               // 51: hbase.pb.IsInMaintenanceModeRequest
	(*IsInMaintenanceModeResponse)(nil),              // 52: hbase.pb.IsInMaintenanceModeResponse
	(*BalanceRequest)(nil),                           // 53: hbase.pb.BalanceRequest
	(*BalanceResponse)(nil),                          // 54: hbase.pb.BalanceResponse
	(*SetBalancerRunningRequest)(nil),                // 55: hbase.pb.SetBalancerRunningRequest
	(*SetBalancerRunningResponse)(nil),               // 56: hbase.pb.SetBalancerRunningResponse
	(*IsBalancerEnabledRequest)(nil),                 // 57: hbase.pb.IsBalancerEnabledRequest
	(*IsBalancerEnabledResponse)(nil),                // 58: hbase.pb.IsBalancerEnabledResponse
	(*SetSplitOrMergeEnabledRequest)(nil),            // 59: hbase.pb.SetSplitOrMergeEnabledRequest
	(*SetSplitOrMergeEnabledResponse)(nil),           // 60: hbase.pb.SetSplitOrMergeEnabledResponse
	(*IsSplitOrMergeEnabledRequest)(nil),             // 61: hbase.pb.IsSplitOrMergeEnabledRequest
	(*IsSplitOrMergeEnabledResponse)(nil),            // 62: hbase.pb.IsSplitOrMergeEnabledResponse
	(*NormalizeRequest)(nil),                         // 63: hbase.pb.NormalizeRequest
	(*NormalizeResponse)(nil),                        // 64: hbase.pb.NormalizeResponse
	(*SetNormalizerRunningRequest)(nil),              // 65: hbase.pb.SetNormalizerRunningRequest
	(*SetNormalizerRunningResponse)(nil),             // 66: hbase.pb.SetNormalizerRunningResponse
	(*IsNormalizerEnabledRequest)(nil),               // 67: hbase.pb.IsNormalizerEnabledRequest
	(*IsNormalizerEnabledResponse)(nil),              // 68: hbase.pb.IsNormalizerEnabledResponse
	(*RunCatalogScanRequest)(nil),                    // 69: hbase.pb.RunCatalogScanRequest
	(*RunCatalogScanResponse)(nil),                   // 70: hbase.pb.RunCatalogScanResponse
	(*EnableCatalogJanitorRequest)(nil),              // 71: hbase.pb.EnableCatalogJanitorRequest
	(*EnableCatalogJanitorResponse)(nil),             // 72: hbase.pb.EnableCatalogJanitorResponse
	(*IsCatalogJanitorEnabledRequest)(nil),           // 73: hbase.pb.IsCatalogJanitorEnabledRequest
	(*IsCatalogJanitorEnabledResponse)(nil),          // 74: hbase.pb.IsCatalogJanitorEnabledResponse
	(*RunCleanerChoreRequest)(nil),                   // 75: hbase.pb.RunCleanerChoreRequest
	(*RunCleanerChoreResponse)(nil),                  // 76: hbase.pb.RunCleanerChoreResponse
	(*SetCleanerChoreRunningRequest)(nil),            // 77: hbase.pb.SetCleanerChoreRunningRequest
	(*SetCleanerChoreRunningResponse)(nil),           // 78: hbase.pb.SetCleanerChoreRunningResponse
	(*IsCleanerChoreEnabledRequest)(nil),             // 79: hbase.pb.IsCleanerChoreEnabledRequest
	(*IsCleanerChoreEnabledResponse)(nil),            // 80: hbase.pb.IsCleanerChoreEnabledResponse
	(*SnapshotRequest)(nil),                          // 81: hbase.pb.SnapshotRequest
	(*SnapshotResponse)(nil),                         // 82: hbase.pb.SnapshotResponse
	(*GetCompletedSnapshotsRequest)(nil),             // 83: hbase.pb.GetCompletedSnapshotsRequest
	(*GetCompletedSnapshotsResponse)(nil),            // 84: hbase.pb.GetCompletedSnapshotsResponse
	(*DeleteSnapshotRequest)(nil),                    // 85: hbase.pb.DeleteSnapshotRequest
	(*DeleteSnapshotResponse)(nil),                   // 86: hbase.pb.DeleteSnapshotResponse
	(*RestoreSnapshotRequest)(nil),                   // 87: hbase.pb.RestoreSnapshotRequest
	(*RestoreSnapshotResponse)(nil),                  // 88: hbase.pb.RestoreSnapshotResponse
	(*IsSnapshotDoneRequest)(nil),                    // 89: hbase.pb.IsSnapshotDoneRequest
	(*IsSnapshotDoneResponse)(nil),                   // 90: hbase.pb.IsSnapshotDoneResponse
	(*IsRestoreSnapshotDoneRequest)(nil),             // 91: hbase.pb.IsRestoreSnapshotDoneRequest
	(*IsRestoreSnapshotDoneResponse)(nil),            // 92: hbase.pb.IsRestoreSnapshotDoneResponse
	(*GetSchemaAlterStatusRequest)(nil),              // 93: hbase.pb.GetSchemaAlterStatusRequest
	(*GetSchemaAlterStatusResponse)(nil),             // 94: hbase.pb.GetSchemaAlterStatusResponse
	(*GetTableDescriptorsRequest)(nil),               // 95: hbase.pb.GetTableDescriptorsRequest
	(*GetTableDescriptorsResponse)(nil),              // 96: hbase.pb.GetTableDescriptorsResponse
	(*GetTableNamesRequest)(nil),                     // 97: hbase.pb.GetTableNamesRequest
	(*GetTableNamesResponse)(nil),                    // 98: hbase.pb.GetTableNamesResponse
	(*GetTableStateRequest)(nil),                     // 99: hbase.pb.GetTableStateRequest
	(*GetTableStateResponse)(nil),                    // 100: hbase.pb.GetTableStateResponse
	(*GetClusterStatusRequest)(nil),                  // 101: hbase.pb.GetClusterStatusRequest
	(*GetClusterStatusResponse)(nil),                 // 102: hbase.pb.GetClusterStatusResponse
	(*IsMasterRunningRequest)(nil),                   // 103: hbase.pb.IsMasterRunningRequest
	(*IsMasterRunningResponse)(nil),                  // 104: hbase.pb.IsMasterRunningResponse
	(*ExecProcedureRequest)(nil),                     // 105: hbase.pb.ExecProcedureRequest
	(*ExecProcedureResponse)(nil),                    // 106: hbase.pb.ExecProcedureResponse
	(*IsProcedureDoneRequest)(nil),                   // 107: hbase.pb.IsProcedureDoneRequest
	(*IsProcedureDoneResponse)(nil),                  // 108: hbase.pb.IsProcedureDoneResponse
	(*GetProcedureResultRequest)(nil),                // 109: hbase.pb.GetProcedureResultRequest
	(*GetProcedureResultResponse)(nil),               // 110: hbase.pb.GetProcedureResultResponse
	(*AbortProcedureRequest)(nil),                    // 111: hbase.pb.AbortProcedureRequest
	(*AbortProcedureResponse)(nil),                   // 112: hbase.pb.AbortProcedureResponse
	(*GetProceduresRequest)(nil),                     // 113: hbase.pb.GetProceduresRequest
	(*GetProceduresResponse)(nil),                    // 114: hbase.pb.GetProceduresResponse
	(*GetLocksRequest)(nil),                          // 115: hbase.pb.GetLocksRequest
	(*GetLocksResponse)(nil),                         // 116: hbase.pb.GetLocksResponse
	(*SetQuotaRequest)(nil),                          // 117: hbase.pb.SetQuotaRequest
	(*SetQuotaResponse)(nil),                         // 118: hbase.pb.SetQuotaResponse
	(*MajorCompactionTimestampRequest)(nil),          // 119: hbase.pb.MajorCompactionTimestampRequest
	(*MajorCompactionTimestampForRegionRequest)(nil), // 120: hbase.pb.MajorCompactionTimestampForRegionRequest
	(*MajorCompactionTimestampResponse)(nil),         // 121: hbase.pb.MajorCompactionTimestampResponse
	(*SecurityCapabilitiesRequest)(nil),              // 122: hbase.pb.SecurityCapabilitiesRequest
	(*SecurityCapabilitiesResponse)(nil),             // 123: hbase.pb.SecurityCapabilitiesResponse
	(*ListDecommissionedRegionServersRequest)(nil),   // 124: hbase.pb.ListDecommissionedRegionServersRequest
	(*ListDecommissionedRegionServersResponse)(nil),  // 125: hbase.pb.ListDecommissionedRegionServersResponse
	(*DecommissionRegionServersRequest)(nil),         // 126: hbase.pb.DecommissionRegionServersRequest
	(*DecommissionRegionServersResponse)(nil),        // 127: hbase.pb.DecommissionRegionServersResponse
	(*RecommissionRegionServerRequest)(nil),          // 128: hbase.pb.RecommissionRegionServerRequest
	(*RecommissionRegionServerResponse)(nil),         // 129: hbase.pb.RecommissionRegionServerResponse
	(*ClearDeadServersRequest)(nil),                  // 130: hbase.pb.ClearDeadServersRequest
	(*ClearDeadServersResponse)(nil),                 // 131: hbase.pb.ClearDeadServersResponse
	(*SwitchRpcThrottleRequest)(nil),                 // 132: hbase.pb.SwitchRpcThrottleRequest
	(*SwitchRpcThrottleResponse)(nil),                // 133: hbase.pb.SwitchRpcThrottleResponse
	(*IsRpcThrottleEnabledRequest)(nil),              // 134: hbase.pb.IsRpcThrottleEnabledRequest
	(*IsRpcThrottleEnabledResponse)(nil),             // 135: hbase.pb.IsRpcThrottleEnabledResponse
	(*SwitchExceedThrottleQuotaRequest)(nil),         // 136: hbase.pb.SwitchExceedThrottleQuotaRequest
	(*SwitchExceedThrottleQuotaResponse)(nil),        // 137: hbase.pb.SwitchExceedThrottleQuotaResponse
	(*SetTableStateInMetaRequest)(nil),               // 138: hbase.pb.SetTableStateInMetaRequest
	(*AssignsRequest)(nil),                           // 139: hbase.pb.AssignsRequest
	(*AssignsResponse)(nil),                          // 140: hbase.pb.AssignsResponse
	(*UnassignsRequest)(nil),                         // 141: hbase.pb.UnassignsRequest
	(*UnassignsResponse)(nil),                        // 142: hbase.pb.UnassignsResponse
	(*BypassProcedureRequest)(nil),                   // 143: hbase.pb.BypassProcedureRequest
	(*BypassProcedureResponse)(nil),                  // 144: hbase.pb.BypassProcedureResponse
	(*ScheduleServerCrashProcedureRequest)(nil),      // 145: hbase.pb.ScheduleServerCrashProcedureRequest
	(*ScheduleServerCrashProcedureResponse)(nil),     // 146: hbase.pb.ScheduleServerCrashProcedureResponse
	(*TableName)(nil),                                // 147: hbase.pb.TableName
	(*ColumnFamilySchema)(nil),                       // 148: hbase.pb.ColumnFamilySchema
	(*RegionSpecifier)(nil),                          // 149: hbase.pb.RegionSpecifier
	(*ServerName)(nil),                               // 150: hbase.pb.ServerName
	(*RegionInfo)(nil),                               // 151: hbase.pb.RegionInfo
	(*TableSchema)(nil),                              // 152: hbase.pb.TableSchema
	(*NamespaceDescriptor)(nil),                      // 153: hbase.pb.NamespaceDescriptor
	(*SnapshotDescription)(nil),                      // 154: hbase.pb.SnapshotDescription
	(*TableState)(nil),                               // 155: hbase.pb.TableState
	(Option)(0),                                      // 156: hbase.pb.Option
	(*ClusterStatus)(nil),                            // 157: hbase.pb.ClusterStatus
	(*ProcedureDescription)(nil),                     // 158: hbase.pb.ProcedureDescription
	(*ForeignExceptionMessage)(nil),                  // 159: hbase.pb.ForeignExceptionMessage
	(*Procedure)(nil),                                // 160: hbase.pb.Procedure
	(*LockedResource)(nil),                           // 161: hbase.pb.LockedResource
	(*ThrottleRequest)(nil),                          // 162: hbase.pb.ThrottleRequest
	(*SpaceLimitRequest)(nil),                        // 163: hbase.pb.SpaceLimitRequest
	(*CoprocessorServiceRequest)(nil),                // 164: hbase.pb.CoprocessorServiceRequest
	(*AddReplicationPeerRequest)(nil),                // 165: hbase.pb.AddReplicationPeerRequest
	(*RemoveReplicationPeerRequest)(nil),             // 166: hbase.pb.RemoveReplicationPeerRequest
	(*EnableReplicationPeerRequest)(nil),             // 167: hbase.pb.EnableReplicationPeerRequest
	(*DisableReplicationPeerRequest)(nil),            // 168: hbase.pb.DisableReplicationPeerRequest
	(*GetReplicationPeerConfigRequest)(nil),          // 169: hbase.pb.GetReplicationPeerConfigRequest
	(*UpdateReplicationPeerConfigRequest)(nil),       // 170: hbase.pb.UpdateReplicationPeerConfigRequest
	(*ListReplicationPeersRequest)(nil),              // 171: hbase.pb.ListReplicationPeersRequest
	(*GetSpaceQuotaRegionSizesRequest)(nil),          // 172: hbase.pb.GetSpaceQuotaRegionSizesRequest
	(*GetQuotaStatesRequest)(nil),                    // 173: hbase.pb.GetQuotaStatesRequest
	(*GrantRequest)(nil),                             // 174: hbase.pb.GrantRequest
	(*RevokeRequest)(nil),                            // 175: hbase.pb.RevokeRequest
	(*GetUserPermissionsRequest)(nil),                // 176: hbase.pb.GetUserPermissionsRequest
	(*HasUserPermissionsRequest)(nil),                // 177: hbase.pb.HasUserPermissionsRequest
	(*CoprocessorServiceResponse)(nil),               // 178: hbase.pb.CoprocessorServiceResponse
	(*AddReplicationPeerResponse)(nil),               // 179: hbase.pb.AddReplicationPeerResponse
	(*RemoveReplicationPeerResponse)(nil),            // 180: hbase.pb.RemoveReplicationPeerResponse
	(*EnableReplicationPeerResponse)(nil),            // 181: hbase.pb.EnableReplicationPeerResponse
	(*DisableReplicationPeerResponse)(nil),           // 182: hbase.pb.DisableReplicationPeerResponse
	(*GetReplicationPeerConfigResponse)(nil),         // 183: hbase.pb.GetReplicationPeerConfigResponse
	(*UpdateReplicationPeerConfigResponse)(nil),      // 184: hbase.pb.UpdateReplicationPeerConfigResponse
	(*ListReplicationPeersResponse)(nil),             // 185: hbase.pb.ListReplicationPeersResponse
	(*GetSpaceQuotaRegionSizesResponse)(nil),         // 186: hbase.pb.GetSpaceQuotaRegionSizesResponse
	(*GetQuotaStatesResponse)(nil),                   // 187: hbase.pb.GetQuotaStatesResponse
	(*GrantResponse)(nil),                            // 188: hbase.pb.GrantResponse
	(*RevokeResponse)(nil),                           // 189: hbase.pb.RevokeResponse
	(*GetUserPermissionsResponse)(nil),               // 190: hbase.pb.GetUserPermissionsResponse
	(*HasUserPermissionsResponse)(nil),               // 191: hbase.pb.HasUserPermissionsResponse
}
var file_Master_proto_depIdxs = []int32{
	147, // 0: hbase.pb.AddColumnRequest.table_name:type_name -> hbase.pb.TableName
	148, // 1: hbase.pb.AddColumnRequest.column_families:type_name -> hbase.pb.ColumnFamilySchema
	147, // 2: hbase.pb.DeleteColumnRequest.table_name:type_name -> hbase.pb.TableName
	147, // 3: hbase.pb.ModifyColumnRequest.table_name:type_name -> hbase.pb.TableName
	148, // 4: hbase.pb.ModifyColumnRequest.column_families:type_name -> hbase.pb.ColumnFamilySchema
	149, // 5: hbase.pb.MoveRegionRequest.region:type_name -> hbase.pb.RegionSpecifier
	150, // 6: hbase.pb.MoveRegionRequest.dest_server_name:type_name -> hbase.pb.ServerName
	149, // 7: hbase.pb.MergeTableRegionsRequest.region:type_name -> hbase.pb.RegionSpecifier
	149, // 8: hbase.pb.AssignRegionRequest.region:type_name -> hbase.pb.RegionSpecifier
	149, // 9: hbase.pb.UnassignRegionRequest.region:type_name -> hbase.pb.RegionSpecifier
	149, // 10: hbase.pb.OfflineRegionRequest.region:type_name -> hbase.pb.RegionSpecifier
	151, // 11: hbase.pb.SplitTableRegionRequest.region_info:type_name -> hbase.pb.RegionInfo
	152, // 12: hbase.pb.CreateTableRequest.table_schema:type_name -> hbase.pb.TableSchema
	147, // 13: hbase.pb.DeleteTableRequest.table_name:type_name -> hbase.pb.TableName
	147, // 14: hbase.pb.TruncateTableRequest.tableName:type_name -> hbase.pb.TableName
	147, // 15: hbase.pb.EnableTableRequest.table_name:type_name -> hbase.pb.TableName
	147, // 16: hbase.pb.DisableTableRequest.table_name:type_name -> hbase.pb.TableName
	147, // 17: hbase.pb.ModifyTableRequest.table_name:type_name -> hbase.pb.TableName
	152, // 18: hbase.pb.ModifyTableRequest.table_schema:type_name -> hbase.pb.TableSchema
	153, // 19: hbase.pb.CreateNamespaceRequest.namespaceDescriptor:type_name -> hbase.pb.NamespaceDescriptor
	153, // 20: hbase.pb.ModifyNamespaceRequest.namespaceDescriptor:type_name -> hbase.pb.NamespaceDescriptor
	153, // 21: hbase.pb.GetNamespaceDescriptorResponse.namespaceDescriptor:type_name -> hbase.pb.NamespaceDescriptor
	153, // 22: hbase.pb.ListNamespaceDescriptorsResponse.namespaceDescriptor:type_name -> hbase.pb.NamespaceDescriptor
	152, // 23: hbase.pb.ListTableDescriptorsByNamespaceResponse.tableSchema:type_name -> hbase.pb.TableSchema
	147, // 24: hbase.pb.ListTableNamesByNamespaceResponse.tableName:type_name -> hbase.pb.TableName
	0,   // 25: hbase.pb.SetSplitOrMergeEnabledRequest.switch_types:type_name -> hbase.pb.MasterSwitchType
	0,   // 26: hbase.pb.IsSplitOrMergeEnabledRequest.switch_type:type_name -> hbase.pb.MasterSwitchType
	154, // 27: hbase.pb.SnapshotRequest.snapshot:type_name -> hbase.pb.SnapshotDescription
	154, // 28: hbase.pb.GetCompletedSnapshotsResponse.snapshots:type_name -> hbase.pb.SnapshotDescription
	154, // 29: hbase.pb.DeleteSnapshotRequest.snapshot:type_name -> hbase.pb.SnapshotDescription
	154, // 30: hbase.pb.RestoreSnapshotRequest.snapshot:type_name -> hbase.pb.SnapshotDescription
	154, // 31: hbase.pb.IsSnapshotDoneRequest.snapshot:type_name -> hbase.pb.SnapshotDescription
	154, // 32: hbase.pb.IsSnapshotDoneResponse.snapshot:type_name -> hbase.pb.SnapshotDescription
	154, // 33: hbase.pb.IsRestoreSnapshotDoneRequest.snapshot:type_name -> hbase.pb.SnapshotDescription
	147, // 34: hbase.pb.GetSchemaAlterStatusRequest.table_name:type_name -> hbase.pb.TableName
	147, // 35: hbase.pb.GetTableDescriptorsRequest.table_names:type_name -> hbase.pb.TableName
	152, // 36: hbase.pb.GetTableDescriptorsResponse.table_schema:type_name -> hbase.pb.TableSchema
	147, // 37: hbase.pb.GetTableNamesResponse.table_names:type_name -> hbase.pb.TableName
	147, // 38: hbase.pb.GetTableStateRequest.table_name:type_name -> hbase.pb.TableName
	155, // 39: hbase.pb.GetTableStateResponse.table_state:type_name -> hbase.pb.TableState
	156, // 40: hbase.pb.GetClusterStatusRequest.options:type_name -> hbase.pb.Option
	157, // 41: hbase.pb.GetClusterStatusResponse.cluster_status:type_name -> hbase.pb.ClusterStatus
	158, // 42: hbase.pb.ExecProcedureRequest.procedure:type_name -> hbase.pb.ProcedureDescription
	158, // 43: hbase.pb.IsProcedureDoneRequest.procedure:type_name -> hbase.pb.ProcedureDescription
	158, // 44: hbase.pb.IsProcedureDoneResponse.snapshot:type_name -> hbase.pb.ProcedureDescription
	1,   // 45: hbase.pb.GetProcedureResultResponse.state:type_name -> hbase.pb.GetProcedureResultResponse.State
	159, // 46: hbase.pb.GetProcedureResultResponse.exception:type_name -> hbase.pb.ForeignExceptionMessage
	160, // 47: hbase.pb.GetProceduresResponse.procedure:type_name -> hbase.pb.Procedure
	161, // 48: hbase.pb.GetLocksResponse.lock:type_name -> hbase.pb.LockedResource
	147, // 49: hbase.pb.SetQuotaRequest.table_name:type_name -> hbase.pb.TableName
	162, // 50: hbase.pb.SetQuotaRequest.throttle:type_name -> hbase.pb.ThrottleRequest
	163, // 51: hbase.pb.SetQuotaRequest.space_limit:type_name -> hbase.pb.SpaceLimitRequest
	147, // 52: hbase.pb.MajorCompactionTimestampRequest.table_name:type_name -> hbase.pb.TableName
	149, // 53: hbase.pb.MajorCompactionTimestampForRegionRequest.region:type_name -> hbase.pb.RegionSpecifier
	2,   // 54: hbase.pb.SecurityCapabilitiesResponse.capabilities:type_name -> hbase.pb.SecurityCapabilitiesResponse.Capability
	150, // 55: hbase.pb.ListDecommissionedRegionServersResponse.server_name:type_name -> hbase.pb.ServerName
	150, // 56: hbase.pb.DecommissionRegionServersRequest.server_name:type_name -> hbase.pb.ServerName
	150, // 57: hbase.pb.RecommissionRegionServerRequest.server_name:type_name -> hbase.pb.ServerName
	149, // 58: hbase.pb.RecommissionRegionServerRequest.region:type_name -> hbase.pb.RegionSpecifier
	150, // 59: hbase.pb.ClearDeadServersRequest.server_name:type_name -> hbase.pb.ServerName
	150, // 60: hbase.pb.ClearDeadServersResponse.server_name:type_name -> hbase.pb.ServerName
	147, // 61: hbase.pb.SetTableStateInMetaRequest.table_name:type_name -> hbase.pb.TableName
	155, // 62: hbase.pb.SetTableStateInMetaRequest.table_state:type_name -> hbase.pb.TableState
	149, // 63: hbase.pb.AssignsRequest.region:type_name -> hbase.pb.RegionSpecifier
	149, // 64: hbase.pb.UnassignsRequest.region:type_name -> hbase.pb.RegionSpecifier
	150, // 65: hbase.pb.ScheduleServerCrashProcedureRequest.serverName:type_name -> hbase.pb.ServerName
	93,  // 66: hbase.pb.MasterService.GetSchemaAlterStatus:input_type -> hbase.pb.GetSchemaAlterStatusRequest
	95,  // 67: hbase.pb.MasterService.GetTableDescriptors:input_type -> hbase.pb.GetTableDescriptorsRequest
	97,  // 68: hbase.pb.MasterService.GetTableNames:input_type -> hbase.pb.GetTableNamesRequest
	101, // 69: hbase.pb.MasterService.GetClusterStatus:input_type -> hbase.pb.GetClusterStatusRequest
	103, // 70: hbase.pb.MasterService.IsMasterRunning:input_type -> hbase.pb.IsMasterRunningRequest
	3,   // 71: hbase.pb.MasterService.AddColumn:input_type -> hbase.pb.AddColumnRequest
	5,   // 72: hbase.pb.MasterService.DeleteColumn:input_type -> hbase.pb.DeleteColumnRequest
	7,   // 73: hbase.pb.MasterService.ModifyColumn:input_type -> hbase.pb.ModifyColumnRequest
	9,   // 74: hbase.pb.MasterService.MoveRegion:input_type -> hbase.pb.MoveRegionRequest
	11,  // 75: hbase.pb.MasterService.MergeTableRegions:input_type -> hbase.pb.MergeTableRegionsRequest
	13,  // 76: hbase.pb.MasterService.AssignRegion:input_type -> hbase.pb.AssignRegionRequest
	15,  // 77: hbase.pb.MasterService.UnassignRegion:input_type -> hbase.pb.UnassignRegionRequest
	17,  // 78: hbase.pb.MasterService.OfflineRegion:input_type -> hbase.pb.OfflineRegionRequest
	19,  // 79: hbase.pb.MasterService.SplitRegion:input_type -> hbase.pb.SplitTableRegionRequest
	23,  // 80: hbase.pb.MasterService.DeleteTable:input_type -> hbase.pb.DeleteTableRequest
	25,  // 81: hbase.pb.MasterService.truncateTable:input_type -> hbase.pb.TruncateTableRequest
	27,  // 82: hbase.pb.MasterService.EnableTable:input_type -> hbase.pb.EnableTableRequest
	29,  // 83: hbase.pb.MasterService.DisableTable:input_type -> hbase.pb.DisableTableRequest
	31,  // 84: hbase.pb.MasterService.ModifyTable:input_type -> hbase.pb.ModifyTableRequest
	21,  // 85: hbase.pb.MasterService.CreateTable:input_type -> hbase.pb.CreateTableRequest
	47,  // 86: hbase.pb.MasterService.Shutdown:input_type -> hbase.pb.ShutdownRequest
	49,  // 87: hbase.pb.MasterService.StopMaster:input_type -> hbase.pb.StopMasterRequest
	51,  // 88: hbase.pb.MasterService.IsMasterInMaintenanceMode:input_type -> hbase.pb.IsInMaintenanceModeRequest
	53,  // 89: hbase.pb.MasterService.Balance:input_type -> hbase.pb.BalanceRequest
	55,  // 90: hbase.pb.MasterService.SetBalancerRunning:input_type -> hbase.pb.SetBalancerRunningRequest
	57,  // 91: hbase.pb.MasterService.IsBalancerEnabled:input_type -> hbase.pb.IsBalancerEnabledRequest
	59,  // 92: hbase.pb.MasterService.SetSplitOrMergeEnabled:input_type -> hbase.pb.SetSplitOrMergeEnabledRequest
	61,  // 93: hbase.pb.MasterService.IsSplitOrMergeEnabled:input_type -> hbase.pb.IsSplitOrMergeEnabledRequest
	63,  // 94: hbase.pb.MasterService.Normalize:input_type -> hbase.pb.NormalizeRequest
	65,  // 95: hbase.pb.MasterService.SetNormalizerRunning:input_type -> hbase.pb.SetNormalizerRunningRequest
	67,  // 96: hbase.pb.MasterService.IsNormalizerEnabled:input_type -> hbase.pb.IsNormalizerEnabledRequest
	69,  // 97: hbase.pb.MasterService.RunCatalogScan:input_type -> hbase.pb.RunCatalogScanRequest
	71,  // 98: hbase.pb.MasterService.EnableCatalogJanitor:input_type -> hbase.pb.EnableCatalogJanitorRequest
	73,  // 99: hbase.pb.MasterService.IsCatalogJanitorEnabled:input_type -> hbase.pb.IsCatalogJanitorEnabledRequest
	75,  // 100: hbase.pb.MasterService.RunCleanerChore:input_type -> hbase.pb.RunCleanerChoreRequest
	77,  // 101: hbase.pb.MasterService.SetCleanerChoreRunning:input_type -> hbase.pb.SetCleanerChoreRunningRequest
	79,  // 102: hbase.pb.MasterService.IsCleanerChoreEnabled:input_type -> hbase.pb.IsCleanerChoreEnabledRequest
	164, // 103: hbase.pb.MasterService.ExecMasterService:input_type -> hbase.pb.CoprocessorServiceRequest
	81,  // 104: hbase.pb.MasterService.Snapshot:input_type -> hbase.pb.SnapshotRequest
	83,  // 105: hbase.pb.MasterService.GetCompletedSnapshots:input_type -> hbase.pb.GetCompletedSnapshotsRequest
	85,  // 106: hbase.pb.MasterService.DeleteSnapshot:input_type -> hbase.pb.DeleteSnapshotRequest
	89,  // 107: hbase.pb.MasterService.IsSnapshotDone:input_type -> hbase.pb.IsSnapshotDoneRequest
	87,  // 108: hbase.pb.MasterService.RestoreSnapshot:input_type -> hbase.pb.RestoreSnapshotRequest
	105, // 109: hbase.pb.MasterService.ExecProcedure:input_type -> hbase.pb.ExecProcedureRequest
	105, // 110: hbase.pb.MasterService.ExecProcedureWithRet:input_type -> hbase.pb.ExecProcedureRequest
	107, // 111: hbase.pb.MasterService.IsProcedureDone:input_type -> hbase.pb.IsProcedureDoneRequest
	37,  // 112: hbase.pb.MasterService.ModifyNamespace:input_type -> hbase.pb.ModifyNamespaceRequest
	33,  // 113: hbase.pb.MasterService.CreateNamespace:input_type -> hbase.pb.CreateNamespaceRequest
	35,  // 114: hbase.pb.MasterService.DeleteNamespace:input_type -> hbase.pb.DeleteNamespaceRequest
	39,  // 115: hbase.pb.MasterService.GetNamespaceDescriptor:input_type -> hbase.pb.GetNamespaceDescriptorRequest
	41,  // 116: hbase.pb.MasterService.ListNamespaceDescriptors:input_type -> hbase.pb.ListNamespaceDescriptorsRequest
	43,  // 117: hbase.pb.MasterService.ListTableDescriptorsByNamespace:input_type -> hbase.pb.ListTableDescriptorsByNamespaceRequest
	45,  // 118: hbase.pb.MasterService.ListTableNamesByNamespace:input_type -> hbase.pb.ListTableNamesByNamespaceRequest
	99,  // 119: hbase.pb.MasterService.GetTableState:input_type -> hbase.pb.GetTableStateRequest
	117, // 120: hbase.pb.MasterService.SetQuota:input_type -> hbase.pb.SetQuotaRequest
	119, // 121: hbase.pb.MasterService.getLastMajorCompactionTimestamp:input_type -> hbase.pb.MajorCompactionTimestampRequest
	120, // 122: hbase.pb.MasterService.getLastMajorCompactionTimestampForRegion:input_type -> hbase.pb.MajorCompactionTimestampForRegionRequest
	109, // 123: hbase.pb.MasterService.getProcedureResult:input_type -> hbase.pb.GetProcedureResultRequest
	122, // 124: hbase.pb.MasterService.getSecurityCapabilities:input_type -> hbase.pb.SecurityCapabilitiesRequest
	111, // 125: hbase.pb.MasterService.AbortProcedure:input_type -> hbase.pb.AbortProcedureRequest
	113, // 126: hbase.pb.MasterService.GetProcedures:input_type -> hbase.pb.GetProceduresRequest
	115, // 127: hbase.pb.MasterService.GetLocks:input_type -> hbase.pb.GetLocksRequest
	165, // 128: hbase.pb.MasterService.AddReplicationPeer:input_type -> hbase.pb.AddReplicationPeerRequest
	166, // 129: hbase.pb.MasterService.RemoveReplicationPeer:input_type -> hbase.pb.RemoveReplicationPeerRequest
	167, // 130: hbase.pb.MasterService.EnableReplicationPeer:input_type -> hbase.pb.EnableReplicationPeerRequest
	168, // 131: hbase.pb.MasterService.DisableReplicationPeer:input_type -> hbase.pb.DisableReplicationPeerRequest
	169, // 132: hbase.pb.MasterService.GetReplicationPeerConfig:input_type -> hbase.pb.GetReplicationPeerConfigRequest
	170, // 133: hbase.pb.MasterService.UpdateReplicationPeerConfig:input_type -> hbase.pb.UpdateReplicationPeerConfigRequest
	171, // 134: hbase.pb.MasterService.ListReplicationPeers:input_type -> hbase.pb.ListReplicationPeersRequest
	124, // 135: hbase.pb.MasterService.ListDecommissionedRegionServers:input_type -> hbase.pb.ListDecommissionedRegionServersRequest
	126, // 136: hbase.pb.MasterService.DecommissionRegionServers:input_type -> hbase.pb.DecommissionRegionServersRequest
	128, // 137: hbase.pb.MasterService.RecommissionRegionServer:input_type -> hbase.pb.RecommissionRegionServerRequest
	172, // 138: hbase.pb.MasterService.GetSpaceQuotaRegionSizes:input_type -> hbase.pb.GetSpaceQuotaRegionSizesRequest
	173, // 139: hbase.pb.MasterService.GetQuotaStates:input_type -> hbase.pb.GetQuotaStatesRequest
	130, // 140: hbase.pb.MasterService.ClearDeadServers:input_type -> hbase.pb.ClearDeadServersRequest
	132, // 141: hbase.pb.MasterService.SwitchRpcThrottle:input_type -> hbase.pb.SwitchRpcThrottleRequest
	134, // 142: hbase.pb.MasterService.IsRpcThrottleEnabled:input_type -> hbase.pb.IsRpcThrottleEnabledRequest
	136, // 143: hbase.pb.MasterService.SwitchExceedThrottleQuota:input_type -> hbase.pb.SwitchExceedThrottleQuotaRequest
	174, // 144: hbase.pb.MasterService.Grant:input_type -> hbase.pb.GrantRequest
	175, // 145: hbase.pb.MasterService.Revoke:input_type -> hbase.pb.RevokeRequest
	176, // 146: hbase.pb.MasterService.GetUserPermissions:input_type -> hbase.pb.GetUserPermissionsRequest
	177, // 147: hbase.pb.MasterService.HasUserPermissions:input_type -> hbase.pb.HasUserPermissionsRequest
	138, // 148: hbase.pb.HbckService.SetTableStateInMeta:input_type -> hbase.pb.SetTableStateInMetaRequest
	139, // 149: hbase.pb.HbckService.Assigns:input_type -> hbase.pb.AssignsRequest
	141, // 150: hbase.pb.HbckService.Unassigns:input_type -> hbase.pb.UnassignsRequest
	143, // 151: hbase.pb.HbckService.BypassProcedure:input_type -> hbase.pb.BypassProcedureRequest
	145, // 152: hbase.pb.HbckService.ScheduleServerCrashProcedure:input_type -> hbase.pb.ScheduleServerCrashProcedureRequest
	94,  // 153: hbase.pb.MasterService.GetSchemaAlterStatus:output_type -> hbase.pb.GetSchemaAlterStatusResponse
	96,  // 154: hbase.pb.MasterService.GetTableDescriptors:output_type -> hbase.pb.GetTableDescriptorsResponse
	98,  // 155: hbase.pb.MasterService.GetTableNames:output_type -> hbase.pb.GetTableNamesResponse
	102, // 156: hbase.pb.MasterService.GetClusterStatus:output_type -> hbase.pb.GetClusterStatusResponse
	104, // 157: hbase.pb.MasterService.IsMasterRunning:output_type -> hbase.pb.IsMasterRunningResponse
	4,   // 158: hbase.pb.MasterService.AddColumn:output_type -> hbase.pb.AddColumnResponse
	6,   // 159: hbase.pb.MasterService.DeleteColumn:output_type -> hbase.pb.DeleteColumnResponse
	8,   // 160: hbase.pb.MasterService.ModifyColumn:output_type -> hbase.pb.ModifyColumnResponse
	10,  // 161: hbase.pb.MasterService.MoveRegion:output_type -> hbase.pb.MoveRegionResponse
	12,  // 162: hbase.pb.MasterService.MergeTableRegions:output_type -> hbase.pb.MergeTableRegionsResponse
	14,  // 163: hbase.pb.MasterService.AssignRegion:output_type -> hbase.pb.AssignRegionResponse
	16,  // 164: hbase.pb.MasterService.UnassignRegion:output_type -> hbase.pb.UnassignRegionResponse
	18,  // 165: hbase.pb.MasterService.OfflineRegion:output_type -> hbase.pb.OfflineRegionResponse
	20,  // 166: hbase.pb.MasterService.SplitRegion:output_type -> hbase.pb.SplitTableRegionResponse
	24,  // 167: hbase.pb.MasterService.DeleteTable:output_type -> hbase.pb.DeleteTableResponse
	26,  // 168: hbase.pb.MasterService.truncateTable:output_type -> hbase.pb.TruncateTableResponse
	28,  // 169: hbase.pb.MasterService.EnableTable:output_type -> hbase.pb.EnableTableResponse
	30,  // 170: hbase.pb.MasterService.DisableTable:output_type -> hbase.pb.DisableTableResponse
	32,  // 171: hbase.pb.MasterService.ModifyTable:output_type -> hbase.pb.ModifyTableResponse
	22,  // 172: hbase.pb.MasterService.CreateTable:output_type -> hbase.pb.CreateTableResponse
	48,  // 173: hbase.pb.MasterService.Shutdown:output_type -> hbase.pb.ShutdownResponse
	50,  // 174: hbase.pb.MasterService.StopMaster:output_type -> hbase.pb.StopMasterResponse
	52,  // 175: hbase.pb.MasterService.IsMasterInMaintenanceMode:output_type -> hbase.pb.IsInMaintenanceModeResponse
	54,  // 176: hbase.pb.MasterService.Balance:output_type -> hbase.pb.BalanceResponse
	56,  // 177: hbase.pb.MasterService.SetBalancerRunning:output_type -> hbase.pb.SetBalancerRunningResponse
	58,  // 178: hbase.pb.MasterService.IsBalancerEnabled:output_type -> hbase.pb.IsBalancerEnabledResponse
	60,  // 179: hbase.pb.MasterService.SetSplitOrMergeEnabled:output_type -> hbase.pb.SetSplitOrMergeEnabledResponse
	62,  // 180: hbase.pb.MasterService.IsSplitOrMergeEnabled:output_type -> hbase.pb.IsSplitOrMergeEnabledResponse
	64,  // 181: hbase.pb.MasterService.Normalize:output_type -> hbase.pb.NormalizeResponse
	66,  // 182: hbase.pb.MasterService.SetNormalizerRunning:output_type -> hbase.pb.SetNormalizerRunningResponse
	68,  // 183: hbase.pb.MasterService.IsNormalizerEnabled:output_type -> hbase.pb.IsNormalizerEnabledResponse
	70,  // 184: hbase.pb.MasterService.RunCatalogScan:output_type -> hbase.pb.RunCatalogScanResponse
	72,  // 185: hbase.pb.MasterService.EnableCatalogJanitor:output_type -> hbase.pb.EnableCatalogJanitorResponse
	74,  // 186: hbase.pb.MasterService.IsCatalogJanitorEnabled:output_type -> hbase.pb.IsCatalogJanitorEnabledResponse
	76,  // 187: hbase.pb.MasterService.RunCleanerChore:output_type -> hbase.pb.RunCleanerChoreResponse
	78,  // 188: hbase.pb.MasterService.SetCleanerChoreRunning:output_type -> hbase.pb.SetCleanerChoreRunningResponse
	80,  // 189: hbase.pb.MasterService.IsCleanerChoreEnabled:output_type -> hbase.pb.IsCleanerChoreEnabledResponse
	178, // 190: hbase.pb.MasterService.ExecMasterService:output_type -> hbase.pb.CoprocessorServiceResponse
	82,  // 191: hbase.pb.MasterService.Snapshot:output_type -> hbase.pb.SnapshotResponse
	84,  // 192: hbase.pb.MasterService.GetCompletedSnapshots:output_type -> hbase.pb.GetCompletedSnapshotsResponse
	86,  // 193: hbase.pb.MasterService.DeleteSnapshot:output_type -> hbase.pb.DeleteSnapshotResponse
	90,  // 194: hbase.pb.MasterService.IsSnapshotDone:output_type -> hbase.pb.IsSnapshotDoneResponse
	88,  // 195: hbase.pb.MasterService.RestoreSnapshot:output_type -> hbase.pb.RestoreSnapshotResponse
	106, // 196: hbase.pb.MasterService.ExecProcedure:output_type -> hbase.pb.ExecProcedureResponse
	106, // 197: hbase.pb.MasterService.ExecProcedureWithRet:output_type -> hbase.pb.ExecProcedureResponse
	108, // 198: hbase.pb.MasterService.IsProcedureDone:output_type -> hbase.pb.IsProcedureDoneResponse
	38,  // 199: hbase.pb.MasterService.ModifyNamespace:output_type -> hbase.pb.ModifyNamespaceResponse
	34,  // 200: hbase.pb.MasterService.CreateNamespace:output_type -> hbase.pb.CreateNamespaceResponse
	36,  // 201: hbase.pb.MasterService.DeleteNamespace:output_type -> hbase.pb.DeleteNamespaceResponse
	40,  // 202: hbase.pb.MasterService.GetNamespaceDescriptor:output_type -> hbase.pb.GetNamespaceDescriptorResponse
	42,  // 203: hbase.pb.MasterService.ListNamespaceDescriptors:output_type -> hbase.pb.ListNamespaceDescriptorsResponse
	44,  // 204: hbase.pb.MasterService.ListTableDescriptorsByNamespace:output_type -> hbase.pb.ListTableDescriptorsByNamespaceResponse
	46,  // 205: hbase.pb.MasterService.ListTableNamesByNamespace:output_type -> hbase.pb.ListTableNamesByNamespaceResponse
	100, // 206: hbase.pb.MasterService.GetTableState:output_type -> hbase.pb.GetTableStateResponse
	118, // 207: hbase.pb.MasterService.SetQuota:output_type -> hbase.pb.SetQuotaResponse
	121, // 208: hbase.pb.MasterService.getLastMajorCompactionTimestamp:output_type -> hbase.pb.MajorCompactionTimestampResponse
	121, // 209: hbase.pb.MasterService.getLastMajorCompactionTimestampForRegion:output_type -> hbase.pb.MajorCompactionTimestampResponse
	110, // 210: hbase.pb.MasterService.getProcedureResult:output_type -> hbase.pb.GetProcedureResultResponse
	123, // 211: hbase.pb.MasterService.getSecurityCapabilities:output_type -> hbase.pb.SecurityCapabilitiesResponse
	112, // 212: hbase.pb.MasterService.AbortProcedure:output_type -> hbase.pb.AbortProcedureResponse
	114, // 213: hbase.pb.MasterService.GetProcedures:output_type -> hbase.pb.GetProceduresResponse
	116, // 214: hbase.pb.MasterService.GetLocks:output_type -> hbase.pb.GetLocksResponse
	179, // 215: hbase.pb.MasterService.AddReplicationPeer:output_type -> hbase.pb.AddReplicationPeerResponse
	180, // 216: hbase.pb.MasterService.RemoveReplicationPeer:output_type -> hbase.pb.RemoveReplicationPeerResponse
	181, // 217: hbase.pb.MasterService.EnableReplicationPeer:output_type -> hbase.pb.EnableReplicationPeerResponse
	182, // 218: hbase.pb.MasterService.DisableReplicationPeer:output_type -> hbase.pb.DisableReplicationPeerResponse
	183, // 219: hbase.pb.MasterService.GetReplicationPeerConfig:output_type -> hbase.pb.GetReplicationPeerConfigResponse
	184, // 220: hbase.pb.MasterService.UpdateReplicationPeerConfig:output_type -> hbase.pb.UpdateReplicationPeerConfigResponse
	185, // 221: hbase.pb.MasterService.ListReplicationPeers:output_type -> hbase.pb.ListReplicationPeersResponse
	125, // 222: hbase.pb.MasterService.ListDecommissionedRegionServers:output_type -> hbase.pb.ListDecommissionedRegionServersResponse
	127, // 223: hbase.pb.MasterService.DecommissionRegionServers:output_type -> hbase.pb.DecommissionRegionServersResponse
	129, // 224: hbase.pb.MasterService.RecommissionRegionServer:output_type -> hbase.pb.RecommissionRegionServerResponse
	186, // 225: hbase.pb.MasterService.GetSpaceQuotaRegionSizes:output_type -> hbase.pb.GetSpaceQuotaRegionSizesResponse
	187, // 226: hbase.pb.MasterService.GetQuotaStates:output_type -> hbase.pb.GetQuotaStatesResponse
	131, // 227: hbase.pb.MasterService.ClearDeadServers:output_type -> hbase.pb.ClearDeadServersResponse
	133, // 228: hbase.pb.MasterService.SwitchRpcThrottle:output_type -> hbase.pb.SwitchRpcThrottleResponse
	135, // 229: hbase.pb.MasterService.IsRpcThrottleEnabled:output_type -> hbase.pb.IsRpcThrottleEnabledResponse
	137, // 230: hbase.pb.MasterService.SwitchExceedThrottleQuota:output_type -> hbase.pb.SwitchExceedThrottleQuotaResponse
	188, // 231: hbase.pb.MasterService.Grant:output_type -> hbase.pb.GrantResponse
	189, // 232: hbase.pb.MasterService.Revoke:output_type -> hbase.pb.RevokeResponse
	190, // 233: hbase.pb.MasterService.GetUserPermissions:output_type -> hbase.pb.GetUserPermissionsResponse
	191, // 234: hbase.pb.MasterService.HasUserPermissions:output_type -> hbase.pb.HasUserPermissionsResponse
	100, // 235: hbase.pb.HbckService.SetTableStateInMeta:output_type -> hbase.pb.GetTableStateResponse
	140, // 236: hbase.pb.HbckService.Assigns:output_type -> hbase.pb.AssignsResponse
	142, // 237: hbase.pb.HbckService.Unassigns:output_type -> hbase.pb.UnassignsResponse
	144, // 238: hbase.pb.HbckService.BypassProcedure:output_type -> hbase.pb.BypassProcedureResponse
	146, // 239: hbase.pb.HbckService.ScheduleServerCrashProcedure:output_type -> hbase.pb.ScheduleServerCrashProcedureResponse
	153, // [153:240] is the sub-list for method output_type
	66,  // [66:153] is the sub-list for method input_type
	66,  // [66:66] is the sub-list for extension type_name
	66,  // [66:66] is the sub-list for extension extendee
	0,   // [0:66] is the sub-list for field type_name
}

func init() { file_Master_proto_init() }
func file_Master_proto_init() {
	if File_Master_proto != nil {
		return
	}
	file_HBase_proto_init()
	file_Client_proto_init()
	file_ClusterStatus_proto_init()
	file_ErrorHandling_proto_init()
	file_LockService_proto_init()
	file_Procedure_proto_init()
	file_Quota_proto_init()
	file_Replication_proto_init()
	file_Snapshot_proto_init()
	file_AccessControl_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_Master_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddColumnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddColumnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteColumnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteColumnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyColumnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyColumnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveRegionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveRegionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeTableRegionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeTableRegionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignRegionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignRegionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnassignRegionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnassignRegionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineRegionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineRegionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitTableRegionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitTableRegionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TruncateTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TruncateTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNamespaceDescriptorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNamespaceDescriptorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamespaceDescriptorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamespaceDescriptorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTableDescriptorsByNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTableDescriptorsByNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTableNamesByNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTableNamesByNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutdownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutdownResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopMasterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopMasterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsInMaintenanceModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsInMaintenanceModeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBalancerRunningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBalancerRunningResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsBalancerEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsBalancerEnabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSplitOrMergeEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSplitOrMergeEnabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsSplitOrMergeEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsSplitOrMergeEnabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NormalizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NormalizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNormalizerRunningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNormalizerRunningResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsNormalizerEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsNormalizerEnabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCatalogScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCatalogScanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableCatalogJanitorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableCatalogJanitorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCatalogJanitorEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCatalogJanitorEnabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCleanerChoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCleanerChoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCleanerChoreRunningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCleanerChoreRunningResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCleanerChoreEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCleanerChoreEnabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompletedSnapshotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompletedSnapshotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsSnapshotDoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsSnapshotDoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsRestoreSnapshotDoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsRestoreSnapshotDoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchemaAlterStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchemaAlterStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableDescriptorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableDescriptorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableNamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsMasterRunningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsMasterRunningResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecProcedureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecProcedureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsProcedureDoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsProcedureDoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProcedureResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProcedureResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortProcedureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortProcedureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProceduresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProceduresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetQuotaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetQuotaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MajorCompactionTimestampRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MajorCompactionTimestampForRegionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MajorCompactionTimestampResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityCapabilitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityCapabilitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDecommissionedRegionServersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDecommissionedRegionServersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionRegionServersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecommissionRegionServersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommissionRegionServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommissionRegionServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearDeadServersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearDeadServersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchRpcThrottleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchRpcThrottleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsRpcThrottleEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsRpcThrottleEnabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchExceedThrottleQuotaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchExceedThrottleQuotaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTableStateInMetaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnassignsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnassignsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypassProcedureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypassProcedureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleServerCrashProcedureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Master_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleServerCrashProcedureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Master_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   144,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_Master_proto_goTypes,
		DependencyIndexes: file_Master_proto_depIdxs,
		EnumInfos:         file_Master_proto_enumTypes,
		MessageInfos:      file_Master_proto_msgTypes,
	}.Build()
	File_Master_proto = out.File
	file_Master_proto_rawDesc = nil
	file_Master_proto_goTypes = nil
	file_Master_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MasterServiceClient is the client API for MasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MasterServiceClient interface {
	//* Used by the client to get the number of regions that have received the updated schema
	GetSchemaAlterStatus(ctx context.Context, in *GetSchemaAlterStatusRequest, opts ...grpc.CallOption) (*GetSchemaAlterStatusResponse, error)
	//* Get list of TableDescriptors for requested tables.
	GetTableDescriptors(ctx context.Context, in *GetTableDescriptorsRequest, opts ...grpc.CallOption) (*GetTableDescriptorsResponse, error)
	//* Get the list of table names.
	GetTableNames(ctx context.Context, in *GetTableNamesRequest, opts ...grpc.CallOption) (*GetTableNamesResponse, error)
	//* Return cluster status.
	GetClusterStatus(ctx context.Context, in *GetClusterStatusRequest, opts ...grpc.CallOption) (*GetClusterStatusResponse, error)
	//* return true if master is available
	IsMasterRunning(ctx context.Context, in *IsMasterRunningRequest, opts ...grpc.CallOption) (*IsMasterRunningResponse, error)
	//* Adds a column to the specified table.
	AddColumn(ctx context.Context, in *AddColumnRequest, opts ...grpc.CallOption) (*AddColumnResponse, error)
	//* Deletes a column from the specified table. Table must be disabled.
	DeleteColumn(ctx context.Context, in *DeleteColumnRequest, opts ...grpc.CallOption) (*DeleteColumnResponse, error)
	//* Modifies an existing column on the specified table.
	ModifyColumn(ctx context.Context, in *ModifyColumnRequest, opts ...grpc.CallOption) (*ModifyColumnResponse, error)
	//* Move the region region to the destination server.
	MoveRegion(ctx context.Context, in *MoveRegionRequest, opts ...grpc.CallOption) (*MoveRegionResponse, error)
	//* Master merge the regions
	MergeTableRegions(ctx context.Context, in *MergeTableRegionsRequest, opts ...grpc.CallOption) (*MergeTableRegionsResponse, error)
	//* Assign a region to a server chosen at random.
	AssignRegion(ctx context.Context, in *AssignRegionRequest, opts ...grpc.CallOption) (*AssignRegionResponse, error)
	//*
	// Unassign a region from current hosting regionserver.  Region will then be
	// assigned to a regionserver chosen at random.  Region could be reassigned
	// back to the same server.  Use MoveRegion if you want
	// to control the region movement.
	UnassignRegion(ctx context.Context, in *UnassignRegionRequest, opts ...grpc.CallOption) (*UnassignRegionResponse, error)
	//*
	// Offline a region from the assignment manager's in-memory state.  The
	// region should be in a closed state and there will be no attempt to
	// automatically reassign the region as in unassign.   This is a special
	// method, and should only be used by experts or hbck.
	OfflineRegion(ctx context.Context, in *OfflineRegionRequest, opts ...grpc.CallOption) (*OfflineRegionResponse, error)
	//*
	// Split region
	SplitRegion(ctx context.Context, in *SplitTableRegionRequest, opts ...grpc.CallOption) (*SplitTableRegionResponse, error)
	//* Deletes a table
	DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*DeleteTableResponse, error)
	//* Truncate a table
	TruncateTable(ctx context.Context, in *TruncateTableRequest, opts ...grpc.CallOption) (*TruncateTableResponse, error)
	//* Puts the table on-line (only needed if table has been previously taken offline)
	EnableTable(ctx context.Context, in *EnableTableRequest, opts ...grpc.CallOption) (*EnableTableResponse, error)
	//* Take table offline
	DisableTable(ctx context.Context, in *DisableTableRequest, opts ...grpc.CallOption) (*DisableTableResponse, error)
	//* Modify a table's metadata
	ModifyTable(ctx context.Context, in *ModifyTableRequest, opts ...grpc.CallOption) (*ModifyTableResponse, error)
	//* Creates a new table asynchronously
	CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error)
	//* Shutdown an HBase cluster.
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
	//* Stop HBase Master only.  Does not shutdown the cluster.
	StopMaster(ctx context.Context, in *StopMasterRequest, opts ...grpc.CallOption) (*StopMasterResponse, error)
	//*
	// Query whether the Master is in maintenance mode.
	IsMasterInMaintenanceMode(ctx context.Context, in *IsInMaintenanceModeRequest, opts ...grpc.CallOption) (*IsInMaintenanceModeResponse, error)
	//*
	// Run the balancer.  Will run the balancer and if regions to move, it will
	// go ahead and do the reassignments.  Can NOT run for various reasons.
	// Check logs.
	Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	//*
	// Turn the load balancer on or off.
	// If synchronous is true, it waits until current balance() call, if outstanding, to return.
	SetBalancerRunning(ctx context.Context, in *SetBalancerRunningRequest, opts ...grpc.CallOption) (*SetBalancerRunningResponse, error)
	//*
	// Query whether the Region Balancer is running.
	IsBalancerEnabled(ctx context.Context, in *IsBalancerEnabledRequest, opts ...grpc.CallOption) (*IsBalancerEnabledResponse, error)
	//*
	// Turn the split or merge switch on or off.
	// If synchronous is true, it waits until current operation call, if outstanding, to return.
	SetSplitOrMergeEnabled(ctx context.Context, in *SetSplitOrMergeEnabledRequest, opts ...grpc.CallOption) (*SetSplitOrMergeEnabledResponse, error)
	//*
	// Query whether the split or merge switch is on/off.
	IsSplitOrMergeEnabled(ctx context.Context, in *IsSplitOrMergeEnabledRequest, opts ...grpc.CallOption) (*IsSplitOrMergeEnabledResponse, error)
	//*
	// Run region normalizer. Can NOT run for various reasons. Check logs.
	Normalize(ctx context.Context, in *NormalizeRequest, opts ...grpc.CallOption) (*NormalizeResponse, error)
	//*
	// Turn region normalizer on or off.
	SetNormalizerRunning(ctx context.Context, in *SetNormalizerRunningRequest, opts ...grpc.CallOption) (*SetNormalizerRunningResponse, error)
	//*
	// Query whether region normalizer is enabled.
	IsNormalizerEnabled(ctx context.Context, in *IsNormalizerEnabledRequest, opts ...grpc.CallOption) (*IsNormalizerEnabledResponse, error)
	//* Get a run of the catalog janitor
	RunCatalogScan(ctx context.Context, in *RunCatalogScanRequest, opts ...grpc.CallOption) (*RunCatalogScanResponse, error)
	//*
	// Enable the catalog janitor on or off.
	EnableCatalogJanitor(ctx context.Context, in *EnableCatalogJanitorRequest, opts ...grpc.CallOption) (*EnableCatalogJanitorResponse, error)
	//*
	// Query whether the catalog janitor is enabled.
	IsCatalogJanitorEnabled(ctx context.Context, in *IsCatalogJanitorEnabledRequest, opts ...grpc.CallOption) (*IsCatalogJanitorEnabledResponse, error)
	//* Get a run of the CleanerChore
	RunCleanerChore(ctx context.Context, in *RunCleanerChoreRequest, opts ...grpc.CallOption) (*RunCleanerChoreResponse, error)
	//*
	// Enable the CleanerChore on or off.
	SetCleanerChoreRunning(ctx context.Context, in *SetCleanerChoreRunningRequest, opts ...grpc.CallOption) (*SetCleanerChoreRunningResponse, error)
	//*
	// Query whether the CleanerChore is enabled.
	IsCleanerChoreEnabled(ctx context.Context, in *IsCleanerChoreEnabledRequest, opts ...grpc.CallOption) (*IsCleanerChoreEnabledResponse, error)
	//*
	// Call a master coprocessor endpoint
	ExecMasterService(ctx context.Context, in *CoprocessorServiceRequest, opts ...grpc.CallOption) (*CoprocessorServiceResponse, error)
	//*
	// Create a snapshot for the given table.
	Snapshot(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*SnapshotResponse, error)
	//*
	// Get completed snapshots.
	// Returns a list of snapshot descriptors for completed snapshots
	GetCompletedSnapshots(ctx context.Context, in *GetCompletedSnapshotsRequest, opts ...grpc.CallOption) (*GetCompletedSnapshotsResponse, error)
	//*
	// Delete an existing snapshot. This method can also be used to clean up an aborted snapshot.
	DeleteSnapshot(ctx context.Context, in *DeleteSnapshotRequest, opts ...grpc.CallOption) (*DeleteSnapshotResponse, error)
	//*
	// Determine if the snapshot is done yet.
	IsSnapshotDone(ctx context.Context, in *IsSnapshotDoneRequest, opts ...grpc.CallOption) (*IsSnapshotDoneResponse, error)
	//*
	// Restore a snapshot
	RestoreSnapshot(ctx context.Context, in *RestoreSnapshotRequest, opts ...grpc.CallOption) (*RestoreSnapshotResponse, error)
	//*
	// Execute a distributed procedure.
	ExecProcedure(ctx context.Context, in *ExecProcedureRequest, opts ...grpc.CallOption) (*ExecProcedureResponse, error)
	//*
	// Execute a distributed procedure with return data.
	ExecProcedureWithRet(ctx context.Context, in *ExecProcedureRequest, opts ...grpc.CallOption) (*ExecProcedureResponse, error)
	//*
	// Determine if the procedure is done yet.
	IsProcedureDone(ctx context.Context, in *IsProcedureDoneRequest, opts ...grpc.CallOption) (*IsProcedureDoneResponse, error)
	//* Modify a namespace's metadata
	ModifyNamespace(ctx context.Context, in *ModifyNamespaceRequest, opts ...grpc.CallOption) (*ModifyNamespaceResponse, error)
	//* Creates a new namespace synchronously
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error)
	//* Deletes namespace synchronously
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error)
	//* Get a namespace descriptor by name
	GetNamespaceDescriptor(ctx context.Context, in *GetNamespaceDescriptorRequest, opts ...grpc.CallOption) (*GetNamespaceDescriptorResponse, error)
	//* returns a list of namespaces
	ListNamespaceDescriptors(ctx context.Context, in *ListNamespaceDescriptorsRequest, opts ...grpc.CallOption) (*ListNamespaceDescriptorsResponse, error)
	//* returns a list of tables for a given namespace
	ListTableDescriptorsByNamespace(ctx context.Context, in *ListTableDescriptorsByNamespaceRequest, opts ...grpc.CallOption) (*ListTableDescriptorsByNamespaceResponse, error)
	//* returns a list of tables for a given namespace
	ListTableNamesByNamespace(ctx context.Context, in *ListTableNamesByNamespaceRequest, opts ...grpc.CallOption) (*ListTableNamesByNamespaceResponse, error)
	//* returns table state
	GetTableState(ctx context.Context, in *GetTableStateRequest, opts ...grpc.CallOption) (*GetTableStateResponse, error)
	//* Apply the new quota settings
	SetQuota(ctx context.Context, in *SetQuotaRequest, opts ...grpc.CallOption) (*SetQuotaResponse, error)
	//* Returns the timestamp of the last major compaction
	GetLastMajorCompactionTimestamp(ctx context.Context, in *MajorCompactionTimestampRequest, opts ...grpc.CallOption) (*MajorCompactionTimestampResponse, error)
	//* Returns the timestamp of the last major compaction
	GetLastMajorCompactionTimestampForRegion(ctx context.Context, in *MajorCompactionTimestampForRegionRequest, opts ...grpc.CallOption) (*MajorCompactionTimestampResponse, error)
	GetProcedureResult(ctx context.Context, in *GetProcedureResultRequest, opts ...grpc.CallOption) (*GetProcedureResultResponse, error)
	//* Returns the security capabilities in effect on the cluster
	GetSecurityCapabilities(ctx context.Context, in *SecurityCapabilitiesRequest, opts ...grpc.CallOption) (*SecurityCapabilitiesResponse, error)
	//* Abort a procedure
	AbortProcedure(ctx context.Context, in *AbortProcedureRequest, opts ...grpc.CallOption) (*AbortProcedureResponse, error)
	//* returns a list of procedures
	GetProcedures(ctx context.Context, in *GetProceduresRequest, opts ...grpc.CallOption) (*GetProceduresResponse, error)
	GetLocks(ctx context.Context, in *GetLocksRequest, opts ...grpc.CallOption) (*GetLocksResponse, error)
	//* Add a replication peer
	AddReplicationPeer(ctx context.Context, in *AddReplicationPeerRequest, opts ...grpc.CallOption) (*AddReplicationPeerResponse, error)
	//* Remove a replication peer
	RemoveReplicationPeer(ctx context.Context, in *RemoveReplicationPeerRequest, opts ...grpc.CallOption) (*RemoveReplicationPeerResponse, error)
	//* Enable a replication peer
	EnableReplicationPeer(ctx context.Context, in *EnableReplicationPeerRequest, opts ...grpc.CallOption) (*EnableReplicationPeerResponse, error)
	//* Disable a replication peer
	DisableReplicationPeer(ctx context.Context, in *DisableReplicationPeerRequest, opts ...grpc.CallOption) (*DisableReplicationPeerResponse, error)
	//* Return peer config for a replication peer
	GetReplicationPeerConfig(ctx context.Context, in *GetReplicationPeerConfigRequest, opts ...grpc.CallOption) (*GetReplicationPeerConfigResponse, error)
	//* Update peer config for a replication peer
	UpdateReplicationPeerConfig(ctx context.Context, in *UpdateReplicationPeerConfigRequest, opts ...grpc.CallOption) (*UpdateReplicationPeerConfigResponse, error)
	//* Returns a list of replication peers
	ListReplicationPeers(ctx context.Context, in *ListReplicationPeersRequest, opts ...grpc.CallOption) (*ListReplicationPeersResponse, error)
	//* Returns a list of ServerNames marked as decommissioned.
	ListDecommissionedRegionServers(ctx context.Context, in *ListDecommissionedRegionServersRequest, opts ...grpc.CallOption) (*ListDecommissionedRegionServersResponse, error)
	//* Decommission region servers.
	DecommissionRegionServers(ctx context.Context, in *DecommissionRegionServersRequest, opts ...grpc.CallOption) (*DecommissionRegionServersResponse, error)
	//* Re-commission region server.
	RecommissionRegionServer(ctx context.Context, in *RecommissionRegionServerRequest, opts ...grpc.CallOption) (*RecommissionRegionServerResponse, error)
	//* Fetches the Master's view of space utilization
	GetSpaceQuotaRegionSizes(ctx context.Context, in *GetSpaceQuotaRegionSizesRequest, opts ...grpc.CallOption) (*GetSpaceQuotaRegionSizesResponse, error)
	//* Fetches the Master's view of quotas
	GetQuotaStates(ctx context.Context, in *GetQuotaStatesRequest, opts ...grpc.CallOption) (*GetQuotaStatesResponse, error)
	//* clear dead servers from master
	ClearDeadServers(ctx context.Context, in *ClearDeadServersRequest, opts ...grpc.CallOption) (*ClearDeadServersResponse, error)
	//* Turn the quota throttle on or off
	SwitchRpcThrottle(ctx context.Context, in *SwitchRpcThrottleRequest, opts ...grpc.CallOption) (*SwitchRpcThrottleResponse, error)
	//* Get if is rpc throttled enabled
	IsRpcThrottleEnabled(ctx context.Context, in *IsRpcThrottleEnabledRequest, opts ...grpc.CallOption) (*IsRpcThrottleEnabledResponse, error)
	//* Turn the exceed throttle quota on or off
	SwitchExceedThrottleQuota(ctx context.Context, in *SwitchExceedThrottleQuotaRequest, opts ...grpc.CallOption) (*SwitchExceedThrottleQuotaResponse, error)
	Grant(ctx context.Context, in *GrantRequest, opts ...grpc.CallOption) (*GrantResponse, error)
	Revoke(ctx context.Context, in *RevokeRequest, opts ...grpc.CallOption) (*RevokeResponse, error)
	GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest, opts ...grpc.CallOption) (*GetUserPermissionsResponse, error)
	HasUserPermissions(ctx context.Context, in *HasUserPermissionsRequest, opts ...grpc.CallOption) (*HasUserPermissionsResponse, error)
}

type masterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterServiceClient(cc grpc.ClientConnInterface) MasterServiceClient {
	return &masterServiceClient{cc}
}

func (c *masterServiceClient) GetSchemaAlterStatus(ctx context.Context, in *GetSchemaAlterStatusRequest, opts ...grpc.CallOption) (*GetSchemaAlterStatusResponse, error) {
	out := new(GetSchemaAlterStatusResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/GetSchemaAlterStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetTableDescriptors(ctx context.Context, in *GetTableDescriptorsRequest, opts ...grpc.CallOption) (*GetTableDescriptorsResponse, error) {
	out := new(GetTableDescriptorsResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/GetTableDescriptors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetTableNames(ctx context.Context, in *GetTableNamesRequest, opts ...grpc.CallOption) (*GetTableNamesResponse, error) {
	out := new(GetTableNamesResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/GetTableNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetClusterStatus(ctx context.Context, in *GetClusterStatusRequest, opts ...grpc.CallOption) (*GetClusterStatusResponse, error) {
	out := new(GetClusterStatusResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/GetClusterStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) IsMasterRunning(ctx context.Context, in *IsMasterRunningRequest, opts ...grpc.CallOption) (*IsMasterRunningResponse, error) {
	out := new(IsMasterRunningResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/IsMasterRunning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) AddColumn(ctx context.Context, in *AddColumnRequest, opts ...grpc.CallOption) (*AddColumnResponse, error) {
	out := new(AddColumnResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/AddColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) DeleteColumn(ctx context.Context, in *DeleteColumnRequest, opts ...grpc.CallOption) (*DeleteColumnResponse, error) {
	out := new(DeleteColumnResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/DeleteColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ModifyColumn(ctx context.Context, in *ModifyColumnRequest, opts ...grpc.CallOption) (*ModifyColumnResponse, error) {
	out := new(ModifyColumnResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/ModifyColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) MoveRegion(ctx context.Context, in *MoveRegionRequest, opts ...grpc.CallOption) (*MoveRegionResponse, error) {
	out := new(MoveRegionResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/MoveRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) MergeTableRegions(ctx context.Context, in *MergeTableRegionsRequest, opts ...grpc.CallOption) (*MergeTableRegionsResponse, error) {
	out := new(MergeTableRegionsResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/MergeTableRegions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) AssignRegion(ctx context.Context, in *AssignRegionRequest, opts ...grpc.CallOption) (*AssignRegionResponse, error) {
	out := new(AssignRegionResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/AssignRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) UnassignRegion(ctx context.Context, in *UnassignRegionRequest, opts ...grpc.CallOption) (*UnassignRegionResponse, error) {
	out := new(UnassignRegionResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/UnassignRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) OfflineRegion(ctx context.Context, in *OfflineRegionRequest, opts ...grpc.CallOption) (*OfflineRegionResponse, error) {
	out := new(OfflineRegionResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/OfflineRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) SplitRegion(ctx context.Context, in *SplitTableRegionRequest, opts ...grpc.CallOption) (*SplitTableRegionResponse, error) {
	out := new(SplitTableRegionResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/SplitRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*DeleteTableResponse, error) {
	out := new(DeleteTableResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/DeleteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) TruncateTable(ctx context.Context, in *TruncateTableRequest, opts ...grpc.CallOption) (*TruncateTableResponse, error) {
	out := new(TruncateTableResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/truncateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) EnableTable(ctx context.Context, in *EnableTableRequest, opts ...grpc.CallOption) (*EnableTableResponse, error) {
	out := new(EnableTableResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/EnableTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) DisableTable(ctx context.Context, in *DisableTableRequest, opts ...grpc.CallOption) (*DisableTableResponse, error) {
	out := new(DisableTableResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/DisableTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ModifyTable(ctx context.Context, in *ModifyTableRequest, opts ...grpc.CallOption) (*ModifyTableResponse, error) {
	out := new(ModifyTableResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/ModifyTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error) {
	out := new(CreateTableResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/CreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) StopMaster(ctx context.Context, in *StopMasterRequest, opts ...grpc.CallOption) (*StopMasterResponse, error) {
	out := new(StopMasterResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/StopMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) IsMasterInMaintenanceMode(ctx context.Context, in *IsInMaintenanceModeRequest, opts ...grpc.CallOption) (*IsInMaintenanceModeResponse, error) {
	out := new(IsInMaintenanceModeResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/IsMasterInMaintenanceMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/Balance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) SetBalancerRunning(ctx context.Context, in *SetBalancerRunningRequest, opts ...grpc.CallOption) (*SetBalancerRunningResponse, error) {
	out := new(SetBalancerRunningResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/SetBalancerRunning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) IsBalancerEnabled(ctx context.Context, in *IsBalancerEnabledRequest, opts ...grpc.CallOption) (*IsBalancerEnabledResponse, error) {
	out := new(IsBalancerEnabledResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/IsBalancerEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) SetSplitOrMergeEnabled(ctx context.Context, in *SetSplitOrMergeEnabledRequest, opts ...grpc.CallOption) (*SetSplitOrMergeEnabledResponse, error) {
	out := new(SetSplitOrMergeEnabledResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/SetSplitOrMergeEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) IsSplitOrMergeEnabled(ctx context.Context, in *IsSplitOrMergeEnabledRequest, opts ...grpc.CallOption) (*IsSplitOrMergeEnabledResponse, error) {
	out := new(IsSplitOrMergeEnabledResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/IsSplitOrMergeEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) Normalize(ctx context.Context, in *NormalizeRequest, opts ...grpc.CallOption) (*NormalizeResponse, error) {
	out := new(NormalizeResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/Normalize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) SetNormalizerRunning(ctx context.Context, in *SetNormalizerRunningRequest, opts ...grpc.CallOption) (*SetNormalizerRunningResponse, error) {
	out := new(SetNormalizerRunningResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/SetNormalizerRunning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) IsNormalizerEnabled(ctx context.Context, in *IsNormalizerEnabledRequest, opts ...grpc.CallOption) (*IsNormalizerEnabledResponse, error) {
	out := new(IsNormalizerEnabledResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/IsNormalizerEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) RunCatalogScan(ctx context.Context, in *RunCatalogScanRequest, opts ...grpc.CallOption) (*RunCatalogScanResponse, error) {
	out := new(RunCatalogScanResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/RunCatalogScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) EnableCatalogJanitor(ctx context.Context, in *EnableCatalogJanitorRequest, opts ...grpc.CallOption) (*EnableCatalogJanitorResponse, error) {
	out := new(EnableCatalogJanitorResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/EnableCatalogJanitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) IsCatalogJanitorEnabled(ctx context.Context, in *IsCatalogJanitorEnabledRequest, opts ...grpc.CallOption) (*IsCatalogJanitorEnabledResponse, error) {
	out := new(IsCatalogJanitorEnabledResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/IsCatalogJanitorEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) RunCleanerChore(ctx context.Context, in *RunCleanerChoreRequest, opts ...grpc.CallOption) (*RunCleanerChoreResponse, error) {
	out := new(RunCleanerChoreResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/RunCleanerChore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) SetCleanerChoreRunning(ctx context.Context, in *SetCleanerChoreRunningRequest, opts ...grpc.CallOption) (*SetCleanerChoreRunningResponse, error) {
	out := new(SetCleanerChoreRunningResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/SetCleanerChoreRunning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) IsCleanerChoreEnabled(ctx context.Context, in *IsCleanerChoreEnabledRequest, opts ...grpc.CallOption) (*IsCleanerChoreEnabledResponse, error) {
	out := new(IsCleanerChoreEnabledResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/IsCleanerChoreEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ExecMasterService(ctx context.Context, in *CoprocessorServiceRequest, opts ...grpc.CallOption) (*CoprocessorServiceResponse, error) {
	out := new(CoprocessorServiceResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/ExecMasterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) Snapshot(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*SnapshotResponse, error) {
	out := new(SnapshotResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/Snapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetCompletedSnapshots(ctx context.Context, in *GetCompletedSnapshotsRequest, opts ...grpc.CallOption) (*GetCompletedSnapshotsResponse, error) {
	out := new(GetCompletedSnapshotsResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/GetCompletedSnapshots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) DeleteSnapshot(ctx context.Context, in *DeleteSnapshotRequest, opts ...grpc.CallOption) (*DeleteSnapshotResponse, error) {
	out := new(DeleteSnapshotResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/DeleteSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) IsSnapshotDone(ctx context.Context, in *IsSnapshotDoneRequest, opts ...grpc.CallOption) (*IsSnapshotDoneResponse, error) {
	out := new(IsSnapshotDoneResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/IsSnapshotDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) RestoreSnapshot(ctx context.Context, in *RestoreSnapshotRequest, opts ...grpc.CallOption) (*RestoreSnapshotResponse, error) {
	out := new(RestoreSnapshotResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/RestoreSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ExecProcedure(ctx context.Context, in *ExecProcedureRequest, opts ...grpc.CallOption) (*ExecProcedureResponse, error) {
	out := new(ExecProcedureResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/ExecProcedure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ExecProcedureWithRet(ctx context.Context, in *ExecProcedureRequest, opts ...grpc.CallOption) (*ExecProcedureResponse, error) {
	out := new(ExecProcedureResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/ExecProcedureWithRet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) IsProcedureDone(ctx context.Context, in *IsProcedureDoneRequest, opts ...grpc.CallOption) (*IsProcedureDoneResponse, error) {
	out := new(IsProcedureDoneResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/IsProcedureDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ModifyNamespace(ctx context.Context, in *ModifyNamespaceRequest, opts ...grpc.CallOption) (*ModifyNamespaceResponse, error) {
	out := new(ModifyNamespaceResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/ModifyNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error) {
	out := new(CreateNamespaceResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/CreateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error) {
	out := new(DeleteNamespaceResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/DeleteNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetNamespaceDescriptor(ctx context.Context, in *GetNamespaceDescriptorRequest, opts ...grpc.CallOption) (*GetNamespaceDescriptorResponse, error) {
	out := new(GetNamespaceDescriptorResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/GetNamespaceDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ListNamespaceDescriptors(ctx context.Context, in *ListNamespaceDescriptorsRequest, opts ...grpc.CallOption) (*ListNamespaceDescriptorsResponse, error) {
	out := new(ListNamespaceDescriptorsResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/ListNamespaceDescriptors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ListTableDescriptorsByNamespace(ctx context.Context, in *ListTableDescriptorsByNamespaceRequest, opts ...grpc.CallOption) (*ListTableDescriptorsByNamespaceResponse, error) {
	out := new(ListTableDescriptorsByNamespaceResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/ListTableDescriptorsByNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ListTableNamesByNamespace(ctx context.Context, in *ListTableNamesByNamespaceRequest, opts ...grpc.CallOption) (*ListTableNamesByNamespaceResponse, error) {
	out := new(ListTableNamesByNamespaceResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/ListTableNamesByNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetTableState(ctx context.Context, in *GetTableStateRequest, opts ...grpc.CallOption) (*GetTableStateResponse, error) {
	out := new(GetTableStateResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/GetTableState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) SetQuota(ctx context.Context, in *SetQuotaRequest, opts ...grpc.CallOption) (*SetQuotaResponse, error) {
	out := new(SetQuotaResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/SetQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetLastMajorCompactionTimestamp(ctx context.Context, in *MajorCompactionTimestampRequest, opts ...grpc.CallOption) (*MajorCompactionTimestampResponse, error) {
	out := new(MajorCompactionTimestampResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/getLastMajorCompactionTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetLastMajorCompactionTimestampForRegion(ctx context.Context, in *MajorCompactionTimestampForRegionRequest, opts ...grpc.CallOption) (*MajorCompactionTimestampResponse, error) {
	out := new(MajorCompactionTimestampResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/getLastMajorCompactionTimestampForRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetProcedureResult(ctx context.Context, in *GetProcedureResultRequest, opts ...grpc.CallOption) (*GetProcedureResultResponse, error) {
	out := new(GetProcedureResultResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/getProcedureResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetSecurityCapabilities(ctx context.Context, in *SecurityCapabilitiesRequest, opts ...grpc.CallOption) (*SecurityCapabilitiesResponse, error) {
	out := new(SecurityCapabilitiesResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/getSecurityCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) AbortProcedure(ctx context.Context, in *AbortProcedureRequest, opts ...grpc.CallOption) (*AbortProcedureResponse, error) {
	out := new(AbortProcedureResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/AbortProcedure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetProcedures(ctx context.Context, in *GetProceduresRequest, opts ...grpc.CallOption) (*GetProceduresResponse, error) {
	out := new(GetProceduresResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/GetProcedures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetLocks(ctx context.Context, in *GetLocksRequest, opts ...grpc.CallOption) (*GetLocksResponse, error) {
	out := new(GetLocksResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/GetLocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) AddReplicationPeer(ctx context.Context, in *AddReplicationPeerRequest, opts ...grpc.CallOption) (*AddReplicationPeerResponse, error) {
	out := new(AddReplicationPeerResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/AddReplicationPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) RemoveReplicationPeer(ctx context.Context, in *RemoveReplicationPeerRequest, opts ...grpc.CallOption) (*RemoveReplicationPeerResponse, error) {
	out := new(RemoveReplicationPeerResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/RemoveReplicationPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) EnableReplicationPeer(ctx context.Context, in *EnableReplicationPeerRequest, opts ...grpc.CallOption) (*EnableReplicationPeerResponse, error) {
	out := new(EnableReplicationPeerResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/EnableReplicationPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) DisableReplicationPeer(ctx context.Context, in *DisableReplicationPeerRequest, opts ...grpc.CallOption) (*DisableReplicationPeerResponse, error) {
	out := new(DisableReplicationPeerResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/DisableReplicationPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetReplicationPeerConfig(ctx context.Context, in *GetReplicationPeerConfigRequest, opts ...grpc.CallOption) (*GetReplicationPeerConfigResponse, error) {
	out := new(GetReplicationPeerConfigResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/GetReplicationPeerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) UpdateReplicationPeerConfig(ctx context.Context, in *UpdateReplicationPeerConfigRequest, opts ...grpc.CallOption) (*UpdateReplicationPeerConfigResponse, error) {
	out := new(UpdateReplicationPeerConfigResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/UpdateReplicationPeerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ListReplicationPeers(ctx context.Context, in *ListReplicationPeersRequest, opts ...grpc.CallOption) (*ListReplicationPeersResponse, error) {
	out := new(ListReplicationPeersResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/ListReplicationPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ListDecommissionedRegionServers(ctx context.Context, in *ListDecommissionedRegionServersRequest, opts ...grpc.CallOption) (*ListDecommissionedRegionServersResponse, error) {
	out := new(ListDecommissionedRegionServersResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/ListDecommissionedRegionServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) DecommissionRegionServers(ctx context.Context, in *DecommissionRegionServersRequest, opts ...grpc.CallOption) (*DecommissionRegionServersResponse, error) {
	out := new(DecommissionRegionServersResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/DecommissionRegionServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) RecommissionRegionServer(ctx context.Context, in *RecommissionRegionServerRequest, opts ...grpc.CallOption) (*RecommissionRegionServerResponse, error) {
	out := new(RecommissionRegionServerResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/RecommissionRegionServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetSpaceQuotaRegionSizes(ctx context.Context, in *GetSpaceQuotaRegionSizesRequest, opts ...grpc.CallOption) (*GetSpaceQuotaRegionSizesResponse, error) {
	out := new(GetSpaceQuotaRegionSizesResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/GetSpaceQuotaRegionSizes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetQuotaStates(ctx context.Context, in *GetQuotaStatesRequest, opts ...grpc.CallOption) (*GetQuotaStatesResponse, error) {
	out := new(GetQuotaStatesResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/GetQuotaStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ClearDeadServers(ctx context.Context, in *ClearDeadServersRequest, opts ...grpc.CallOption) (*ClearDeadServersResponse, error) {
	out := new(ClearDeadServersResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/ClearDeadServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) SwitchRpcThrottle(ctx context.Context, in *SwitchRpcThrottleRequest, opts ...grpc.CallOption) (*SwitchRpcThrottleResponse, error) {
	out := new(SwitchRpcThrottleResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/SwitchRpcThrottle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) IsRpcThrottleEnabled(ctx context.Context, in *IsRpcThrottleEnabledRequest, opts ...grpc.CallOption) (*IsRpcThrottleEnabledResponse, error) {
	out := new(IsRpcThrottleEnabledResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/IsRpcThrottleEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) SwitchExceedThrottleQuota(ctx context.Context, in *SwitchExceedThrottleQuotaRequest, opts ...grpc.CallOption) (*SwitchExceedThrottleQuotaResponse, error) {
	out := new(SwitchExceedThrottleQuotaResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/SwitchExceedThrottleQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) Grant(ctx context.Context, in *GrantRequest, opts ...grpc.CallOption) (*GrantResponse, error) {
	out := new(GrantResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/Grant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) Revoke(ctx context.Context, in *RevokeRequest, opts ...grpc.CallOption) (*RevokeResponse, error) {
	out := new(RevokeResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/Revoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest, opts ...grpc.CallOption) (*GetUserPermissionsResponse, error) {
	out := new(GetUserPermissionsResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/GetUserPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) HasUserPermissions(ctx context.Context, in *HasUserPermissionsRequest, opts ...grpc.CallOption) (*HasUserPermissionsResponse, error) {
	out := new(HasUserPermissionsResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.MasterService/HasUserPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServiceServer is the server API for MasterService service.
type MasterServiceServer interface {
	//* Used by the client to get the number of regions that have received the updated schema
	GetSchemaAlterStatus(context.Context, *GetSchemaAlterStatusRequest) (*GetSchemaAlterStatusResponse, error)
	//* Get list of TableDescriptors for requested tables.
	GetTableDescriptors(context.Context, *GetTableDescriptorsRequest) (*GetTableDescriptorsResponse, error)
	//* Get the list of table names.
	GetTableNames(context.Context, *GetTableNamesRequest) (*GetTableNamesResponse, error)
	//* Return cluster status.
	GetClusterStatus(context.Context, *GetClusterStatusRequest) (*GetClusterStatusResponse, error)
	//* return true if master is available
	IsMasterRunning(context.Context, *IsMasterRunningRequest) (*IsMasterRunningResponse, error)
	//* Adds a column to the specified table.
	AddColumn(context.Context, *AddColumnRequest) (*AddColumnResponse, error)
	//* Deletes a column from the specified table. Table must be disabled.
	DeleteColumn(context.Context, *DeleteColumnRequest) (*DeleteColumnResponse, error)
	//* Modifies an existing column on the specified table.
	ModifyColumn(context.Context, *ModifyColumnRequest) (*ModifyColumnResponse, error)
	//* Move the region region to the destination server.
	MoveRegion(context.Context, *MoveRegionRequest) (*MoveRegionResponse, error)
	//* Master merge the regions
	MergeTableRegions(context.Context, *MergeTableRegionsRequest) (*MergeTableRegionsResponse, error)
	//* Assign a region to a server chosen at random.
	AssignRegion(context.Context, *AssignRegionRequest) (*AssignRegionResponse, error)
	//*
	// Unassign a region from current hosting regionserver.  Region will then be
	// assigned to a regionserver chosen at random.  Region could be reassigned
	// back to the same server.  Use MoveRegion if you want
	// to control the region movement.
	UnassignRegion(context.Context, *UnassignRegionRequest) (*UnassignRegionResponse, error)
	//*
	// Offline a region from the assignment manager's in-memory state.  The
	// region should be in a closed state and there will be no attempt to
	// automatically reassign the region as in unassign.   This is a special
	// method, and should only be used by experts or hbck.
	OfflineRegion(context.Context, *OfflineRegionRequest) (*OfflineRegionResponse, error)
	//*
	// Split region
	SplitRegion(context.Context, *SplitTableRegionRequest) (*SplitTableRegionResponse, error)
	//* Deletes a table
	DeleteTable(context.Context, *DeleteTableRequest) (*DeleteTableResponse, error)
	//* Truncate a table
	TruncateTable(context.Context, *TruncateTableRequest) (*TruncateTableResponse, error)
	//* Puts the table on-line (only needed if table has been previously taken offline)
	EnableTable(context.Context, *EnableTableRequest) (*EnableTableResponse, error)
	//* Take table offline
	DisableTable(context.Context, *DisableTableRequest) (*DisableTableResponse, error)
	//* Modify a table's metadata
	ModifyTable(context.Context, *ModifyTableRequest) (*ModifyTableResponse, error)
	//* Creates a new table asynchronously
	CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error)
	//* Shutdown an HBase cluster.
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	//* Stop HBase Master only.  Does not shutdown the cluster.
	StopMaster(context.Context, *StopMasterRequest) (*StopMasterResponse, error)
	//*
	// Query whether the Master is in maintenance mode.
	IsMasterInMaintenanceMode(context.Context, *IsInMaintenanceModeRequest) (*IsInMaintenanceModeResponse, error)
	//*
	// Run the balancer.  Will run the balancer and if regions to move, it will
	// go ahead and do the reassignments.  Can NOT run for various reasons.
	// Check logs.
	Balance(context.Context, *BalanceRequest) (*BalanceResponse, error)
	//*
	// Turn the load balancer on or off.
	// If synchronous is true, it waits until current balance() call, if outstanding, to return.
	SetBalancerRunning(context.Context, *SetBalancerRunningRequest) (*SetBalancerRunningResponse, error)
	//*
	// Query whether the Region Balancer is running.
	IsBalancerEnabled(context.Context, *IsBalancerEnabledRequest) (*IsBalancerEnabledResponse, error)
	//*
	// Turn the split or merge switch on or off.
	// If synchronous is true, it waits until current operation call, if outstanding, to return.
	SetSplitOrMergeEnabled(context.Context, *SetSplitOrMergeEnabledRequest) (*SetSplitOrMergeEnabledResponse, error)
	//*
	// Query whether the split or merge switch is on/off.
	IsSplitOrMergeEnabled(context.Context, *IsSplitOrMergeEnabledRequest) (*IsSplitOrMergeEnabledResponse, error)
	//*
	// Run region normalizer. Can NOT run for various reasons. Check logs.
	Normalize(context.Context, *NormalizeRequest) (*NormalizeResponse, error)
	//*
	// Turn region normalizer on or off.
	SetNormalizerRunning(context.Context, *SetNormalizerRunningRequest) (*SetNormalizerRunningResponse, error)
	//*
	// Query whether region normalizer is enabled.
	IsNormalizerEnabled(context.Context, *IsNormalizerEnabledRequest) (*IsNormalizerEnabledResponse, error)
	//* Get a run of the catalog janitor
	RunCatalogScan(context.Context, *RunCatalogScanRequest) (*RunCatalogScanResponse, error)
	//*
	// Enable the catalog janitor on or off.
	EnableCatalogJanitor(context.Context, *EnableCatalogJanitorRequest) (*EnableCatalogJanitorResponse, error)
	//*
	// Query whether the catalog janitor is enabled.
	IsCatalogJanitorEnabled(context.Context, *IsCatalogJanitorEnabledRequest) (*IsCatalogJanitorEnabledResponse, error)
	//* Get a run of the CleanerChore
	RunCleanerChore(context.Context, *RunCleanerChoreRequest) (*RunCleanerChoreResponse, error)
	//*
	// Enable the CleanerChore on or off.
	SetCleanerChoreRunning(context.Context, *SetCleanerChoreRunningRequest) (*SetCleanerChoreRunningResponse, error)
	//*
	// Query whether the CleanerChore is enabled.
	IsCleanerChoreEnabled(context.Context, *IsCleanerChoreEnabledRequest) (*IsCleanerChoreEnabledResponse, error)
	//*
	// Call a master coprocessor endpoint
	ExecMasterService(context.Context, *CoprocessorServiceRequest) (*CoprocessorServiceResponse, error)
	//*
	// Create a snapshot for the given table.
	Snapshot(context.Context, *SnapshotRequest) (*SnapshotResponse, error)
	//*
	// Get completed snapshots.
	// Returns a list of snapshot descriptors for completed snapshots
	GetCompletedSnapshots(context.Context, *GetCompletedSnapshotsRequest) (*GetCompletedSnapshotsResponse, error)
	//*
	// Delete an existing snapshot. This method can also be used to clean up an aborted snapshot.
	DeleteSnapshot(context.Context, *DeleteSnapshotRequest) (*DeleteSnapshotResponse, error)
	//*
	// Determine if the snapshot is done yet.
	IsSnapshotDone(context.Context, *IsSnapshotDoneRequest) (*IsSnapshotDoneResponse, error)
	//*
	// Restore a snapshot
	RestoreSnapshot(context.Context, *RestoreSnapshotRequest) (*RestoreSnapshotResponse, error)
	//*
	// Execute a distributed procedure.
	ExecProcedure(context.Context, *ExecProcedureRequest) (*ExecProcedureResponse, error)
	//*
	// Execute a distributed procedure with return data.
	ExecProcedureWithRet(context.Context, *ExecProcedureRequest) (*ExecProcedureResponse, error)
	//*
	// Determine if the procedure is done yet.
	IsProcedureDone(context.Context, *IsProcedureDoneRequest) (*IsProcedureDoneResponse, error)
	//* Modify a namespace's metadata
	ModifyNamespace(context.Context, *ModifyNamespaceRequest) (*ModifyNamespaceResponse, error)
	//* Creates a new namespace synchronously
	CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	//* Deletes namespace synchronously
	DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error)
	//* Get a namespace descriptor by name
	GetNamespaceDescriptor(context.Context, *GetNamespaceDescriptorRequest) (*GetNamespaceDescriptorResponse, error)
	//* returns a list of namespaces
	ListNamespaceDescriptors(context.Context, *ListNamespaceDescriptorsRequest) (*ListNamespaceDescriptorsResponse, error)
	//* returns a list of tables for a given namespace
	ListTableDescriptorsByNamespace(context.Context, *ListTableDescriptorsByNamespaceRequest) (*ListTableDescriptorsByNamespaceResponse, error)
	//* returns a list of tables for a given namespace
	ListTableNamesByNamespace(context.Context, *ListTableNamesByNamespaceRequest) (*ListTableNamesByNamespaceResponse, error)
	//* returns table state
	GetTableState(context.Context, *GetTableStateRequest) (*GetTableStateResponse, error)
	//* Apply the new quota settings
	SetQuota(context.Context, *SetQuotaRequest) (*SetQuotaResponse, error)
	//* Returns the timestamp of the last major compaction
	GetLastMajorCompactionTimestamp(context.Context, *MajorCompactionTimestampRequest) (*MajorCompactionTimestampResponse, error)
	//* Returns the timestamp of the last major compaction
	GetLastMajorCompactionTimestampForRegion(context.Context, *MajorCompactionTimestampForRegionRequest) (*MajorCompactionTimestampResponse, error)
	GetProcedureResult(context.Context, *GetProcedureResultRequest) (*GetProcedureResultResponse, error)
	//* Returns the security capabilities in effect on the cluster
	GetSecurityCapabilities(context.Context, *SecurityCapabilitiesRequest) (*SecurityCapabilitiesResponse, error)
	//* Abort a procedure
	AbortProcedure(context.Context, *AbortProcedureRequest) (*AbortProcedureResponse, error)
	//* returns a list of procedures
	GetProcedures(context.Context, *GetProceduresRequest) (*GetProceduresResponse, error)
	GetLocks(context.Context, *GetLocksRequest) (*GetLocksResponse, error)
	//* Add a replication peer
	AddReplicationPeer(context.Context, *AddReplicationPeerRequest) (*AddReplicationPeerResponse, error)
	//* Remove a replication peer
	RemoveReplicationPeer(context.Context, *RemoveReplicationPeerRequest) (*RemoveReplicationPeerResponse, error)
	//* Enable a replication peer
	EnableReplicationPeer(context.Context, *EnableReplicationPeerRequest) (*EnableReplicationPeerResponse, error)
	//* Disable a replication peer
	DisableReplicationPeer(context.Context, *DisableReplicationPeerRequest) (*DisableReplicationPeerResponse, error)
	//* Return peer config for a replication peer
	GetReplicationPeerConfig(context.Context, *GetReplicationPeerConfigRequest) (*GetReplicationPeerConfigResponse, error)
	//* Update peer config for a replication peer
	UpdateReplicationPeerConfig(context.Context, *UpdateReplicationPeerConfigRequest) (*UpdateReplicationPeerConfigResponse, error)
	//* Returns a list of replication peers
	ListReplicationPeers(context.Context, *ListReplicationPeersRequest) (*ListReplicationPeersResponse, error)
	//* Returns a list of ServerNames marked as decommissioned.
	ListDecommissionedRegionServers(context.Context, *ListDecommissionedRegionServersRequest) (*ListDecommissionedRegionServersResponse, error)
	//* Decommission region servers.
	DecommissionRegionServers(context.Context, *DecommissionRegionServersRequest) (*DecommissionRegionServersResponse, error)
	//* Re-commission region server.
	RecommissionRegionServer(context.Context, *RecommissionRegionServerRequest) (*RecommissionRegionServerResponse, error)
	//* Fetches the Master's view of space utilization
	GetSpaceQuotaRegionSizes(context.Context, *GetSpaceQuotaRegionSizesRequest) (*GetSpaceQuotaRegionSizesResponse, error)
	//* Fetches the Master's view of quotas
	GetQuotaStates(context.Context, *GetQuotaStatesRequest) (*GetQuotaStatesResponse, error)
	//* clear dead servers from master
	ClearDeadServers(context.Context, *ClearDeadServersRequest) (*ClearDeadServersResponse, error)
	//* Turn the quota throttle on or off
	SwitchRpcThrottle(context.Context, *SwitchRpcThrottleRequest) (*SwitchRpcThrottleResponse, error)
	//* Get if is rpc throttled enabled
	IsRpcThrottleEnabled(context.Context, *IsRpcThrottleEnabledRequest) (*IsRpcThrottleEnabledResponse, error)
	//* Turn the exceed throttle quota on or off
	SwitchExceedThrottleQuota(context.Context, *SwitchExceedThrottleQuotaRequest) (*SwitchExceedThrottleQuotaResponse, error)
	Grant(context.Context, *GrantRequest) (*GrantResponse, error)
	Revoke(context.Context, *RevokeRequest) (*RevokeResponse, error)
	GetUserPermissions(context.Context, *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error)
	HasUserPermissions(context.Context, *HasUserPermissionsRequest) (*HasUserPermissionsResponse, error)
}

// UnimplementedMasterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMasterServiceServer struct {
}

func (*UnimplementedMasterServiceServer) GetSchemaAlterStatus(context.Context, *GetSchemaAlterStatusRequest) (*GetSchemaAlterStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchemaAlterStatus not implemented")
}
func (*UnimplementedMasterServiceServer) GetTableDescriptors(context.Context, *GetTableDescriptorsRequest) (*GetTableDescriptorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableDescriptors not implemented")
}
func (*UnimplementedMasterServiceServer) GetTableNames(context.Context, *GetTableNamesRequest) (*GetTableNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableNames not implemented")
}
func (*UnimplementedMasterServiceServer) GetClusterStatus(context.Context, *GetClusterStatusRequest) (*GetClusterStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterStatus not implemented")
}
func (*UnimplementedMasterServiceServer) IsMasterRunning(context.Context, *IsMasterRunningRequest) (*IsMasterRunningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMasterRunning not implemented")
}
func (*UnimplementedMasterServiceServer) AddColumn(context.Context, *AddColumnRequest) (*AddColumnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddColumn not implemented")
}
func (*UnimplementedMasterServiceServer) DeleteColumn(context.Context, *DeleteColumnRequest) (*DeleteColumnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteColumn not implemented")
}
func (*UnimplementedMasterServiceServer) ModifyColumn(context.Context, *ModifyColumnRequest) (*ModifyColumnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyColumn not implemented")
}
func (*UnimplementedMasterServiceServer) MoveRegion(context.Context, *MoveRegionRequest) (*MoveRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveRegion not implemented")
}
func (*UnimplementedMasterServiceServer) MergeTableRegions(context.Context, *MergeTableRegionsRequest) (*MergeTableRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeTableRegions not implemented")
}
func (*UnimplementedMasterServiceServer) AssignRegion(context.Context, *AssignRegionRequest) (*AssignRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRegion not implemented")
}
func (*UnimplementedMasterServiceServer) UnassignRegion(context.Context, *UnassignRegionRequest) (*UnassignRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignRegion not implemented")
}
func (*UnimplementedMasterServiceServer) OfflineRegion(context.Context, *OfflineRegionRequest) (*OfflineRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfflineRegion not implemented")
}
func (*UnimplementedMasterServiceServer) SplitRegion(context.Context, *SplitTableRegionRequest) (*SplitTableRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitRegion not implemented")
}
func (*UnimplementedMasterServiceServer) DeleteTable(context.Context, *DeleteTableRequest) (*DeleteTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTable not implemented")
}
func (*UnimplementedMasterServiceServer) TruncateTable(context.Context, *TruncateTableRequest) (*TruncateTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TruncateTable not implemented")
}
func (*UnimplementedMasterServiceServer) EnableTable(context.Context, *EnableTableRequest) (*EnableTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableTable not implemented")
}
func (*UnimplementedMasterServiceServer) DisableTable(context.Context, *DisableTableRequest) (*DisableTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableTable not implemented")
}
func (*UnimplementedMasterServiceServer) ModifyTable(context.Context, *ModifyTableRequest) (*ModifyTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyTable not implemented")
}
func (*UnimplementedMasterServiceServer) CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (*UnimplementedMasterServiceServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (*UnimplementedMasterServiceServer) StopMaster(context.Context, *StopMasterRequest) (*StopMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopMaster not implemented")
}
func (*UnimplementedMasterServiceServer) IsMasterInMaintenanceMode(context.Context, *IsInMaintenanceModeRequest) (*IsInMaintenanceModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMasterInMaintenanceMode not implemented")
}
func (*UnimplementedMasterServiceServer) Balance(context.Context, *BalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balance not implemented")
}
func (*UnimplementedMasterServiceServer) SetBalancerRunning(context.Context, *SetBalancerRunningRequest) (*SetBalancerRunningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBalancerRunning not implemented")
}
func (*UnimplementedMasterServiceServer) IsBalancerEnabled(context.Context, *IsBalancerEnabledRequest) (*IsBalancerEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsBalancerEnabled not implemented")
}
func (*UnimplementedMasterServiceServer) SetSplitOrMergeEnabled(context.Context, *SetSplitOrMergeEnabledRequest) (*SetSplitOrMergeEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSplitOrMergeEnabled not implemented")
}
func (*UnimplementedMasterServiceServer) IsSplitOrMergeEnabled(context.Context, *IsSplitOrMergeEnabledRequest) (*IsSplitOrMergeEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSplitOrMergeEnabled not implemented")
}
func (*UnimplementedMasterServiceServer) Normalize(context.Context, *NormalizeRequest) (*NormalizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Normalize not implemented")
}
func (*UnimplementedMasterServiceServer) SetNormalizerRunning(context.Context, *SetNormalizerRunningRequest) (*SetNormalizerRunningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNormalizerRunning not implemented")
}
func (*UnimplementedMasterServiceServer) IsNormalizerEnabled(context.Context, *IsNormalizerEnabledRequest) (*IsNormalizerEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsNormalizerEnabled not implemented")
}
func (*UnimplementedMasterServiceServer) RunCatalogScan(context.Context, *RunCatalogScanRequest) (*RunCatalogScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCatalogScan not implemented")
}
func (*UnimplementedMasterServiceServer) EnableCatalogJanitor(context.Context, *EnableCatalogJanitorRequest) (*EnableCatalogJanitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableCatalogJanitor not implemented")
}
func (*UnimplementedMasterServiceServer) IsCatalogJanitorEnabled(context.Context, *IsCatalogJanitorEnabledRequest) (*IsCatalogJanitorEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsCatalogJanitorEnabled not implemented")
}
func (*UnimplementedMasterServiceServer) RunCleanerChore(context.Context, *RunCleanerChoreRequest) (*RunCleanerChoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCleanerChore not implemented")
}
func (*UnimplementedMasterServiceServer) SetCleanerChoreRunning(context.Context, *SetCleanerChoreRunningRequest) (*SetCleanerChoreRunningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCleanerChoreRunning not implemented")
}
func (*UnimplementedMasterServiceServer) IsCleanerChoreEnabled(context.Context, *IsCleanerChoreEnabledRequest) (*IsCleanerChoreEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsCleanerChoreEnabled not implemented")
}
func (*UnimplementedMasterServiceServer) ExecMasterService(context.Context, *CoprocessorServiceRequest) (*CoprocessorServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecMasterService not implemented")
}
func (*UnimplementedMasterServiceServer) Snapshot(context.Context, *SnapshotRequest) (*SnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Snapshot not implemented")
}
func (*UnimplementedMasterServiceServer) GetCompletedSnapshots(context.Context, *GetCompletedSnapshotsRequest) (*GetCompletedSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompletedSnapshots not implemented")
}
func (*UnimplementedMasterServiceServer) DeleteSnapshot(context.Context, *DeleteSnapshotRequest) (*DeleteSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSnapshot not implemented")
}
func (*UnimplementedMasterServiceServer) IsSnapshotDone(context.Context, *IsSnapshotDoneRequest) (*IsSnapshotDoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSnapshotDone not implemented")
}
func (*UnimplementedMasterServiceServer) RestoreSnapshot(context.Context, *RestoreSnapshotRequest) (*RestoreSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreSnapshot not implemented")
}
func (*UnimplementedMasterServiceServer) ExecProcedure(context.Context, *ExecProcedureRequest) (*ExecProcedureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecProcedure not implemented")
}
func (*UnimplementedMasterServiceServer) ExecProcedureWithRet(context.Context, *ExecProcedureRequest) (*ExecProcedureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecProcedureWithRet not implemented")
}
func (*UnimplementedMasterServiceServer) IsProcedureDone(context.Context, *IsProcedureDoneRequest) (*IsProcedureDoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsProcedureDone not implemented")
}
func (*UnimplementedMasterServiceServer) ModifyNamespace(context.Context, *ModifyNamespaceRequest) (*ModifyNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyNamespace not implemented")
}
func (*UnimplementedMasterServiceServer) CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (*UnimplementedMasterServiceServer) DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (*UnimplementedMasterServiceServer) GetNamespaceDescriptor(context.Context, *GetNamespaceDescriptorRequest) (*GetNamespaceDescriptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaceDescriptor not implemented")
}
func (*UnimplementedMasterServiceServer) ListNamespaceDescriptors(context.Context, *ListNamespaceDescriptorsRequest) (*ListNamespaceDescriptorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaceDescriptors not implemented")
}
func (*UnimplementedMasterServiceServer) ListTableDescriptorsByNamespace(context.Context, *ListTableDescriptorsByNamespaceRequest) (*ListTableDescriptorsByNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTableDescriptorsByNamespace not implemented")
}
func (*UnimplementedMasterServiceServer) ListTableNamesByNamespace(context.Context, *ListTableNamesByNamespaceRequest) (*ListTableNamesByNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTableNamesByNamespace not implemented")
}
func (*UnimplementedMasterServiceServer) GetTableState(context.Context, *GetTableStateRequest) (*GetTableStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableState not implemented")
}
func (*UnimplementedMasterServiceServer) SetQuota(context.Context, *SetQuotaRequest) (*SetQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetQuota not implemented")
}
func (*UnimplementedMasterServiceServer) GetLastMajorCompactionTimestamp(context.Context, *MajorCompactionTimestampRequest) (*MajorCompactionTimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastMajorCompactionTimestamp not implemented")
}
func (*UnimplementedMasterServiceServer) GetLastMajorCompactionTimestampForRegion(context.Context, *MajorCompactionTimestampForRegionRequest) (*MajorCompactionTimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastMajorCompactionTimestampForRegion not implemented")
}
func (*UnimplementedMasterServiceServer) GetProcedureResult(context.Context, *GetProcedureResultRequest) (*GetProcedureResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcedureResult not implemented")
}
func (*UnimplementedMasterServiceServer) GetSecurityCapabilities(context.Context, *SecurityCapabilitiesRequest) (*SecurityCapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityCapabilities not implemented")
}
func (*UnimplementedMasterServiceServer) AbortProcedure(context.Context, *AbortProcedureRequest) (*AbortProcedureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortProcedure not implemented")
}
func (*UnimplementedMasterServiceServer) GetProcedures(context.Context, *GetProceduresRequest) (*GetProceduresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcedures not implemented")
}
func (*UnimplementedMasterServiceServer) GetLocks(context.Context, *GetLocksRequest) (*GetLocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocks not implemented")
}
func (*UnimplementedMasterServiceServer) AddReplicationPeer(context.Context, *AddReplicationPeerRequest) (*AddReplicationPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReplicationPeer not implemented")
}
func (*UnimplementedMasterServiceServer) RemoveReplicationPeer(context.Context, *RemoveReplicationPeerRequest) (*RemoveReplicationPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveReplicationPeer not implemented")
}
func (*UnimplementedMasterServiceServer) EnableReplicationPeer(context.Context, *EnableReplicationPeerRequest) (*EnableReplicationPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableReplicationPeer not implemented")
}
func (*UnimplementedMasterServiceServer) DisableReplicationPeer(context.Context, *DisableReplicationPeerRequest) (*DisableReplicationPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableReplicationPeer not implemented")
}
func (*UnimplementedMasterServiceServer) GetReplicationPeerConfig(context.Context, *GetReplicationPeerConfigRequest) (*GetReplicationPeerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplicationPeerConfig not implemented")
}
func (*UnimplementedMasterServiceServer) UpdateReplicationPeerConfig(context.Context, *UpdateReplicationPeerConfigRequest) (*UpdateReplicationPeerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReplicationPeerConfig not implemented")
}
func (*UnimplementedMasterServiceServer) ListReplicationPeers(context.Context, *ListReplicationPeersRequest) (*ListReplicationPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReplicationPeers not implemented")
}
func (*UnimplementedMasterServiceServer) ListDecommissionedRegionServers(context.Context, *ListDecommissionedRegionServersRequest) (*ListDecommissionedRegionServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDecommissionedRegionServers not implemented")
}
func (*UnimplementedMasterServiceServer) DecommissionRegionServers(context.Context, *DecommissionRegionServersRequest) (*DecommissionRegionServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecommissionRegionServers not implemented")
}
func (*UnimplementedMasterServiceServer) RecommissionRegionServer(context.Context, *RecommissionRegionServerRequest) (*RecommissionRegionServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommissionRegionServer not implemented")
}
func (*UnimplementedMasterServiceServer) GetSpaceQuotaRegionSizes(context.Context, *GetSpaceQuotaRegionSizesRequest) (*GetSpaceQuotaRegionSizesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpaceQuotaRegionSizes not implemented")
}
func (*UnimplementedMasterServiceServer) GetQuotaStates(context.Context, *GetQuotaStatesRequest) (*GetQuotaStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuotaStates not implemented")
}
func (*UnimplementedMasterServiceServer) ClearDeadServers(context.Context, *ClearDeadServersRequest) (*ClearDeadServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearDeadServers not implemented")
}
func (*UnimplementedMasterServiceServer) SwitchRpcThrottle(context.Context, *SwitchRpcThrottleRequest) (*SwitchRpcThrottleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchRpcThrottle not implemented")
}
func (*UnimplementedMasterServiceServer) IsRpcThrottleEnabled(context.Context, *IsRpcThrottleEnabledRequest) (*IsRpcThrottleEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsRpcThrottleEnabled not implemented")
}
func (*UnimplementedMasterServiceServer) SwitchExceedThrottleQuota(context.Context, *SwitchExceedThrottleQuotaRequest) (*SwitchExceedThrottleQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchExceedThrottleQuota not implemented")
}
func (*UnimplementedMasterServiceServer) Grant(context.Context, *GrantRequest) (*GrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Grant not implemented")
}
func (*UnimplementedMasterServiceServer) Revoke(context.Context, *RevokeRequest) (*RevokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revoke not implemented")
}
func (*UnimplementedMasterServiceServer) GetUserPermissions(context.Context, *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissions not implemented")
}
func (*UnimplementedMasterServiceServer) HasUserPermissions(context.Context, *HasUserPermissionsRequest) (*HasUserPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasUserPermissions not implemented")
}

func RegisterMasterServiceServer(s *grpc.Server, srv MasterServiceServer) {
	s.RegisterService(&_MasterService_serviceDesc, srv)
}

func _MasterService_GetSchemaAlterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaAlterStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetSchemaAlterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/GetSchemaAlterStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetSchemaAlterStatus(ctx, req.(*GetSchemaAlterStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetTableDescriptors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableDescriptorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetTableDescriptors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/GetTableDescriptors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetTableDescriptors(ctx, req.(*GetTableDescriptorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetTableNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetTableNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/GetTableNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetTableNames(ctx, req.(*GetTableNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetClusterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetClusterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/GetClusterStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetClusterStatus(ctx, req.(*GetClusterStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_IsMasterRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsMasterRunningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).IsMasterRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/IsMasterRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).IsMasterRunning(ctx, req.(*IsMasterRunningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_AddColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).AddColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/AddColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).AddColumn(ctx, req.(*AddColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_DeleteColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).DeleteColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/DeleteColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).DeleteColumn(ctx, req.(*DeleteColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ModifyColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ModifyColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/ModifyColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ModifyColumn(ctx, req.(*ModifyColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_MoveRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).MoveRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/MoveRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).MoveRegion(ctx, req.(*MoveRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_MergeTableRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeTableRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).MergeTableRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/MergeTableRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).MergeTableRegions(ctx, req.(*MergeTableRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_AssignRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).AssignRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/AssignRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).AssignRegion(ctx, req.(*AssignRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_UnassignRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).UnassignRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/UnassignRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).UnassignRegion(ctx, req.(*UnassignRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_OfflineRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfflineRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).OfflineRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/OfflineRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).OfflineRegion(ctx, req.(*OfflineRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_SplitRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitTableRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).SplitRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/SplitRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).SplitRegion(ctx, req.(*SplitTableRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_DeleteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).DeleteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/DeleteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).DeleteTable(ctx, req.(*DeleteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_TruncateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TruncateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).TruncateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/TruncateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).TruncateTable(ctx, req.(*TruncateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_EnableTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).EnableTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/EnableTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).EnableTable(ctx, req.(*EnableTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_DisableTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).DisableTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/DisableTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).DisableTable(ctx, req.(*DisableTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ModifyTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ModifyTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/ModifyTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ModifyTable(ctx, req.(*ModifyTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).CreateTable(ctx, req.(*CreateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_StopMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).StopMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/StopMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).StopMaster(ctx, req.(*StopMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_IsMasterInMaintenanceMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsInMaintenanceModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).IsMasterInMaintenanceMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/IsMasterInMaintenanceMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).IsMasterInMaintenanceMode(ctx, req.(*IsInMaintenanceModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/Balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).Balance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_SetBalancerRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBalancerRunningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).SetBalancerRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/SetBalancerRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).SetBalancerRunning(ctx, req.(*SetBalancerRunningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_IsBalancerEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsBalancerEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).IsBalancerEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/IsBalancerEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).IsBalancerEnabled(ctx, req.(*IsBalancerEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_SetSplitOrMergeEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSplitOrMergeEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).SetSplitOrMergeEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/SetSplitOrMergeEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).SetSplitOrMergeEnabled(ctx, req.(*SetSplitOrMergeEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_IsSplitOrMergeEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsSplitOrMergeEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).IsSplitOrMergeEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/IsSplitOrMergeEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).IsSplitOrMergeEnabled(ctx, req.(*IsSplitOrMergeEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_Normalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NormalizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).Normalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/Normalize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).Normalize(ctx, req.(*NormalizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_SetNormalizerRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNormalizerRunningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).SetNormalizerRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/SetNormalizerRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).SetNormalizerRunning(ctx, req.(*SetNormalizerRunningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_IsNormalizerEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsNormalizerEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).IsNormalizerEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/IsNormalizerEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).IsNormalizerEnabled(ctx, req.(*IsNormalizerEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_RunCatalogScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCatalogScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).RunCatalogScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/RunCatalogScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).RunCatalogScan(ctx, req.(*RunCatalogScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_EnableCatalogJanitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableCatalogJanitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).EnableCatalogJanitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/EnableCatalogJanitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).EnableCatalogJanitor(ctx, req.(*EnableCatalogJanitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_IsCatalogJanitorEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsCatalogJanitorEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).IsCatalogJanitorEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/IsCatalogJanitorEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).IsCatalogJanitorEnabled(ctx, req.(*IsCatalogJanitorEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_RunCleanerChore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCleanerChoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).RunCleanerChore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/RunCleanerChore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).RunCleanerChore(ctx, req.(*RunCleanerChoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_SetCleanerChoreRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCleanerChoreRunningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).SetCleanerChoreRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/SetCleanerChoreRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).SetCleanerChoreRunning(ctx, req.(*SetCleanerChoreRunningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_IsCleanerChoreEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsCleanerChoreEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).IsCleanerChoreEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/IsCleanerChoreEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).IsCleanerChoreEnabled(ctx, req.(*IsCleanerChoreEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ExecMasterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoprocessorServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ExecMasterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/ExecMasterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ExecMasterService(ctx, req.(*CoprocessorServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_Snapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).Snapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/Snapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).Snapshot(ctx, req.(*SnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetCompletedSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompletedSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetCompletedSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/GetCompletedSnapshots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetCompletedSnapshots(ctx, req.(*GetCompletedSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_DeleteSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).DeleteSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/DeleteSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).DeleteSnapshot(ctx, req.(*DeleteSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_IsSnapshotDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsSnapshotDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).IsSnapshotDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/IsSnapshotDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).IsSnapshotDone(ctx, req.(*IsSnapshotDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_RestoreSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).RestoreSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/RestoreSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).RestoreSnapshot(ctx, req.(*RestoreSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ExecProcedure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecProcedureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ExecProcedure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/ExecProcedure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ExecProcedure(ctx, req.(*ExecProcedureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ExecProcedureWithRet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecProcedureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ExecProcedureWithRet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/ExecProcedureWithRet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ExecProcedureWithRet(ctx, req.(*ExecProcedureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_IsProcedureDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsProcedureDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).IsProcedureDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/IsProcedureDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).IsProcedureDone(ctx, req.(*IsProcedureDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ModifyNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ModifyNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/ModifyNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ModifyNamespace(ctx, req.(*ModifyNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/CreateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).CreateNamespace(ctx, req.(*CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/DeleteNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).DeleteNamespace(ctx, req.(*DeleteNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetNamespaceDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetNamespaceDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/GetNamespaceDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetNamespaceDescriptor(ctx, req.(*GetNamespaceDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ListNamespaceDescriptors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespaceDescriptorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ListNamespaceDescriptors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/ListNamespaceDescriptors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ListNamespaceDescriptors(ctx, req.(*ListNamespaceDescriptorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ListTableDescriptorsByNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTableDescriptorsByNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ListTableDescriptorsByNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/ListTableDescriptorsByNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ListTableDescriptorsByNamespace(ctx, req.(*ListTableDescriptorsByNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ListTableNamesByNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTableNamesByNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ListTableNamesByNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/ListTableNamesByNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ListTableNamesByNamespace(ctx, req.(*ListTableNamesByNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetTableState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetTableState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/GetTableState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetTableState(ctx, req.(*GetTableStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_SetQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).SetQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/SetQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).SetQuota(ctx, req.(*SetQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetLastMajorCompactionTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MajorCompactionTimestampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetLastMajorCompactionTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/GetLastMajorCompactionTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetLastMajorCompactionTimestamp(ctx, req.(*MajorCompactionTimestampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetLastMajorCompactionTimestampForRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MajorCompactionTimestampForRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetLastMajorCompactionTimestampForRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/GetLastMajorCompactionTimestampForRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetLastMajorCompactionTimestampForRegion(ctx, req.(*MajorCompactionTimestampForRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetProcedureResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcedureResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetProcedureResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/GetProcedureResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetProcedureResult(ctx, req.(*GetProcedureResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetSecurityCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetSecurityCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/GetSecurityCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetSecurityCapabilities(ctx, req.(*SecurityCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_AbortProcedure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortProcedureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).AbortProcedure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/AbortProcedure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).AbortProcedure(ctx, req.(*AbortProcedureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetProcedures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProceduresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetProcedures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/GetProcedures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetProcedures(ctx, req.(*GetProceduresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetLocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetLocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/GetLocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetLocks(ctx, req.(*GetLocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_AddReplicationPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReplicationPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).AddReplicationPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/AddReplicationPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).AddReplicationPeer(ctx, req.(*AddReplicationPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_RemoveReplicationPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveReplicationPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).RemoveReplicationPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/RemoveReplicationPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).RemoveReplicationPeer(ctx, req.(*RemoveReplicationPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_EnableReplicationPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableReplicationPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).EnableReplicationPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/EnableReplicationPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).EnableReplicationPeer(ctx, req.(*EnableReplicationPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_DisableReplicationPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableReplicationPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).DisableReplicationPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/DisableReplicationPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).DisableReplicationPeer(ctx, req.(*DisableReplicationPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetReplicationPeerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplicationPeerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetReplicationPeerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/GetReplicationPeerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetReplicationPeerConfig(ctx, req.(*GetReplicationPeerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_UpdateReplicationPeerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReplicationPeerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).UpdateReplicationPeerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/UpdateReplicationPeerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).UpdateReplicationPeerConfig(ctx, req.(*UpdateReplicationPeerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ListReplicationPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReplicationPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ListReplicationPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/ListReplicationPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ListReplicationPeers(ctx, req.(*ListReplicationPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ListDecommissionedRegionServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDecommissionedRegionServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ListDecommissionedRegionServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/ListDecommissionedRegionServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ListDecommissionedRegionServers(ctx, req.(*ListDecommissionedRegionServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_DecommissionRegionServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecommissionRegionServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).DecommissionRegionServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/DecommissionRegionServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).DecommissionRegionServers(ctx, req.(*DecommissionRegionServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_RecommissionRegionServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommissionRegionServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).RecommissionRegionServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/RecommissionRegionServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).RecommissionRegionServer(ctx, req.(*RecommissionRegionServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetSpaceQuotaRegionSizes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpaceQuotaRegionSizesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetSpaceQuotaRegionSizes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/GetSpaceQuotaRegionSizes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetSpaceQuotaRegionSizes(ctx, req.(*GetSpaceQuotaRegionSizesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetQuotaStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotaStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetQuotaStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/GetQuotaStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetQuotaStates(ctx, req.(*GetQuotaStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ClearDeadServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearDeadServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ClearDeadServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/ClearDeadServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ClearDeadServers(ctx, req.(*ClearDeadServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_SwitchRpcThrottle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchRpcThrottleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).SwitchRpcThrottle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/SwitchRpcThrottle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).SwitchRpcThrottle(ctx, req.(*SwitchRpcThrottleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_IsRpcThrottleEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsRpcThrottleEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).IsRpcThrottleEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/IsRpcThrottleEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).IsRpcThrottleEnabled(ctx, req.(*IsRpcThrottleEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_SwitchExceedThrottleQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchExceedThrottleQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).SwitchExceedThrottleQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/SwitchExceedThrottleQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).SwitchExceedThrottleQuota(ctx, req.(*SwitchExceedThrottleQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_Grant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).Grant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/Grant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).Grant(ctx, req.(*GrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_Revoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).Revoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/Revoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).Revoke(ctx, req.(*RevokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/GetUserPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetUserPermissions(ctx, req.(*GetUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_HasUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).HasUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.MasterService/HasUserPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).HasUserPermissions(ctx, req.(*HasUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MasterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hbase.pb.MasterService",
	HandlerType: (*MasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSchemaAlterStatus",
			Handler:    _MasterService_GetSchemaAlterStatus_Handler,
		},
		{
			MethodName: "GetTableDescriptors",
			Handler:    _MasterService_GetTableDescriptors_Handler,
		},
		{
			MethodName: "GetTableNames",
			Handler:    _MasterService_GetTableNames_Handler,
		},
		{
			MethodName: "GetClusterStatus",
			Handler:    _MasterService_GetClusterStatus_Handler,
		},
		{
			MethodName: "IsMasterRunning",
			Handler:    _MasterService_IsMasterRunning_Handler,
		},
		{
			MethodName: "AddColumn",
			Handler:    _MasterService_AddColumn_Handler,
		},
		{
			MethodName: "DeleteColumn",
			Handler:    _MasterService_DeleteColumn_Handler,
		},
		{
			MethodName: "ModifyColumn",
			Handler:    _MasterService_ModifyColumn_Handler,
		},
		{
			MethodName: "MoveRegion",
			Handler:    _MasterService_MoveRegion_Handler,
		},
		{
			MethodName: "MergeTableRegions",
			Handler:    _MasterService_MergeTableRegions_Handler,
		},
		{
			MethodName: "AssignRegion",
			Handler:    _MasterService_AssignRegion_Handler,
		},
		{
			MethodName: "UnassignRegion",
			Handler:    _MasterService_UnassignRegion_Handler,
		},
		{
			MethodName: "OfflineRegion",
			Handler:    _MasterService_OfflineRegion_Handler,
		},
		{
			MethodName: "SplitRegion",
			Handler:    _MasterService_SplitRegion_Handler,
		},
		{
			MethodName: "DeleteTable",
			Handler:    _MasterService_DeleteTable_Handler,
		},
		{
			MethodName: "truncateTable",
			Handler:    _MasterService_TruncateTable_Handler,
		},
		{
			MethodName: "EnableTable",
			Handler:    _MasterService_EnableTable_Handler,
		},
		{
			MethodName: "DisableTable",
			Handler:    _MasterService_DisableTable_Handler,
		},
		{
			MethodName: "ModifyTable",
			Handler:    _MasterService_ModifyTable_Handler,
		},
		{
			MethodName: "CreateTable",
			Handler:    _MasterService_CreateTable_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _MasterService_Shutdown_Handler,
		},
		{
			MethodName: "StopMaster",
			Handler:    _MasterService_StopMaster_Handler,
		},
		{
			MethodName: "IsMasterInMaintenanceMode",
			Handler:    _MasterService_IsMasterInMaintenanceMode_Handler,
		},
		{
			MethodName: "Balance",
			Handler:    _MasterService_Balance_Handler,
		},
		{
			MethodName: "SetBalancerRunning",
			Handler:    _MasterService_SetBalancerRunning_Handler,
		},
		{
			MethodName: "IsBalancerEnabled",
			Handler:    _MasterService_IsBalancerEnabled_Handler,
		},
		{
			MethodName: "SetSplitOrMergeEnabled",
			Handler:    _MasterService_SetSplitOrMergeEnabled_Handler,
		},
		{
			MethodName: "IsSplitOrMergeEnabled",
			Handler:    _MasterService_IsSplitOrMergeEnabled_Handler,
		},
		{
			MethodName: "Normalize",
			Handler:    _MasterService_Normalize_Handler,
		},
		{
			MethodName: "SetNormalizerRunning",
			Handler:    _MasterService_SetNormalizerRunning_Handler,
		},
		{
			MethodName: "IsNormalizerEnabled",
			Handler:    _MasterService_IsNormalizerEnabled_Handler,
		},
		{
			MethodName: "RunCatalogScan",
			Handler:    _MasterService_RunCatalogScan_Handler,
		},
		{
			MethodName: "EnableCatalogJanitor",
			Handler:    _MasterService_EnableCatalogJanitor_Handler,
		},
		{
			MethodName: "IsCatalogJanitorEnabled",
			Handler:    _MasterService_IsCatalogJanitorEnabled_Handler,
		},
		{
			MethodName: "RunCleanerChore",
			Handler:    _MasterService_RunCleanerChore_Handler,
		},
		{
			MethodName: "SetCleanerChoreRunning",
			Handler:    _MasterService_SetCleanerChoreRunning_Handler,
		},
		{
			MethodName: "IsCleanerChoreEnabled",
			Handler:    _MasterService_IsCleanerChoreEnabled_Handler,
		},
		{
			MethodName: "ExecMasterService",
			Handler:    _MasterService_ExecMasterService_Handler,
		},
		{
			MethodName: "Snapshot",
			Handler:    _MasterService_Snapshot_Handler,
		},
		{
			MethodName: "GetCompletedSnapshots",
			Handler:    _MasterService_GetCompletedSnapshots_Handler,
		},
		{
			MethodName: "DeleteSnapshot",
			Handler:    _MasterService_DeleteSnapshot_Handler,
		},
		{
			MethodName: "IsSnapshotDone",
			Handler:    _MasterService_IsSnapshotDone_Handler,
		},
		{
			MethodName: "RestoreSnapshot",
			Handler:    _MasterService_RestoreSnapshot_Handler,
		},
		{
			MethodName: "ExecProcedure",
			Handler:    _MasterService_ExecProcedure_Handler,
		},
		{
			MethodName: "ExecProcedureWithRet",
			Handler:    _MasterService_ExecProcedureWithRet_Handler,
		},
		{
			MethodName: "IsProcedureDone",
			Handler:    _MasterService_IsProcedureDone_Handler,
		},
		{
			MethodName: "ModifyNamespace",
			Handler:    _MasterService_ModifyNamespace_Handler,
		},
		{
			MethodName: "CreateNamespace",
			Handler:    _MasterService_CreateNamespace_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _MasterService_DeleteNamespace_Handler,
		},
		{
			MethodName: "GetNamespaceDescriptor",
			Handler:    _MasterService_GetNamespaceDescriptor_Handler,
		},
		{
			MethodName: "ListNamespaceDescriptors",
			Handler:    _MasterService_ListNamespaceDescriptors_Handler,
		},
		{
			MethodName: "ListTableDescriptorsByNamespace",
			Handler:    _MasterService_ListTableDescriptorsByNamespace_Handler,
		},
		{
			MethodName: "ListTableNamesByNamespace",
			Handler:    _MasterService_ListTableNamesByNamespace_Handler,
		},
		{
			MethodName: "GetTableState",
			Handler:    _MasterService_GetTableState_Handler,
		},
		{
			MethodName: "SetQuota",
			Handler:    _MasterService_SetQuota_Handler,
		},
		{
			MethodName: "getLastMajorCompactionTimestamp",
			Handler:    _MasterService_GetLastMajorCompactionTimestamp_Handler,
		},
		{
			MethodName: "getLastMajorCompactionTimestampForRegion",
			Handler:    _MasterService_GetLastMajorCompactionTimestampForRegion_Handler,
		},
		{
			MethodName: "getProcedureResult",
			Handler:    _MasterService_GetProcedureResult_Handler,
		},
		{
			MethodName: "getSecurityCapabilities",
			Handler:    _MasterService_GetSecurityCapabilities_Handler,
		},
		{
			MethodName: "AbortProcedure",
			Handler:    _MasterService_AbortProcedure_Handler,
		},
		{
			MethodName: "GetProcedures",
			Handler:    _MasterService_GetProcedures_Handler,
		},
		{
			MethodName: "GetLocks",
			Handler:    _MasterService_GetLocks_Handler,
		},
		{
			MethodName: "AddReplicationPeer",
			Handler:    _MasterService_AddReplicationPeer_Handler,
		},
		{
			MethodName: "RemoveReplicationPeer",
			Handler:    _MasterService_RemoveReplicationPeer_Handler,
		},
		{
			MethodName: "EnableReplicationPeer",
			Handler:    _MasterService_EnableReplicationPeer_Handler,
		},
		{
			MethodName: "DisableReplicationPeer",
			Handler:    _MasterService_DisableReplicationPeer_Handler,
		},
		{
			MethodName: "GetReplicationPeerConfig",
			Handler:    _MasterService_GetReplicationPeerConfig_Handler,
		},
		{
			MethodName: "UpdateReplicationPeerConfig",
			Handler:    _MasterService_UpdateReplicationPeerConfig_Handler,
		},
		{
			MethodName: "ListReplicationPeers",
			Handler:    _MasterService_ListReplicationPeers_Handler,
		},
		{
			MethodName: "ListDecommissionedRegionServers",
			Handler:    _MasterService_ListDecommissionedRegionServers_Handler,
		},
		{
			MethodName: "DecommissionRegionServers",
			Handler:    _MasterService_DecommissionRegionServers_Handler,
		},
		{
			MethodName: "RecommissionRegionServer",
			Handler:    _MasterService_RecommissionRegionServer_Handler,
		},
		{
			MethodName: "GetSpaceQuotaRegionSizes",
			Handler:    _MasterService_GetSpaceQuotaRegionSizes_Handler,
		},
		{
			MethodName: "GetQuotaStates",
			Handler:    _MasterService_GetQuotaStates_Handler,
		},
		{
			MethodName: "ClearDeadServers",
			Handler:    _MasterService_ClearDeadServers_Handler,
		},
		{
			MethodName: "SwitchRpcThrottle",
			Handler:    _MasterService_SwitchRpcThrottle_Handler,
		},
		{
			MethodName: "IsRpcThrottleEnabled",
			Handler:    _MasterService_IsRpcThrottleEnabled_Handler,
		},
		{
			MethodName: "SwitchExceedThrottleQuota",
			Handler:    _MasterService_SwitchExceedThrottleQuota_Handler,
		},
		{
			MethodName: "Grant",
			Handler:    _MasterService_Grant_Handler,
		},
		{
			MethodName: "Revoke",
			Handler:    _MasterService_Revoke_Handler,
		},
		{
			MethodName: "GetUserPermissions",
			Handler:    _MasterService_GetUserPermissions_Handler,
		},
		{
			MethodName: "HasUserPermissions",
			Handler:    _MasterService_HasUserPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Master.proto",
}

// HbckServiceClient is the client API for HbckService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HbckServiceClient interface {
	//* Update state of the table in meta only
	SetTableStateInMeta(ctx context.Context, in *SetTableStateInMetaRequest, opts ...grpc.CallOption) (*GetTableStateResponse, error)
	//*
	// Assign regions.
	// Like Admin's assign but works even if the
	// Master is initializing. Also allows bulk'ing up
	// assigns rather than one region at a time.
	Assigns(ctx context.Context, in *AssignsRequest, opts ...grpc.CallOption) (*AssignsResponse, error)
	//*
	// Unassign regions
	// Like Admin's unssign but works even if the
	// Master is initializing. Also allows bulk'ing up
	// assigns rather than one region at a time.
	Unassigns(ctx context.Context, in *UnassignsRequest, opts ...grpc.CallOption) (*UnassignsResponse, error)
	//* Bypass a procedure to completion, procedure is completed but no actual work is done
	BypassProcedure(ctx context.Context, in *BypassProcedureRequest, opts ...grpc.CallOption) (*BypassProcedureResponse, error)
	//* Schedule a ServerCrashProcedure to help recover a crash server
	ScheduleServerCrashProcedure(ctx context.Context, in *ScheduleServerCrashProcedureRequest, opts ...grpc.CallOption) (*ScheduleServerCrashProcedureResponse, error)
}

type hbckServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHbckServiceClient(cc grpc.ClientConnInterface) HbckServiceClient {
	return &hbckServiceClient{cc}
}

func (c *hbckServiceClient) SetTableStateInMeta(ctx context.Context, in *SetTableStateInMetaRequest, opts ...grpc.CallOption) (*GetTableStateResponse, error) {
	out := new(GetTableStateResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.HbckService/SetTableStateInMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hbckServiceClient) Assigns(ctx context.Context, in *AssignsRequest, opts ...grpc.CallOption) (*AssignsResponse, error) {
	out := new(AssignsResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.HbckService/Assigns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hbckServiceClient) Unassigns(ctx context.Context, in *UnassignsRequest, opts ...grpc.CallOption) (*UnassignsResponse, error) {
	out := new(UnassignsResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.HbckService/Unassigns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hbckServiceClient) BypassProcedure(ctx context.Context, in *BypassProcedureRequest, opts ...grpc.CallOption) (*BypassProcedureResponse, error) {
	out := new(BypassProcedureResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.HbckService/BypassProcedure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hbckServiceClient) ScheduleServerCrashProcedure(ctx context.Context, in *ScheduleServerCrashProcedureRequest, opts ...grpc.CallOption) (*ScheduleServerCrashProcedureResponse, error) {
	out := new(ScheduleServerCrashProcedureResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.HbckService/ScheduleServerCrashProcedure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HbckServiceServer is the server API for HbckService service.
type HbckServiceServer interface {
	//* Update state of the table in meta only
	SetTableStateInMeta(context.Context, *SetTableStateInMetaRequest) (*GetTableStateResponse, error)
	//*
	// Assign regions.
	// Like Admin's assign but works even if the
	// Master is initializing. Also allows bulk'ing up
	// assigns rather than one region at a time.
	Assigns(context.Context, *AssignsRequest) (*AssignsResponse, error)
	//*
	// Unassign regions
	// Like Admin's unssign but works even if the
	// Master is initializing. Also allows bulk'ing up
	// assigns rather than one region at a time.
	Unassigns(context.Context, *UnassignsRequest) (*UnassignsResponse, error)
	//* Bypass a procedure to completion, procedure is completed but no actual work is done
	BypassProcedure(context.Context, *BypassProcedureRequest) (*BypassProcedureResponse, error)
	//* Schedule a ServerCrashProcedure to help recover a crash server
	ScheduleServerCrashProcedure(context.Context, *ScheduleServerCrashProcedureRequest) (*ScheduleServerCrashProcedureResponse, error)
}

// UnimplementedHbckServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHbckServiceServer struct {
}

func (*UnimplementedHbckServiceServer) SetTableStateInMeta(context.Context, *SetTableStateInMetaRequest) (*GetTableStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTableStateInMeta not implemented")
}
func (*UnimplementedHbckServiceServer) Assigns(context.Context, *AssignsRequest) (*AssignsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assigns not implemented")
}
func (*UnimplementedHbckServiceServer) Unassigns(context.Context, *UnassignsRequest) (*UnassignsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unassigns not implemented")
}
func (*UnimplementedHbckServiceServer) BypassProcedure(context.Context, *BypassProcedureRequest) (*BypassProcedureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BypassProcedure not implemented")
}
func (*UnimplementedHbckServiceServer) ScheduleServerCrashProcedure(context.Context, *ScheduleServerCrashProcedureRequest) (*ScheduleServerCrashProcedureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleServerCrashProcedure not implemented")
}

func RegisterHbckServiceServer(s *grpc.Server, srv HbckServiceServer) {
	s.RegisterService(&_HbckService_serviceDesc, srv)
}

func _HbckService_SetTableStateInMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTableStateInMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HbckServiceServer).SetTableStateInMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.HbckService/SetTableStateInMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HbckServiceServer).SetTableStateInMeta(ctx, req.(*SetTableStateInMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HbckService_Assigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HbckServiceServer).Assigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.HbckService/Assigns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HbckServiceServer).Assigns(ctx, req.(*AssignsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HbckService_Unassigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HbckServiceServer).Unassigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.HbckService/Unassigns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HbckServiceServer).Unassigns(ctx, req.(*UnassignsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HbckService_BypassProcedure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BypassProcedureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HbckServiceServer).BypassProcedure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.HbckService/BypassProcedure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HbckServiceServer).BypassProcedure(ctx, req.(*BypassProcedureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HbckService_ScheduleServerCrashProcedure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleServerCrashProcedureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HbckServiceServer).ScheduleServerCrashProcedure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.HbckService/ScheduleServerCrashProcedure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HbckServiceServer).ScheduleServerCrashProcedure(ctx, req.(*ScheduleServerCrashProcedureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HbckService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hbase.pb.HbckService",
	HandlerType: (*HbckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetTableStateInMeta",
			Handler:    _HbckService_SetTableStateInMeta_Handler,
		},
		{
			MethodName: "Assigns",
			Handler:    _HbckService_Assigns_Handler,
		},
		{
			MethodName: "Unassigns",
			Handler:    _HbckService_Unassigns_Handler,
		},
		{
			MethodName: "BypassProcedure",
			Handler:    _HbckService_BypassProcedure_Handler,
		},
		{
			MethodName: "ScheduleServerCrashProcedure",
			Handler:    _HbckService_ScheduleServerCrashProcedure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Master.proto",
}
