//*
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-rc.1
// 	protoc        v3.17.3
// source: RegionServerStatus.proto

// This file contains protocol buffers that are used for RegionServerStatusProtocol.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegionStateTransition_TransitionCode int32

const (
	RegionStateTransition_OPENED      RegionStateTransition_TransitionCode = 0
	RegionStateTransition_FAILED_OPEN RegionStateTransition_TransitionCode = 1
	//* No failed_close, in which case region server will abort
	RegionStateTransition_CLOSED RegionStateTransition_TransitionCode = 2
	//* Ask master for ok to split/merge region(s)
	RegionStateTransition_READY_TO_SPLIT RegionStateTransition_TransitionCode = 3
	RegionStateTransition_READY_TO_MERGE RegionStateTransition_TransitionCode = 4
	//* We used to have PONR enums for split and merge in here occupying
	//positions 5 and 6 but they have since been removed. Do not reuse these
	//indices
	RegionStateTransition_SPLIT          RegionStateTransition_TransitionCode = 7
	RegionStateTransition_MERGED         RegionStateTransition_TransitionCode = 8
	RegionStateTransition_SPLIT_REVERTED RegionStateTransition_TransitionCode = 9
	RegionStateTransition_MERGE_REVERTED RegionStateTransition_TransitionCode = 10
)

// Enum value maps for RegionStateTransition_TransitionCode.
var (
	RegionStateTransition_TransitionCode_name = map[int32]string{
		0:  "OPENED",
		1:  "FAILED_OPEN",
		2:  "CLOSED",
		3:  "READY_TO_SPLIT",
		4:  "READY_TO_MERGE",
		7:  "SPLIT",
		8:  "MERGED",
		9:  "SPLIT_REVERTED",
		10: "MERGE_REVERTED",
	}
	RegionStateTransition_TransitionCode_value = map[string]int32{
		"OPENED":         0,
		"FAILED_OPEN":    1,
		"CLOSED":         2,
		"READY_TO_SPLIT": 3,
		"READY_TO_MERGE": 4,
		"SPLIT":          7,
		"MERGED":         8,
		"SPLIT_REVERTED": 9,
		"MERGE_REVERTED": 10,
	}
)

func (x RegionStateTransition_TransitionCode) Enum() *RegionStateTransition_TransitionCode {
	p := new(RegionStateTransition_TransitionCode)
	*p = x
	return p
}

func (x RegionStateTransition_TransitionCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegionStateTransition_TransitionCode) Descriptor() protoreflect.EnumDescriptor {
	return file_RegionServerStatus_proto_enumTypes[0].Descriptor()
}

func (RegionStateTransition_TransitionCode) Type() protoreflect.EnumType {
	return &file_RegionServerStatus_proto_enumTypes[0]
}

func (x RegionStateTransition_TransitionCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RegionStateTransition_TransitionCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RegionStateTransition_TransitionCode(num)
	return nil
}

// Deprecated: Use RegionStateTransition_TransitionCode.Descriptor instead.
func (RegionStateTransition_TransitionCode) EnumDescriptor() ([]byte, []int) {
	return file_RegionServerStatus_proto_rawDescGZIP(), []int{8, 0}
}

type RemoteProcedureResult_Status int32

const (
	RemoteProcedureResult_SUCCESS RemoteProcedureResult_Status = 1
	RemoteProcedureResult_ERROR   RemoteProcedureResult_Status = 2
)

// Enum value maps for RemoteProcedureResult_Status.
var (
	RemoteProcedureResult_Status_name = map[int32]string{
		1: "SUCCESS",
		2: "ERROR",
	}
	RemoteProcedureResult_Status_value = map[string]int32{
		"SUCCESS": 1,
		"ERROR":   2,
	}
)

func (x RemoteProcedureResult_Status) Enum() *RemoteProcedureResult_Status {
	p := new(RemoteProcedureResult_Status)
	*p = x
	return p
}

func (x RemoteProcedureResult_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoteProcedureResult_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_RegionServerStatus_proto_enumTypes[1].Descriptor()
}

func (RemoteProcedureResult_Status) Type() protoreflect.EnumType {
	return &file_RegionServerStatus_proto_enumTypes[1]
}

func (x RemoteProcedureResult_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RemoteProcedureResult_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RemoteProcedureResult_Status(num)
	return nil
}

// Deprecated: Use RemoteProcedureResult_Status.Descriptor instead.
func (RemoteProcedureResult_Status) EnumDescriptor() ([]byte, []int) {
	return file_RegionServerStatus_proto_rawDescGZIP(), []int{14, 0}
}

type RegionServerStartupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* Port number this regionserver is up on
	Port *uint32 `protobuf:"varint,1,req,name=port" json:"port,omitempty"`
	//* This servers' startcode
	ServerStartCode *uint64 `protobuf:"varint,2,req,name=server_start_code,json=serverStartCode" json:"server_start_code,omitempty"`
	//* Current time of the region server in ms
	ServerCurrentTime *uint64 `protobuf:"varint,3,req,name=server_current_time,json=serverCurrentTime" json:"server_current_time,omitempty"`
	//* hostname for region server, optional
	UseThisHostnameInstead *string `protobuf:"bytes,4,opt,name=use_this_hostname_instead,json=useThisHostnameInstead" json:"use_this_hostname_instead,omitempty"`
}

func (x *RegionServerStartupRequest) Reset() {
	*x = RegionServerStartupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RegionServerStatus_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionServerStartupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionServerStartupRequest) ProtoMessage() {}

func (x *RegionServerStartupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RegionServerStatus_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionServerStartupRequest.ProtoReflect.Descriptor instead.
func (*RegionServerStartupRequest) Descriptor() ([]byte, []int) {
	return file_RegionServerStatus_proto_rawDescGZIP(), []int{0}
}

func (x *RegionServerStartupRequest) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *RegionServerStartupRequest) GetServerStartCode() uint64 {
	if x != nil && x.ServerStartCode != nil {
		return *x.ServerStartCode
	}
	return 0
}

func (x *RegionServerStartupRequest) GetServerCurrentTime() uint64 {
	if x != nil && x.ServerCurrentTime != nil {
		return *x.ServerCurrentTime
	}
	return 0
}

func (x *RegionServerStartupRequest) GetUseThisHostnameInstead() string {
	if x != nil && x.UseThisHostnameInstead != nil {
		return *x.UseThisHostnameInstead
	}
	return ""
}

type RegionServerStartupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Configuration for the regionserver to use: e.g. filesystem,
	// hbase rootdir, the hostname to use creating the RegionServer ServerName,
	// etc
	MapEntries []*NameStringPair `protobuf:"bytes,1,rep,name=map_entries,json=mapEntries" json:"map_entries,omitempty"`
}

func (x *RegionServerStartupResponse) Reset() {
	*x = RegionServerStartupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RegionServerStatus_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionServerStartupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionServerStartupResponse) ProtoMessage() {}

func (x *RegionServerStartupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RegionServerStatus_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionServerStartupResponse.ProtoReflect.Descriptor instead.
func (*RegionServerStartupResponse) Descriptor() ([]byte, []int) {
	return file_RegionServerStatus_proto_rawDescGZIP(), []int{1}
}

func (x *RegionServerStartupResponse) GetMapEntries() []*NameStringPair {
	if x != nil {
		return x.MapEntries
	}
	return nil
}

type RegionServerReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server *ServerName `protobuf:"bytes,1,req,name=server" json:"server,omitempty"`
	//* load the server is under
	Load *ServerLoad `protobuf:"bytes,2,opt,name=load" json:"load,omitempty"`
}

func (x *RegionServerReportRequest) Reset() {
	*x = RegionServerReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RegionServerStatus_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionServerReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionServerReportRequest) ProtoMessage() {}

func (x *RegionServerReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RegionServerStatus_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionServerReportRequest.ProtoReflect.Descriptor instead.
func (*RegionServerReportRequest) Descriptor() ([]byte, []int) {
	return file_RegionServerStatus_proto_rawDescGZIP(), []int{2}
}

func (x *RegionServerReportRequest) GetServer() *ServerName {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *RegionServerReportRequest) GetLoad() *ServerLoad {
	if x != nil {
		return x.Load
	}
	return nil
}

type RegionServerReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegionServerReportResponse) Reset() {
	*x = RegionServerReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RegionServerStatus_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionServerReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionServerReportResponse) ProtoMessage() {}

func (x *RegionServerReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RegionServerStatus_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionServerReportResponse.ProtoReflect.Descriptor instead.
func (*RegionServerReportResponse) Descriptor() ([]byte, []int) {
	return file_RegionServerStatus_proto_rawDescGZIP(), []int{3}
}

type ReportRSFatalErrorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* name of the server experiencing the error
	Server *ServerName `protobuf:"bytes,1,req,name=server" json:"server,omitempty"`
	//* informative text to expose in the master logs and UI
	ErrorMessage *string `protobuf:"bytes,2,req,name=error_message,json=errorMessage" json:"error_message,omitempty"`
}

func (x *ReportRSFatalErrorRequest) Reset() {
	*x = ReportRSFatalErrorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RegionServerStatus_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportRSFatalErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportRSFatalErrorRequest) ProtoMessage() {}

func (x *ReportRSFatalErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RegionServerStatus_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportRSFatalErrorRequest.ProtoReflect.Descriptor instead.
func (*ReportRSFatalErrorRequest) Descriptor() ([]byte, []int) {
	return file_RegionServerStatus_proto_rawDescGZIP(), []int{4}
}

func (x *ReportRSFatalErrorRequest) GetServer() *ServerName {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *ReportRSFatalErrorRequest) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

type ReportRSFatalErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportRSFatalErrorResponse) Reset() {
	*x = ReportRSFatalErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RegionServerStatus_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportRSFatalErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportRSFatalErrorResponse) ProtoMessage() {}

func (x *ReportRSFatalErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RegionServerStatus_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportRSFatalErrorResponse.ProtoReflect.Descriptor instead.
func (*ReportRSFatalErrorResponse) Descriptor() ([]byte, []int) {
	return file_RegionServerStatus_proto_rawDescGZIP(), []int{5}
}

type GetLastFlushedSequenceIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* region name
	RegionName []byte `protobuf:"bytes,1,req,name=region_name,json=regionName" json:"region_name,omitempty"`
}

func (x *GetLastFlushedSequenceIdRequest) Reset() {
	*x = GetLastFlushedSequenceIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RegionServerStatus_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastFlushedSequenceIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastFlushedSequenceIdRequest) ProtoMessage() {}

func (x *GetLastFlushedSequenceIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RegionServerStatus_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastFlushedSequenceIdRequest.ProtoReflect.Descriptor instead.
func (*GetLastFlushedSequenceIdRequest) Descriptor() ([]byte, []int) {
	return file_RegionServerStatus_proto_rawDescGZIP(), []int{6}
}

func (x *GetLastFlushedSequenceIdRequest) GetRegionName() []byte {
	if x != nil {
		return x.RegionName
	}
	return nil
}

type GetLastFlushedSequenceIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* the last WAL sequence id flushed from MemStore to HFile for the region
	LastFlushedSequenceId *uint64 `protobuf:"varint,1,req,name=last_flushed_sequence_id,json=lastFlushedSequenceId" json:"last_flushed_sequence_id,omitempty"`
	//* the last WAL sequence id flushed from MemStore to HFile for stores of the region
	StoreLastFlushedSequenceId []*StoreSequenceId `protobuf:"bytes,2,rep,name=store_last_flushed_sequence_id,json=storeLastFlushedSequenceId" json:"store_last_flushed_sequence_id,omitempty"`
}

func (x *GetLastFlushedSequenceIdResponse) Reset() {
	*x = GetLastFlushedSequenceIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RegionServerStatus_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastFlushedSequenceIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastFlushedSequenceIdResponse) ProtoMessage() {}

func (x *GetLastFlushedSequenceIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RegionServerStatus_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastFlushedSequenceIdResponse.ProtoReflect.Descriptor instead.
func (*GetLastFlushedSequenceIdResponse) Descriptor() ([]byte, []int) {
	return file_RegionServerStatus_proto_rawDescGZIP(), []int{7}
}

func (x *GetLastFlushedSequenceIdResponse) GetLastFlushedSequenceId() uint64 {
	if x != nil && x.LastFlushedSequenceId != nil {
		return *x.LastFlushedSequenceId
	}
	return 0
}

func (x *GetLastFlushedSequenceIdResponse) GetStoreLastFlushedSequenceId() []*StoreSequenceId {
	if x != nil {
		return x.StoreLastFlushedSequenceId
	}
	return nil
}

type RegionStateTransition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransitionCode *RegionStateTransition_TransitionCode `protobuf:"varint,1,req,name=transition_code,json=transitionCode,enum=hbase.pb.RegionStateTransition_TransitionCode" json:"transition_code,omitempty"`
	//* Mutliple regions are involved during merging/splitting
	RegionInfo []*RegionInfo `protobuf:"bytes,2,rep,name=region_info,json=regionInfo" json:"region_info,omitempty"`
	//* For newly opened region, the open seq num is needed
	OpenSeqNum *uint64 `protobuf:"varint,3,opt,name=open_seq_num,json=openSeqNum" json:"open_seq_num,omitempty"`
	ProcId     []int64 `protobuf:"varint,4,rep,name=proc_id,json=procId" json:"proc_id,omitempty"`
}

func (x *RegionStateTransition) Reset() {
	*x = RegionStateTransition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RegionServerStatus_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionStateTransition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionStateTransition) ProtoMessage() {}

func (x *RegionStateTransition) ProtoReflect() protoreflect.Message {
	mi := &file_RegionServerStatus_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionStateTransition.ProtoReflect.Descriptor instead.
func (*RegionStateTransition) Descriptor() ([]byte, []int) {
	return file_RegionServerStatus_proto_rawDescGZIP(), []int{8}
}

func (x *RegionStateTransition) GetTransitionCode() RegionStateTransition_TransitionCode {
	if x != nil && x.TransitionCode != nil {
		return *x.TransitionCode
	}
	return RegionStateTransition_OPENED
}

func (x *RegionStateTransition) GetRegionInfo() []*RegionInfo {
	if x != nil {
		return x.RegionInfo
	}
	return nil
}

func (x *RegionStateTransition) GetOpenSeqNum() uint64 {
	if x != nil && x.OpenSeqNum != nil {
		return *x.OpenSeqNum
	}
	return 0
}

func (x *RegionStateTransition) GetProcId() []int64 {
	if x != nil {
		return x.ProcId
	}
	return nil
}

type ReportRegionStateTransitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* This region server's server name
	Server     *ServerName              `protobuf:"bytes,1,req,name=server" json:"server,omitempty"`
	Transition []*RegionStateTransition `protobuf:"bytes,2,rep,name=transition" json:"transition,omitempty"`
}

func (x *ReportRegionStateTransitionRequest) Reset() {
	*x = ReportRegionStateTransitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RegionServerStatus_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportRegionStateTransitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportRegionStateTransitionRequest) ProtoMessage() {}

func (x *ReportRegionStateTransitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RegionServerStatus_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportRegionStateTransitionRequest.ProtoReflect.Descriptor instead.
func (*ReportRegionStateTransitionRequest) Descriptor() ([]byte, []int) {
	return file_RegionServerStatus_proto_rawDescGZIP(), []int{9}
}

func (x *ReportRegionStateTransitionRequest) GetServer() *ServerName {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *ReportRegionStateTransitionRequest) GetTransition() []*RegionStateTransition {
	if x != nil {
		return x.Transition
	}
	return nil
}

type ReportRegionStateTransitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* Error message if failed to update the region state
	ErrorMessage *string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
}

func (x *ReportRegionStateTransitionResponse) Reset() {
	*x = ReportRegionStateTransitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RegionServerStatus_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportRegionStateTransitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportRegionStateTransitionResponse) ProtoMessage() {}

func (x *ReportRegionStateTransitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RegionServerStatus_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportRegionStateTransitionResponse.ProtoReflect.Descriptor instead.
func (*ReportRegionStateTransitionResponse) Descriptor() ([]byte, []int) {
	return file_RegionServerStatus_proto_rawDescGZIP(), []int{10}
}

func (x *ReportRegionStateTransitionResponse) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

type RegionSpaceUse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionInfo *RegionInfo `protobuf:"bytes,1,opt,name=region_info,json=regionInfo" json:"region_info,omitempty"`  // A region identifier
	RegionSize *uint64     `protobuf:"varint,2,opt,name=region_size,json=regionSize" json:"region_size,omitempty"` // The size in bytes of the region
}

func (x *RegionSpaceUse) Reset() {
	*x = RegionSpaceUse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RegionServerStatus_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionSpaceUse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionSpaceUse) ProtoMessage() {}

func (x *RegionSpaceUse) ProtoReflect() protoreflect.Message {
	mi := &file_RegionServerStatus_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionSpaceUse.ProtoReflect.Descriptor instead.
func (*RegionSpaceUse) Descriptor() ([]byte, []int) {
	return file_RegionServerStatus_proto_rawDescGZIP(), []int{11}
}

func (x *RegionSpaceUse) GetRegionInfo() *RegionInfo {
	if x != nil {
		return x.RegionInfo
	}
	return nil
}

func (x *RegionSpaceUse) GetRegionSize() uint64 {
	if x != nil && x.RegionSize != nil {
		return *x.RegionSize
	}
	return 0
}

//*
// Reports filesystem usage for regions.
type RegionSpaceUseReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceUse []*RegionSpaceUse `protobuf:"bytes,1,rep,name=space_use,json=spaceUse" json:"space_use,omitempty"`
}

func (x *RegionSpaceUseReportRequest) Reset() {
	*x = RegionSpaceUseReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RegionServerStatus_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionSpaceUseReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionSpaceUseReportRequest) ProtoMessage() {}

func (x *RegionSpaceUseReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RegionServerStatus_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionSpaceUseReportRequest.ProtoReflect.Descriptor instead.
func (*RegionSpaceUseReportRequest) Descriptor() ([]byte, []int) {
	return file_RegionServerStatus_proto_rawDescGZIP(), []int{12}
}

func (x *RegionSpaceUseReportRequest) GetSpaceUse() []*RegionSpaceUse {
	if x != nil {
		return x.SpaceUse
	}
	return nil
}

type RegionSpaceUseReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegionSpaceUseReportResponse) Reset() {
	*x = RegionSpaceUseReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RegionServerStatus_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionSpaceUseReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionSpaceUseReportResponse) ProtoMessage() {}

func (x *RegionSpaceUseReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RegionServerStatus_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionSpaceUseReportResponse.ProtoReflect.Descriptor instead.
func (*RegionSpaceUseReportResponse) Descriptor() ([]byte, []int) {
	return file_RegionServerStatus_proto_rawDescGZIP(), []int{13}
}

type RemoteProcedureResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcId *uint64                       `protobuf:"varint,1,req,name=proc_id,json=procId" json:"proc_id,omitempty"`
	Status *RemoteProcedureResult_Status `protobuf:"varint,2,req,name=status,enum=hbase.pb.RemoteProcedureResult_Status" json:"status,omitempty"`
	Error  *ForeignExceptionMessage      `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (x *RemoteProcedureResult) Reset() {
	*x = RemoteProcedureResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RegionServerStatus_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteProcedureResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteProcedureResult) ProtoMessage() {}

func (x *RemoteProcedureResult) ProtoReflect() protoreflect.Message {
	mi := &file_RegionServerStatus_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteProcedureResult.ProtoReflect.Descriptor instead.
func (*RemoteProcedureResult) Descriptor() ([]byte, []int) {
	return file_RegionServerStatus_proto_rawDescGZIP(), []int{14}
}

func (x *RemoteProcedureResult) GetProcId() uint64 {
	if x != nil && x.ProcId != nil {
		return *x.ProcId
	}
	return 0
}

func (x *RemoteProcedureResult) GetStatus() RemoteProcedureResult_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return RemoteProcedureResult_SUCCESS
}

func (x *RemoteProcedureResult) GetError() *ForeignExceptionMessage {
	if x != nil {
		return x.Error
	}
	return nil
}

type ReportProcedureDoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*RemoteProcedureResult `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (x *ReportProcedureDoneRequest) Reset() {
	*x = ReportProcedureDoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RegionServerStatus_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportProcedureDoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportProcedureDoneRequest) ProtoMessage() {}

func (x *ReportProcedureDoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RegionServerStatus_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportProcedureDoneRequest.ProtoReflect.Descriptor instead.
func (*ReportProcedureDoneRequest) Descriptor() ([]byte, []int) {
	return file_RegionServerStatus_proto_rawDescGZIP(), []int{15}
}

func (x *ReportProcedureDoneRequest) GetResult() []*RemoteProcedureResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReportProcedureDoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportProcedureDoneResponse) Reset() {
	*x = ReportProcedureDoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RegionServerStatus_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportProcedureDoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportProcedureDoneResponse) ProtoMessage() {}

func (x *ReportProcedureDoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RegionServerStatus_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportProcedureDoneResponse.ProtoReflect.Descriptor instead.
func (*ReportProcedureDoneResponse) Descriptor() ([]byte, []int) {
	return file_RegionServerStatus_proto_rawDescGZIP(), []int{16}
}

var File_RegionServerStatus_proto protoreflect.FileDescriptor

var file_RegionServerStatus_proto_rawDesc = []byte{
	0x0a, 0x18, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x1a, 0x0b, 0x48, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x01, 0x0a, 0x1a,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x75, 0x73,
	0x65, 0x5f, 0x74, 0x68, 0x69, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x75,
	0x73, 0x65, 0x54, 0x68, 0x69, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x65, 0x61, 0x64, 0x22, 0x58, 0x0a, 0x1b, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22,
	0x73, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x04,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x6e, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x53, 0x46, 0x61,
	0x74, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x53, 0x46, 0x61,
	0x74, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x42, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68,
	0x65, 0x64, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x15, 0x6c, 0x61, 0x73,
	0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x5d, 0x0a, 0x1e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x1a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x85, 0x03, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06,
	0x70, 0x72, 0x6f, 0x63, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x45,
	0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x53,
	0x50, 0x4c, 0x49, 0x54, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x54, 0x4f, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x50,
	0x4c, 0x49, 0x54, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x44, 0x10,
	0x08, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x52,
	0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x52,
	0x45, 0x56, 0x45, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x22, 0x93, 0x01, 0x0a, 0x22, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3f,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x4a, 0x0a, 0x23, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x68, 0x0a, 0x0e, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x54, 0x0a, 0x1b, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73,
	0x65, 0x52, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x15,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x3e,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0x55, 0x0a, 0x1a, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x1d, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0xfb, 0x05, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a,
	0x13, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x75, 0x70, 0x12, 0x24, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5f, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x53, 0x46, 0x61,
	0x74, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x53, 0x46, 0x61, 0x74, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x53, 0x46, 0x61, 0x74, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x29, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x73, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x75,
	0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x65, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x12, 0x25, 0x2e, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x13, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x6e, 0x65,
	0x12, 0x24, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x5c, 0x0a,
	0x31, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x68, 0x61, 0x64, 0x6f,
	0x6f, 0x70, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x68, 0x61, 0x64, 0x65, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x18, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x48, 0x01, 0x5a, 0x05,
	0x2e, 0x2e, 0x2f, 0x70, 0x62, 0x88, 0x01, 0x01, 0xa0, 0x01, 0x01,
}

var (
	file_RegionServerStatus_proto_rawDescOnce sync.Once
	file_RegionServerStatus_proto_rawDescData = file_RegionServerStatus_proto_rawDesc
)

func file_RegionServerStatus_proto_rawDescGZIP() []byte {
	file_RegionServerStatus_proto_rawDescOnce.Do(func() {
		file_RegionServerStatus_proto_rawDescData = protoimpl.X.CompressGZIP(file_RegionServerStatus_proto_rawDescData)
	})
	return file_RegionServerStatus_proto_rawDescData
}

var file_RegionServerStatus_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_RegionServerStatus_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_RegionServerStatus_proto_goTypes = []interface{}{
	(RegionStateTransition_TransitionCode)(0),   // 0: hbase.pb.RegionStateTransition.TransitionCode
	(RemoteProcedureResult_Status)(0),           // 1: hbase.pb.RemoteProcedureResult.Status
	(*RegionServerStartupRequest)(nil),          // 2: hbase.pb.RegionServerStartupRequest
	(*RegionServerStartupResponse)(nil),         // 3: hbase.pb.RegionServerStartupResponse
	(*RegionServerReportRequest)(nil),           // 4: hbase.pb.RegionServerReportRequest
	(*RegionServerReportResponse)(nil),          // 5: hbase.pb.RegionServerReportResponse
	(*ReportRSFatalErrorRequest)(nil),           // 6: hbase.pb.ReportRSFatalErrorRequest
	(*ReportRSFatalErrorResponse)(nil),          // 7: hbase.pb.ReportRSFatalErrorResponse
	(*GetLastFlushedSequenceIdRequest)(nil),     // 8: hbase.pb.GetLastFlushedSequenceIdRequest
	(*GetLastFlushedSequenceIdResponse)(nil),    // 9: hbase.pb.GetLastFlushedSequenceIdResponse
	(*RegionStateTransition)(nil),               // 10: hbase.pb.RegionStateTransition
	(*ReportRegionStateTransitionRequest)(nil),  // 11: hbase.pb.ReportRegionStateTransitionRequest
	(*ReportRegionStateTransitionResponse)(nil), // 12: hbase.pb.ReportRegionStateTransitionResponse
	(*RegionSpaceUse)(nil),                      // 13: hbase.pb.RegionSpaceUse
	(*RegionSpaceUseReportRequest)(nil),         // 14: hbase.pb.RegionSpaceUseReportRequest
	(*RegionSpaceUseReportResponse)(nil),        // 15: hbase.pb.RegionSpaceUseReportResponse
	(*RemoteProcedureResult)(nil),               // 16: hbase.pb.RemoteProcedureResult
	(*ReportProcedureDoneRequest)(nil),          // 17: hbase.pb.ReportProcedureDoneRequest
	(*ReportProcedureDoneResponse)(nil),         // 18: hbase.pb.ReportProcedureDoneResponse
	(*NameStringPair)(nil),                      // 19: hbase.pb.NameStringPair
	(*ServerName)(nil),                          // 20: hbase.pb.ServerName
	(*ServerLoad)(nil),                          // 21: hbase.pb.ServerLoad
	(*StoreSequenceId)(nil),                     // 22: hbase.pb.StoreSequenceId
	(*RegionInfo)(nil),                          // 23: hbase.pb.RegionInfo
	(*ForeignExceptionMessage)(nil),             // 24: hbase.pb.ForeignExceptionMessage
}
var file_RegionServerStatus_proto_depIdxs = []int32{
	19, // 0: hbase.pb.RegionServerStartupResponse.map_entries:type_name -> hbase.pb.NameStringPair
	20, // 1: hbase.pb.RegionServerReportRequest.server:type_name -> hbase.pb.ServerName
	21, // 2: hbase.pb.RegionServerReportRequest.load:type_name -> hbase.pb.ServerLoad
	20, // 3: hbase.pb.ReportRSFatalErrorRequest.server:type_name -> hbase.pb.ServerName
	22, // 4: hbase.pb.GetLastFlushedSequenceIdResponse.store_last_flushed_sequence_id:type_name -> hbase.pb.StoreSequenceId
	0,  // 5: hbase.pb.RegionStateTransition.transition_code:type_name -> hbase.pb.RegionStateTransition.TransitionCode
	23, // 6: hbase.pb.RegionStateTransition.region_info:type_name -> hbase.pb.RegionInfo
	20, // 7: hbase.pb.ReportRegionStateTransitionRequest.server:type_name -> hbase.pb.ServerName
	10, // 8: hbase.pb.ReportRegionStateTransitionRequest.transition:type_name -> hbase.pb.RegionStateTransition
	23, // 9: hbase.pb.RegionSpaceUse.region_info:type_name -> hbase.pb.RegionInfo
	13, // 10: hbase.pb.RegionSpaceUseReportRequest.space_use:type_name -> hbase.pb.RegionSpaceUse
	1,  // 11: hbase.pb.RemoteProcedureResult.status:type_name -> hbase.pb.RemoteProcedureResult.Status
	24, // 12: hbase.pb.RemoteProcedureResult.error:type_name -> hbase.pb.ForeignExceptionMessage
	16, // 13: hbase.pb.ReportProcedureDoneRequest.result:type_name -> hbase.pb.RemoteProcedureResult
	2,  // 14: hbase.pb.RegionServerStatusService.RegionServerStartup:input_type -> hbase.pb.RegionServerStartupRequest
	4,  // 15: hbase.pb.RegionServerStatusService.RegionServerReport:input_type -> hbase.pb.RegionServerReportRequest
	6,  // 16: hbase.pb.RegionServerStatusService.ReportRSFatalError:input_type -> hbase.pb.ReportRSFatalErrorRequest
	8,  // 17: hbase.pb.RegionServerStatusService.GetLastFlushedSequenceId:input_type -> hbase.pb.GetLastFlushedSequenceIdRequest
	11, // 18: hbase.pb.RegionServerStatusService.ReportRegionStateTransition:input_type -> hbase.pb.ReportRegionStateTransitionRequest
	14, // 19: hbase.pb.RegionServerStatusService.ReportRegionSpaceUse:input_type -> hbase.pb.RegionSpaceUseReportRequest
	17, // 20: hbase.pb.RegionServerStatusService.ReportProcedureDone:input_type -> hbase.pb.ReportProcedureDoneRequest
	3,  // 21: hbase.pb.RegionServerStatusService.RegionServerStartup:output_type -> hbase.pb.RegionServerStartupResponse
	5,  // 22: hbase.pb.RegionServerStatusService.RegionServerReport:output_type -> hbase.pb.RegionServerReportResponse
	7,  // 23: hbase.pb.RegionServerStatusService.ReportRSFatalError:output_type -> hbase.pb.ReportRSFatalErrorResponse
	9,  // 24: hbase.pb.RegionServerStatusService.GetLastFlushedSequenceId:output_type -> hbase.pb.GetLastFlushedSequenceIdResponse
	12, // 25: hbase.pb.RegionServerStatusService.ReportRegionStateTransition:output_type -> hbase.pb.ReportRegionStateTransitionResponse
	15, // 26: hbase.pb.RegionServerStatusService.ReportRegionSpaceUse:output_type -> hbase.pb.RegionSpaceUseReportResponse
	18, // 27: hbase.pb.RegionServerStatusService.ReportProcedureDone:output_type -> hbase.pb.ReportProcedureDoneResponse
	21, // [21:28] is the sub-list for method output_type
	14, // [14:21] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_RegionServerStatus_proto_init() }
func file_RegionServerStatus_proto_init() {
	if File_RegionServerStatus_proto != nil {
		return
	}
	file_HBase_proto_init()
	file_ClusterStatus_proto_init()
	file_ErrorHandling_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_RegionServerStatus_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionServerStartupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RegionServerStatus_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionServerStartupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RegionServerStatus_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionServerReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RegionServerStatus_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionServerReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RegionServerStatus_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportRSFatalErrorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RegionServerStatus_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportRSFatalErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RegionServerStatus_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastFlushedSequenceIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RegionServerStatus_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastFlushedSequenceIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RegionServerStatus_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionStateTransition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RegionServerStatus_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportRegionStateTransitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RegionServerStatus_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportRegionStateTransitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RegionServerStatus_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionSpaceUse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RegionServerStatus_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionSpaceUseReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RegionServerStatus_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionSpaceUseReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RegionServerStatus_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteProcedureResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RegionServerStatus_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportProcedureDoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RegionServerStatus_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportProcedureDoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_RegionServerStatus_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_RegionServerStatus_proto_goTypes,
		DependencyIndexes: file_RegionServerStatus_proto_depIdxs,
		EnumInfos:         file_RegionServerStatus_proto_enumTypes,
		MessageInfos:      file_RegionServerStatus_proto_msgTypes,
	}.Build()
	File_RegionServerStatus_proto = out.File
	file_RegionServerStatus_proto_rawDesc = nil
	file_RegionServerStatus_proto_goTypes = nil
	file_RegionServerStatus_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RegionServerStatusServiceClient is the client API for RegionServerStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegionServerStatusServiceClient interface {
	//* Called when a region server first starts.
	RegionServerStartup(ctx context.Context, in *RegionServerStartupRequest, opts ...grpc.CallOption) (*RegionServerStartupResponse, error)
	//* Called to report the load the RegionServer is under.
	RegionServerReport(ctx context.Context, in *RegionServerReportRequest, opts ...grpc.CallOption) (*RegionServerReportResponse, error)
	//*
	// Called by a region server to report a fatal error that is causing it to
	// abort.
	ReportRSFatalError(ctx context.Context, in *ReportRSFatalErrorRequest, opts ...grpc.CallOption) (*ReportRSFatalErrorResponse, error)
	//* Called to get the sequence id of the last MemStore entry flushed to an
	// HFile for a specified region. Used by the region server to speed up
	// log splitting.
	GetLastFlushedSequenceId(ctx context.Context, in *GetLastFlushedSequenceIdRequest, opts ...grpc.CallOption) (*GetLastFlushedSequenceIdResponse, error)
	//*
	// Called by a region server to report the progress of a region
	// transition. If the request fails, the transition should
	// be aborted.
	ReportRegionStateTransition(ctx context.Context, in *ReportRegionStateTransitionRequest, opts ...grpc.CallOption) (*ReportRegionStateTransitionResponse, error)
	//*
	// Reports Region filesystem space use
	ReportRegionSpaceUse(ctx context.Context, in *RegionSpaceUseReportRequest, opts ...grpc.CallOption) (*RegionSpaceUseReportResponse, error)
	ReportProcedureDone(ctx context.Context, in *ReportProcedureDoneRequest, opts ...grpc.CallOption) (*ReportProcedureDoneResponse, error)
}

type regionServerStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegionServerStatusServiceClient(cc grpc.ClientConnInterface) RegionServerStatusServiceClient {
	return &regionServerStatusServiceClient{cc}
}

func (c *regionServerStatusServiceClient) RegionServerStartup(ctx context.Context, in *RegionServerStartupRequest, opts ...grpc.CallOption) (*RegionServerStartupResponse, error) {
	out := new(RegionServerStartupResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.RegionServerStatusService/RegionServerStartup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionServerStatusServiceClient) RegionServerReport(ctx context.Context, in *RegionServerReportRequest, opts ...grpc.CallOption) (*RegionServerReportResponse, error) {
	out := new(RegionServerReportResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.RegionServerStatusService/RegionServerReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionServerStatusServiceClient) ReportRSFatalError(ctx context.Context, in *ReportRSFatalErrorRequest, opts ...grpc.CallOption) (*ReportRSFatalErrorResponse, error) {
	out := new(ReportRSFatalErrorResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.RegionServerStatusService/ReportRSFatalError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionServerStatusServiceClient) GetLastFlushedSequenceId(ctx context.Context, in *GetLastFlushedSequenceIdRequest, opts ...grpc.CallOption) (*GetLastFlushedSequenceIdResponse, error) {
	out := new(GetLastFlushedSequenceIdResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.RegionServerStatusService/GetLastFlushedSequenceId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionServerStatusServiceClient) ReportRegionStateTransition(ctx context.Context, in *ReportRegionStateTransitionRequest, opts ...grpc.CallOption) (*ReportRegionStateTransitionResponse, error) {
	out := new(ReportRegionStateTransitionResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.RegionServerStatusService/ReportRegionStateTransition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionServerStatusServiceClient) ReportRegionSpaceUse(ctx context.Context, in *RegionSpaceUseReportRequest, opts ...grpc.CallOption) (*RegionSpaceUseReportResponse, error) {
	out := new(RegionSpaceUseReportResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.RegionServerStatusService/ReportRegionSpaceUse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionServerStatusServiceClient) ReportProcedureDone(ctx context.Context, in *ReportProcedureDoneRequest, opts ...grpc.CallOption) (*ReportProcedureDoneResponse, error) {
	out := new(ReportProcedureDoneResponse)
	err := c.cc.Invoke(ctx, "/hbase.pb.RegionServerStatusService/ReportProcedureDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegionServerStatusServiceServer is the server API for RegionServerStatusService service.
type RegionServerStatusServiceServer interface {
	//* Called when a region server first starts.
	RegionServerStartup(context.Context, *RegionServerStartupRequest) (*RegionServerStartupResponse, error)
	//* Called to report the load the RegionServer is under.
	RegionServerReport(context.Context, *RegionServerReportRequest) (*RegionServerReportResponse, error)
	//*
	// Called by a region server to report a fatal error that is causing it to
	// abort.
	ReportRSFatalError(context.Context, *ReportRSFatalErrorRequest) (*ReportRSFatalErrorResponse, error)
	//* Called to get the sequence id of the last MemStore entry flushed to an
	// HFile for a specified region. Used by the region server to speed up
	// log splitting.
	GetLastFlushedSequenceId(context.Context, *GetLastFlushedSequenceIdRequest) (*GetLastFlushedSequenceIdResponse, error)
	//*
	// Called by a region server to report the progress of a region
	// transition. If the request fails, the transition should
	// be aborted.
	ReportRegionStateTransition(context.Context, *ReportRegionStateTransitionRequest) (*ReportRegionStateTransitionResponse, error)
	//*
	// Reports Region filesystem space use
	ReportRegionSpaceUse(context.Context, *RegionSpaceUseReportRequest) (*RegionSpaceUseReportResponse, error)
	ReportProcedureDone(context.Context, *ReportProcedureDoneRequest) (*ReportProcedureDoneResponse, error)
}

// UnimplementedRegionServerStatusServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRegionServerStatusServiceServer struct {
}

func (*UnimplementedRegionServerStatusServiceServer) RegionServerStartup(context.Context, *RegionServerStartupRequest) (*RegionServerStartupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegionServerStartup not implemented")
}
func (*UnimplementedRegionServerStatusServiceServer) RegionServerReport(context.Context, *RegionServerReportRequest) (*RegionServerReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegionServerReport not implemented")
}
func (*UnimplementedRegionServerStatusServiceServer) ReportRSFatalError(context.Context, *ReportRSFatalErrorRequest) (*ReportRSFatalErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportRSFatalError not implemented")
}
func (*UnimplementedRegionServerStatusServiceServer) GetLastFlushedSequenceId(context.Context, *GetLastFlushedSequenceIdRequest) (*GetLastFlushedSequenceIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastFlushedSequenceId not implemented")
}
func (*UnimplementedRegionServerStatusServiceServer) ReportRegionStateTransition(context.Context, *ReportRegionStateTransitionRequest) (*ReportRegionStateTransitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportRegionStateTransition not implemented")
}
func (*UnimplementedRegionServerStatusServiceServer) ReportRegionSpaceUse(context.Context, *RegionSpaceUseReportRequest) (*RegionSpaceUseReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportRegionSpaceUse not implemented")
}
func (*UnimplementedRegionServerStatusServiceServer) ReportProcedureDone(context.Context, *ReportProcedureDoneRequest) (*ReportProcedureDoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportProcedureDone not implemented")
}

func RegisterRegionServerStatusServiceServer(s *grpc.Server, srv RegionServerStatusServiceServer) {
	s.RegisterService(&_RegionServerStatusService_serviceDesc, srv)
}

func _RegionServerStatusService_RegionServerStartup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegionServerStartupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServerStatusServiceServer).RegionServerStartup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.RegionServerStatusService/RegionServerStartup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServerStatusServiceServer).RegionServerStartup(ctx, req.(*RegionServerStartupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionServerStatusService_RegionServerReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegionServerReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServerStatusServiceServer).RegionServerReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.RegionServerStatusService/RegionServerReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServerStatusServiceServer).RegionServerReport(ctx, req.(*RegionServerReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionServerStatusService_ReportRSFatalError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRSFatalErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServerStatusServiceServer).ReportRSFatalError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.RegionServerStatusService/ReportRSFatalError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServerStatusServiceServer).ReportRSFatalError(ctx, req.(*ReportRSFatalErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionServerStatusService_GetLastFlushedSequenceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastFlushedSequenceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServerStatusServiceServer).GetLastFlushedSequenceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.RegionServerStatusService/GetLastFlushedSequenceId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServerStatusServiceServer).GetLastFlushedSequenceId(ctx, req.(*GetLastFlushedSequenceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionServerStatusService_ReportRegionStateTransition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRegionStateTransitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServerStatusServiceServer).ReportRegionStateTransition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.RegionServerStatusService/ReportRegionStateTransition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServerStatusServiceServer).ReportRegionStateTransition(ctx, req.(*ReportRegionStateTransitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionServerStatusService_ReportRegionSpaceUse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegionSpaceUseReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServerStatusServiceServer).ReportRegionSpaceUse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.RegionServerStatusService/ReportRegionSpaceUse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServerStatusServiceServer).ReportRegionSpaceUse(ctx, req.(*RegionSpaceUseReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionServerStatusService_ReportProcedureDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportProcedureDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServerStatusServiceServer).ReportProcedureDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hbase.pb.RegionServerStatusService/ReportProcedureDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServerStatusServiceServer).ReportProcedureDone(ctx, req.(*ReportProcedureDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RegionServerStatusService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hbase.pb.RegionServerStatusService",
	HandlerType: (*RegionServerStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegionServerStartup",
			Handler:    _RegionServerStatusService_RegionServerStartup_Handler,
		},
		{
			MethodName: "RegionServerReport",
			Handler:    _RegionServerStatusService_RegionServerReport_Handler,
		},
		{
			MethodName: "ReportRSFatalError",
			Handler:    _RegionServerStatusService_ReportRSFatalError_Handler,
		},
		{
			MethodName: "GetLastFlushedSequenceId",
			Handler:    _RegionServerStatusService_GetLastFlushedSequenceId_Handler,
		},
		{
			MethodName: "ReportRegionStateTransition",
			Handler:    _RegionServerStatusService_ReportRegionStateTransition_Handler,
		},
		{
			MethodName: "ReportRegionSpaceUse",
			Handler:    _RegionServerStatusService_ReportRegionSpaceUse_Handler,
		},
		{
			MethodName: "ReportProcedureDone",
			Handler:    _RegionServerStatusService_ReportProcedureDone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "RegionServerStatus.proto",
}
