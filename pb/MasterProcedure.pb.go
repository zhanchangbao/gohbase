//*
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-rc.1
// 	protoc        v3.17.3
// source: MasterProcedure.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateTableState int32

const (
	CreateTableState_CREATE_TABLE_PRE_OPERATION     CreateTableState = 1
	CreateTableState_CREATE_TABLE_WRITE_FS_LAYOUT   CreateTableState = 2
	CreateTableState_CREATE_TABLE_ADD_TO_META       CreateTableState = 3
	CreateTableState_CREATE_TABLE_ASSIGN_REGIONS    CreateTableState = 4
	CreateTableState_CREATE_TABLE_UPDATE_DESC_CACHE CreateTableState = 5
	CreateTableState_CREATE_TABLE_POST_OPERATION    CreateTableState = 6
)

// Enum value maps for CreateTableState.
var (
	CreateTableState_name = map[int32]string{
		1: "CREATE_TABLE_PRE_OPERATION",
		2: "CREATE_TABLE_WRITE_FS_LAYOUT",
		3: "CREATE_TABLE_ADD_TO_META",
		4: "CREATE_TABLE_ASSIGN_REGIONS",
		5: "CREATE_TABLE_UPDATE_DESC_CACHE",
		6: "CREATE_TABLE_POST_OPERATION",
	}
	CreateTableState_value = map[string]int32{
		"CREATE_TABLE_PRE_OPERATION":     1,
		"CREATE_TABLE_WRITE_FS_LAYOUT":   2,
		"CREATE_TABLE_ADD_TO_META":       3,
		"CREATE_TABLE_ASSIGN_REGIONS":    4,
		"CREATE_TABLE_UPDATE_DESC_CACHE": 5,
		"CREATE_TABLE_POST_OPERATION":    6,
	}
)

func (x CreateTableState) Enum() *CreateTableState {
	p := new(CreateTableState)
	*p = x
	return p
}

func (x CreateTableState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateTableState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[0].Descriptor()
}

func (CreateTableState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[0]
}

func (x CreateTableState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CreateTableState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CreateTableState(num)
	return nil
}

// Deprecated: Use CreateTableState.Descriptor instead.
func (CreateTableState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{0}
}

type ModifyTableState int32

const (
	ModifyTableState_MODIFY_TABLE_PREPARE                 ModifyTableState = 1
	ModifyTableState_MODIFY_TABLE_PRE_OPERATION           ModifyTableState = 2
	ModifyTableState_MODIFY_TABLE_UPDATE_TABLE_DESCRIPTOR ModifyTableState = 3
	ModifyTableState_MODIFY_TABLE_REMOVE_REPLICA_COLUMN   ModifyTableState = 4
	ModifyTableState_MODIFY_TABLE_DELETE_FS_LAYOUT        ModifyTableState = 5
	ModifyTableState_MODIFY_TABLE_POST_OPERATION          ModifyTableState = 6
	ModifyTableState_MODIFY_TABLE_REOPEN_ALL_REGIONS      ModifyTableState = 7
)

// Enum value maps for ModifyTableState.
var (
	ModifyTableState_name = map[int32]string{
		1: "MODIFY_TABLE_PREPARE",
		2: "MODIFY_TABLE_PRE_OPERATION",
		3: "MODIFY_TABLE_UPDATE_TABLE_DESCRIPTOR",
		4: "MODIFY_TABLE_REMOVE_REPLICA_COLUMN",
		5: "MODIFY_TABLE_DELETE_FS_LAYOUT",
		6: "MODIFY_TABLE_POST_OPERATION",
		7: "MODIFY_TABLE_REOPEN_ALL_REGIONS",
	}
	ModifyTableState_value = map[string]int32{
		"MODIFY_TABLE_PREPARE":                 1,
		"MODIFY_TABLE_PRE_OPERATION":           2,
		"MODIFY_TABLE_UPDATE_TABLE_DESCRIPTOR": 3,
		"MODIFY_TABLE_REMOVE_REPLICA_COLUMN":   4,
		"MODIFY_TABLE_DELETE_FS_LAYOUT":        5,
		"MODIFY_TABLE_POST_OPERATION":          6,
		"MODIFY_TABLE_REOPEN_ALL_REGIONS":      7,
	}
)

func (x ModifyTableState) Enum() *ModifyTableState {
	p := new(ModifyTableState)
	*p = x
	return p
}

func (x ModifyTableState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModifyTableState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[1].Descriptor()
}

func (ModifyTableState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[1]
}

func (x ModifyTableState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ModifyTableState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ModifyTableState(num)
	return nil
}

// Deprecated: Use ModifyTableState.Descriptor instead.
func (ModifyTableState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{1}
}

type TruncateTableState int32

const (
	TruncateTableState_TRUNCATE_TABLE_PRE_OPERATION    TruncateTableState = 1
	TruncateTableState_TRUNCATE_TABLE_REMOVE_FROM_META TruncateTableState = 2
	TruncateTableState_TRUNCATE_TABLE_CLEAR_FS_LAYOUT  TruncateTableState = 3
	TruncateTableState_TRUNCATE_TABLE_CREATE_FS_LAYOUT TruncateTableState = 4
	TruncateTableState_TRUNCATE_TABLE_ADD_TO_META      TruncateTableState = 5
	TruncateTableState_TRUNCATE_TABLE_ASSIGN_REGIONS   TruncateTableState = 6
	TruncateTableState_TRUNCATE_TABLE_POST_OPERATION   TruncateTableState = 7
)

// Enum value maps for TruncateTableState.
var (
	TruncateTableState_name = map[int32]string{
		1: "TRUNCATE_TABLE_PRE_OPERATION",
		2: "TRUNCATE_TABLE_REMOVE_FROM_META",
		3: "TRUNCATE_TABLE_CLEAR_FS_LAYOUT",
		4: "TRUNCATE_TABLE_CREATE_FS_LAYOUT",
		5: "TRUNCATE_TABLE_ADD_TO_META",
		6: "TRUNCATE_TABLE_ASSIGN_REGIONS",
		7: "TRUNCATE_TABLE_POST_OPERATION",
	}
	TruncateTableState_value = map[string]int32{
		"TRUNCATE_TABLE_PRE_OPERATION":    1,
		"TRUNCATE_TABLE_REMOVE_FROM_META": 2,
		"TRUNCATE_TABLE_CLEAR_FS_LAYOUT":  3,
		"TRUNCATE_TABLE_CREATE_FS_LAYOUT": 4,
		"TRUNCATE_TABLE_ADD_TO_META":      5,
		"TRUNCATE_TABLE_ASSIGN_REGIONS":   6,
		"TRUNCATE_TABLE_POST_OPERATION":   7,
	}
)

func (x TruncateTableState) Enum() *TruncateTableState {
	p := new(TruncateTableState)
	*p = x
	return p
}

func (x TruncateTableState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TruncateTableState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[2].Descriptor()
}

func (TruncateTableState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[2]
}

func (x TruncateTableState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TruncateTableState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TruncateTableState(num)
	return nil
}

// Deprecated: Use TruncateTableState.Descriptor instead.
func (TruncateTableState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{2}
}

type DeleteTableState int32

const (
	DeleteTableState_DELETE_TABLE_PRE_OPERATION     DeleteTableState = 1
	DeleteTableState_DELETE_TABLE_REMOVE_FROM_META  DeleteTableState = 2
	DeleteTableState_DELETE_TABLE_CLEAR_FS_LAYOUT   DeleteTableState = 3
	DeleteTableState_DELETE_TABLE_UPDATE_DESC_CACHE DeleteTableState = 4
	DeleteTableState_DELETE_TABLE_UNASSIGN_REGIONS  DeleteTableState = 5
	DeleteTableState_DELETE_TABLE_POST_OPERATION    DeleteTableState = 6
)

// Enum value maps for DeleteTableState.
var (
	DeleteTableState_name = map[int32]string{
		1: "DELETE_TABLE_PRE_OPERATION",
		2: "DELETE_TABLE_REMOVE_FROM_META",
		3: "DELETE_TABLE_CLEAR_FS_LAYOUT",
		4: "DELETE_TABLE_UPDATE_DESC_CACHE",
		5: "DELETE_TABLE_UNASSIGN_REGIONS",
		6: "DELETE_TABLE_POST_OPERATION",
	}
	DeleteTableState_value = map[string]int32{
		"DELETE_TABLE_PRE_OPERATION":     1,
		"DELETE_TABLE_REMOVE_FROM_META":  2,
		"DELETE_TABLE_CLEAR_FS_LAYOUT":   3,
		"DELETE_TABLE_UPDATE_DESC_CACHE": 4,
		"DELETE_TABLE_UNASSIGN_REGIONS":  5,
		"DELETE_TABLE_POST_OPERATION":    6,
	}
)

func (x DeleteTableState) Enum() *DeleteTableState {
	p := new(DeleteTableState)
	*p = x
	return p
}

func (x DeleteTableState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteTableState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[3].Descriptor()
}

func (DeleteTableState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[3]
}

func (x DeleteTableState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeleteTableState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeleteTableState(num)
	return nil
}

// Deprecated: Use DeleteTableState.Descriptor instead.
func (DeleteTableState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{3}
}

type CreateNamespaceState int32

const (
	CreateNamespaceState_CREATE_NAMESPACE_PREPARE              CreateNamespaceState = 1
	CreateNamespaceState_CREATE_NAMESPACE_CREATE_DIRECTORY     CreateNamespaceState = 2
	CreateNamespaceState_CREATE_NAMESPACE_INSERT_INTO_NS_TABLE CreateNamespaceState = 3
	CreateNamespaceState_CREATE_NAMESPACE_UPDATE_ZK            CreateNamespaceState = 4
	CreateNamespaceState_CREATE_NAMESPACE_SET_NAMESPACE_QUOTA  CreateNamespaceState = 5
)

// Enum value maps for CreateNamespaceState.
var (
	CreateNamespaceState_name = map[int32]string{
		1: "CREATE_NAMESPACE_PREPARE",
		2: "CREATE_NAMESPACE_CREATE_DIRECTORY",
		3: "CREATE_NAMESPACE_INSERT_INTO_NS_TABLE",
		4: "CREATE_NAMESPACE_UPDATE_ZK",
		5: "CREATE_NAMESPACE_SET_NAMESPACE_QUOTA",
	}
	CreateNamespaceState_value = map[string]int32{
		"CREATE_NAMESPACE_PREPARE":              1,
		"CREATE_NAMESPACE_CREATE_DIRECTORY":     2,
		"CREATE_NAMESPACE_INSERT_INTO_NS_TABLE": 3,
		"CREATE_NAMESPACE_UPDATE_ZK":            4,
		"CREATE_NAMESPACE_SET_NAMESPACE_QUOTA":  5,
	}
)

func (x CreateNamespaceState) Enum() *CreateNamespaceState {
	p := new(CreateNamespaceState)
	*p = x
	return p
}

func (x CreateNamespaceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateNamespaceState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[4].Descriptor()
}

func (CreateNamespaceState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[4]
}

func (x CreateNamespaceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CreateNamespaceState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CreateNamespaceState(num)
	return nil
}

// Deprecated: Use CreateNamespaceState.Descriptor instead.
func (CreateNamespaceState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{4}
}

type ModifyNamespaceState int32

const (
	ModifyNamespaceState_MODIFY_NAMESPACE_PREPARE         ModifyNamespaceState = 1
	ModifyNamespaceState_MODIFY_NAMESPACE_UPDATE_NS_TABLE ModifyNamespaceState = 2
	ModifyNamespaceState_MODIFY_NAMESPACE_UPDATE_ZK       ModifyNamespaceState = 3
)

// Enum value maps for ModifyNamespaceState.
var (
	ModifyNamespaceState_name = map[int32]string{
		1: "MODIFY_NAMESPACE_PREPARE",
		2: "MODIFY_NAMESPACE_UPDATE_NS_TABLE",
		3: "MODIFY_NAMESPACE_UPDATE_ZK",
	}
	ModifyNamespaceState_value = map[string]int32{
		"MODIFY_NAMESPACE_PREPARE":         1,
		"MODIFY_NAMESPACE_UPDATE_NS_TABLE": 2,
		"MODIFY_NAMESPACE_UPDATE_ZK":       3,
	}
)

func (x ModifyNamespaceState) Enum() *ModifyNamespaceState {
	p := new(ModifyNamespaceState)
	*p = x
	return p
}

func (x ModifyNamespaceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModifyNamespaceState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[5].Descriptor()
}

func (ModifyNamespaceState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[5]
}

func (x ModifyNamespaceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ModifyNamespaceState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ModifyNamespaceState(num)
	return nil
}

// Deprecated: Use ModifyNamespaceState.Descriptor instead.
func (ModifyNamespaceState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{5}
}

type DeleteNamespaceState int32

const (
	DeleteNamespaceState_DELETE_NAMESPACE_PREPARE                DeleteNamespaceState = 1
	DeleteNamespaceState_DELETE_NAMESPACE_DELETE_FROM_NS_TABLE   DeleteNamespaceState = 2
	DeleteNamespaceState_DELETE_NAMESPACE_REMOVE_FROM_ZK         DeleteNamespaceState = 3
	DeleteNamespaceState_DELETE_NAMESPACE_DELETE_DIRECTORIES     DeleteNamespaceState = 4
	DeleteNamespaceState_DELETE_NAMESPACE_REMOVE_NAMESPACE_QUOTA DeleteNamespaceState = 5
)

// Enum value maps for DeleteNamespaceState.
var (
	DeleteNamespaceState_name = map[int32]string{
		1: "DELETE_NAMESPACE_PREPARE",
		2: "DELETE_NAMESPACE_DELETE_FROM_NS_TABLE",
		3: "DELETE_NAMESPACE_REMOVE_FROM_ZK",
		4: "DELETE_NAMESPACE_DELETE_DIRECTORIES",
		5: "DELETE_NAMESPACE_REMOVE_NAMESPACE_QUOTA",
	}
	DeleteNamespaceState_value = map[string]int32{
		"DELETE_NAMESPACE_PREPARE":                1,
		"DELETE_NAMESPACE_DELETE_FROM_NS_TABLE":   2,
		"DELETE_NAMESPACE_REMOVE_FROM_ZK":         3,
		"DELETE_NAMESPACE_DELETE_DIRECTORIES":     4,
		"DELETE_NAMESPACE_REMOVE_NAMESPACE_QUOTA": 5,
	}
)

func (x DeleteNamespaceState) Enum() *DeleteNamespaceState {
	p := new(DeleteNamespaceState)
	*p = x
	return p
}

func (x DeleteNamespaceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteNamespaceState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[6].Descriptor()
}

func (DeleteNamespaceState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[6]
}

func (x DeleteNamespaceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeleteNamespaceState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeleteNamespaceState(num)
	return nil
}

// Deprecated: Use DeleteNamespaceState.Descriptor instead.
func (DeleteNamespaceState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{6}
}

type EnableTableState int32

const (
	EnableTableState_ENABLE_TABLE_PREPARE                  EnableTableState = 1
	EnableTableState_ENABLE_TABLE_PRE_OPERATION            EnableTableState = 2
	EnableTableState_ENABLE_TABLE_SET_ENABLING_TABLE_STATE EnableTableState = 3
	EnableTableState_ENABLE_TABLE_MARK_REGIONS_ONLINE      EnableTableState = 4
	EnableTableState_ENABLE_TABLE_SET_ENABLED_TABLE_STATE  EnableTableState = 5
	EnableTableState_ENABLE_TABLE_POST_OPERATION           EnableTableState = 6
)

// Enum value maps for EnableTableState.
var (
	EnableTableState_name = map[int32]string{
		1: "ENABLE_TABLE_PREPARE",
		2: "ENABLE_TABLE_PRE_OPERATION",
		3: "ENABLE_TABLE_SET_ENABLING_TABLE_STATE",
		4: "ENABLE_TABLE_MARK_REGIONS_ONLINE",
		5: "ENABLE_TABLE_SET_ENABLED_TABLE_STATE",
		6: "ENABLE_TABLE_POST_OPERATION",
	}
	EnableTableState_value = map[string]int32{
		"ENABLE_TABLE_PREPARE":                  1,
		"ENABLE_TABLE_PRE_OPERATION":            2,
		"ENABLE_TABLE_SET_ENABLING_TABLE_STATE": 3,
		"ENABLE_TABLE_MARK_REGIONS_ONLINE":      4,
		"ENABLE_TABLE_SET_ENABLED_TABLE_STATE":  5,
		"ENABLE_TABLE_POST_OPERATION":           6,
	}
)

func (x EnableTableState) Enum() *EnableTableState {
	p := new(EnableTableState)
	*p = x
	return p
}

func (x EnableTableState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnableTableState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[7].Descriptor()
}

func (EnableTableState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[7]
}

func (x EnableTableState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EnableTableState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EnableTableState(num)
	return nil
}

// Deprecated: Use EnableTableState.Descriptor instead.
func (EnableTableState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{7}
}

type DisableTableState int32

const (
	DisableTableState_DISABLE_TABLE_PREPARE                   DisableTableState = 1
	DisableTableState_DISABLE_TABLE_PRE_OPERATION             DisableTableState = 2
	DisableTableState_DISABLE_TABLE_SET_DISABLING_TABLE_STATE DisableTableState = 3
	DisableTableState_DISABLE_TABLE_MARK_REGIONS_OFFLINE      DisableTableState = 4
	DisableTableState_DISABLE_TABLE_SET_DISABLED_TABLE_STATE  DisableTableState = 5
	DisableTableState_DISABLE_TABLE_POST_OPERATION            DisableTableState = 6
	DisableTableState_DISABLE_TABLE_ADD_REPLICATION_BARRIER   DisableTableState = 7
)

// Enum value maps for DisableTableState.
var (
	DisableTableState_name = map[int32]string{
		1: "DISABLE_TABLE_PREPARE",
		2: "DISABLE_TABLE_PRE_OPERATION",
		3: "DISABLE_TABLE_SET_DISABLING_TABLE_STATE",
		4: "DISABLE_TABLE_MARK_REGIONS_OFFLINE",
		5: "DISABLE_TABLE_SET_DISABLED_TABLE_STATE",
		6: "DISABLE_TABLE_POST_OPERATION",
		7: "DISABLE_TABLE_ADD_REPLICATION_BARRIER",
	}
	DisableTableState_value = map[string]int32{
		"DISABLE_TABLE_PREPARE":                   1,
		"DISABLE_TABLE_PRE_OPERATION":             2,
		"DISABLE_TABLE_SET_DISABLING_TABLE_STATE": 3,
		"DISABLE_TABLE_MARK_REGIONS_OFFLINE":      4,
		"DISABLE_TABLE_SET_DISABLED_TABLE_STATE":  5,
		"DISABLE_TABLE_POST_OPERATION":            6,
		"DISABLE_TABLE_ADD_REPLICATION_BARRIER":   7,
	}
)

func (x DisableTableState) Enum() *DisableTableState {
	p := new(DisableTableState)
	*p = x
	return p
}

func (x DisableTableState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisableTableState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[8].Descriptor()
}

func (DisableTableState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[8]
}

func (x DisableTableState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DisableTableState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DisableTableState(num)
	return nil
}

// Deprecated: Use DisableTableState.Descriptor instead.
func (DisableTableState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{8}
}

type CloneSnapshotState int32

const (
	CloneSnapshotState_CLONE_SNAPSHOT_PRE_OPERATION     CloneSnapshotState = 1
	CloneSnapshotState_CLONE_SNAPSHOT_WRITE_FS_LAYOUT   CloneSnapshotState = 2
	CloneSnapshotState_CLONE_SNAPSHOT_ADD_TO_META       CloneSnapshotState = 3
	CloneSnapshotState_CLONE_SNAPSHOT_ASSIGN_REGIONS    CloneSnapshotState = 4
	CloneSnapshotState_CLONE_SNAPSHOT_UPDATE_DESC_CACHE CloneSnapshotState = 5
	CloneSnapshotState_CLONE_SNAPSHOT_POST_OPERATION    CloneSnapshotState = 6
	CloneSnapshotState_CLONE_SNAPHOST_RESTORE_ACL       CloneSnapshotState = 7
)

// Enum value maps for CloneSnapshotState.
var (
	CloneSnapshotState_name = map[int32]string{
		1: "CLONE_SNAPSHOT_PRE_OPERATION",
		2: "CLONE_SNAPSHOT_WRITE_FS_LAYOUT",
		3: "CLONE_SNAPSHOT_ADD_TO_META",
		4: "CLONE_SNAPSHOT_ASSIGN_REGIONS",
		5: "CLONE_SNAPSHOT_UPDATE_DESC_CACHE",
		6: "CLONE_SNAPSHOT_POST_OPERATION",
		7: "CLONE_SNAPHOST_RESTORE_ACL",
	}
	CloneSnapshotState_value = map[string]int32{
		"CLONE_SNAPSHOT_PRE_OPERATION":     1,
		"CLONE_SNAPSHOT_WRITE_FS_LAYOUT":   2,
		"CLONE_SNAPSHOT_ADD_TO_META":       3,
		"CLONE_SNAPSHOT_ASSIGN_REGIONS":    4,
		"CLONE_SNAPSHOT_UPDATE_DESC_CACHE": 5,
		"CLONE_SNAPSHOT_POST_OPERATION":    6,
		"CLONE_SNAPHOST_RESTORE_ACL":       7,
	}
)

func (x CloneSnapshotState) Enum() *CloneSnapshotState {
	p := new(CloneSnapshotState)
	*p = x
	return p
}

func (x CloneSnapshotState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloneSnapshotState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[9].Descriptor()
}

func (CloneSnapshotState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[9]
}

func (x CloneSnapshotState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CloneSnapshotState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CloneSnapshotState(num)
	return nil
}

// Deprecated: Use CloneSnapshotState.Descriptor instead.
func (CloneSnapshotState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{9}
}

type RestoreSnapshotState int32

const (
	RestoreSnapshotState_RESTORE_SNAPSHOT_PRE_OPERATION           RestoreSnapshotState = 1
	RestoreSnapshotState_RESTORE_SNAPSHOT_UPDATE_TABLE_DESCRIPTOR RestoreSnapshotState = 2
	RestoreSnapshotState_RESTORE_SNAPSHOT_WRITE_FS_LAYOUT         RestoreSnapshotState = 3
	RestoreSnapshotState_RESTORE_SNAPSHOT_UPDATE_META             RestoreSnapshotState = 4
	RestoreSnapshotState_RESTORE_SNAPSHOT_RESTORE_ACL             RestoreSnapshotState = 5
)

// Enum value maps for RestoreSnapshotState.
var (
	RestoreSnapshotState_name = map[int32]string{
		1: "RESTORE_SNAPSHOT_PRE_OPERATION",
		2: "RESTORE_SNAPSHOT_UPDATE_TABLE_DESCRIPTOR",
		3: "RESTORE_SNAPSHOT_WRITE_FS_LAYOUT",
		4: "RESTORE_SNAPSHOT_UPDATE_META",
		5: "RESTORE_SNAPSHOT_RESTORE_ACL",
	}
	RestoreSnapshotState_value = map[string]int32{
		"RESTORE_SNAPSHOT_PRE_OPERATION":           1,
		"RESTORE_SNAPSHOT_UPDATE_TABLE_DESCRIPTOR": 2,
		"RESTORE_SNAPSHOT_WRITE_FS_LAYOUT":         3,
		"RESTORE_SNAPSHOT_UPDATE_META":             4,
		"RESTORE_SNAPSHOT_RESTORE_ACL":             5,
	}
)

func (x RestoreSnapshotState) Enum() *RestoreSnapshotState {
	p := new(RestoreSnapshotState)
	*p = x
	return p
}

func (x RestoreSnapshotState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RestoreSnapshotState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[10].Descriptor()
}

func (RestoreSnapshotState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[10]
}

func (x RestoreSnapshotState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RestoreSnapshotState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RestoreSnapshotState(num)
	return nil
}

// Deprecated: Use RestoreSnapshotState.Descriptor instead.
func (RestoreSnapshotState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{10}
}

type DispatchMergingRegionsState int32

const (
	DispatchMergingRegionsState_DISPATCH_MERGING_REGIONS_PREPARE                DispatchMergingRegionsState = 1
	DispatchMergingRegionsState_DISPATCH_MERGING_REGIONS_PRE_OPERATION          DispatchMergingRegionsState = 2
	DispatchMergingRegionsState_DISPATCH_MERGING_REGIONS_MOVE_REGION_TO_SAME_RS DispatchMergingRegionsState = 3
	DispatchMergingRegionsState_DISPATCH_MERGING_REGIONS_DO_MERGE_IN_RS         DispatchMergingRegionsState = 4
	DispatchMergingRegionsState_DISPATCH_MERGING_REGIONS_POST_OPERATION         DispatchMergingRegionsState = 5
)

// Enum value maps for DispatchMergingRegionsState.
var (
	DispatchMergingRegionsState_name = map[int32]string{
		1: "DISPATCH_MERGING_REGIONS_PREPARE",
		2: "DISPATCH_MERGING_REGIONS_PRE_OPERATION",
		3: "DISPATCH_MERGING_REGIONS_MOVE_REGION_TO_SAME_RS",
		4: "DISPATCH_MERGING_REGIONS_DO_MERGE_IN_RS",
		5: "DISPATCH_MERGING_REGIONS_POST_OPERATION",
	}
	DispatchMergingRegionsState_value = map[string]int32{
		"DISPATCH_MERGING_REGIONS_PREPARE":                1,
		"DISPATCH_MERGING_REGIONS_PRE_OPERATION":          2,
		"DISPATCH_MERGING_REGIONS_MOVE_REGION_TO_SAME_RS": 3,
		"DISPATCH_MERGING_REGIONS_DO_MERGE_IN_RS":         4,
		"DISPATCH_MERGING_REGIONS_POST_OPERATION":         5,
	}
)

func (x DispatchMergingRegionsState) Enum() *DispatchMergingRegionsState {
	p := new(DispatchMergingRegionsState)
	*p = x
	return p
}

func (x DispatchMergingRegionsState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DispatchMergingRegionsState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[11].Descriptor()
}

func (DispatchMergingRegionsState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[11]
}

func (x DispatchMergingRegionsState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DispatchMergingRegionsState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DispatchMergingRegionsState(num)
	return nil
}

// Deprecated: Use DispatchMergingRegionsState.Descriptor instead.
func (DispatchMergingRegionsState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{11}
}

type SplitTableRegionState int32

const (
	SplitTableRegionState_SPLIT_TABLE_REGION_PREPARE                    SplitTableRegionState = 1
	SplitTableRegionState_SPLIT_TABLE_REGION_PRE_OPERATION              SplitTableRegionState = 2
	SplitTableRegionState_SPLIT_TABLE_REGION_CLOSE_PARENT_REGION        SplitTableRegionState = 3
	SplitTableRegionState_SPLIT_TABLE_REGION_CREATE_DAUGHTER_REGIONS    SplitTableRegionState = 4
	SplitTableRegionState_SPLIT_TABLE_REGION_WRITE_MAX_SEQUENCE_ID_FILE SplitTableRegionState = 5
	SplitTableRegionState_SPLIT_TABLE_REGION_PRE_OPERATION_BEFORE_META  SplitTableRegionState = 6
	SplitTableRegionState_SPLIT_TABLE_REGION_UPDATE_META                SplitTableRegionState = 7
	SplitTableRegionState_SPLIT_TABLE_REGION_PRE_OPERATION_AFTER_META   SplitTableRegionState = 8
	SplitTableRegionState_SPLIT_TABLE_REGION_OPEN_CHILD_REGIONS         SplitTableRegionState = 9
	SplitTableRegionState_SPLIT_TABLE_REGION_POST_OPERATION             SplitTableRegionState = 10
	SplitTableRegionState_SPLIT_TABLE_REGIONS_CHECK_CLOSED_REGIONS      SplitTableRegionState = 11
)

// Enum value maps for SplitTableRegionState.
var (
	SplitTableRegionState_name = map[int32]string{
		1:  "SPLIT_TABLE_REGION_PREPARE",
		2:  "SPLIT_TABLE_REGION_PRE_OPERATION",
		3:  "SPLIT_TABLE_REGION_CLOSE_PARENT_REGION",
		4:  "SPLIT_TABLE_REGION_CREATE_DAUGHTER_REGIONS",
		5:  "SPLIT_TABLE_REGION_WRITE_MAX_SEQUENCE_ID_FILE",
		6:  "SPLIT_TABLE_REGION_PRE_OPERATION_BEFORE_META",
		7:  "SPLIT_TABLE_REGION_UPDATE_META",
		8:  "SPLIT_TABLE_REGION_PRE_OPERATION_AFTER_META",
		9:  "SPLIT_TABLE_REGION_OPEN_CHILD_REGIONS",
		10: "SPLIT_TABLE_REGION_POST_OPERATION",
		11: "SPLIT_TABLE_REGIONS_CHECK_CLOSED_REGIONS",
	}
	SplitTableRegionState_value = map[string]int32{
		"SPLIT_TABLE_REGION_PREPARE":                    1,
		"SPLIT_TABLE_REGION_PRE_OPERATION":              2,
		"SPLIT_TABLE_REGION_CLOSE_PARENT_REGION":        3,
		"SPLIT_TABLE_REGION_CREATE_DAUGHTER_REGIONS":    4,
		"SPLIT_TABLE_REGION_WRITE_MAX_SEQUENCE_ID_FILE": 5,
		"SPLIT_TABLE_REGION_PRE_OPERATION_BEFORE_META":  6,
		"SPLIT_TABLE_REGION_UPDATE_META":                7,
		"SPLIT_TABLE_REGION_PRE_OPERATION_AFTER_META":   8,
		"SPLIT_TABLE_REGION_OPEN_CHILD_REGIONS":         9,
		"SPLIT_TABLE_REGION_POST_OPERATION":             10,
		"SPLIT_TABLE_REGIONS_CHECK_CLOSED_REGIONS":      11,
	}
)

func (x SplitTableRegionState) Enum() *SplitTableRegionState {
	p := new(SplitTableRegionState)
	*p = x
	return p
}

func (x SplitTableRegionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SplitTableRegionState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[12].Descriptor()
}

func (SplitTableRegionState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[12]
}

func (x SplitTableRegionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SplitTableRegionState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SplitTableRegionState(num)
	return nil
}

// Deprecated: Use SplitTableRegionState.Descriptor instead.
func (SplitTableRegionState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{12}
}

type MergeTableRegionsState int32

const (
	MergeTableRegionsState_MERGE_TABLE_REGIONS_PREPARE                     MergeTableRegionsState = 1
	MergeTableRegionsState_MERGE_TABLE_REGIONS_PRE_OPERATION               MergeTableRegionsState = 2
	MergeTableRegionsState_MERGE_TABLE_REGIONS_PRE_MERGE_OPERATION         MergeTableRegionsState = 3
	MergeTableRegionsState_MERGE_TABLE_REGIONS_CLOSE_REGIONS               MergeTableRegionsState = 4
	MergeTableRegionsState_MERGE_TABLE_REGIONS_CREATE_MERGED_REGION        MergeTableRegionsState = 5
	MergeTableRegionsState_MERGE_TABLE_REGIONS_WRITE_MAX_SEQUENCE_ID_FILE  MergeTableRegionsState = 6
	MergeTableRegionsState_MERGE_TABLE_REGIONS_PRE_MERGE_COMMIT_OPERATION  MergeTableRegionsState = 7
	MergeTableRegionsState_MERGE_TABLE_REGIONS_UPDATE_META                 MergeTableRegionsState = 8
	MergeTableRegionsState_MERGE_TABLE_REGIONS_POST_MERGE_COMMIT_OPERATION MergeTableRegionsState = 9
	MergeTableRegionsState_MERGE_TABLE_REGIONS_OPEN_MERGED_REGION          MergeTableRegionsState = 10
	MergeTableRegionsState_MERGE_TABLE_REGIONS_POST_OPERATION              MergeTableRegionsState = 11
	MergeTableRegionsState_MERGE_TABLE_REGIONS_CHECK_CLOSED_REGIONS        MergeTableRegionsState = 12
)

// Enum value maps for MergeTableRegionsState.
var (
	MergeTableRegionsState_name = map[int32]string{
		1:  "MERGE_TABLE_REGIONS_PREPARE",
		2:  "MERGE_TABLE_REGIONS_PRE_OPERATION",
		3:  "MERGE_TABLE_REGIONS_PRE_MERGE_OPERATION",
		4:  "MERGE_TABLE_REGIONS_CLOSE_REGIONS",
		5:  "MERGE_TABLE_REGIONS_CREATE_MERGED_REGION",
		6:  "MERGE_TABLE_REGIONS_WRITE_MAX_SEQUENCE_ID_FILE",
		7:  "MERGE_TABLE_REGIONS_PRE_MERGE_COMMIT_OPERATION",
		8:  "MERGE_TABLE_REGIONS_UPDATE_META",
		9:  "MERGE_TABLE_REGIONS_POST_MERGE_COMMIT_OPERATION",
		10: "MERGE_TABLE_REGIONS_OPEN_MERGED_REGION",
		11: "MERGE_TABLE_REGIONS_POST_OPERATION",
		12: "MERGE_TABLE_REGIONS_CHECK_CLOSED_REGIONS",
	}
	MergeTableRegionsState_value = map[string]int32{
		"MERGE_TABLE_REGIONS_PREPARE":                     1,
		"MERGE_TABLE_REGIONS_PRE_OPERATION":               2,
		"MERGE_TABLE_REGIONS_PRE_MERGE_OPERATION":         3,
		"MERGE_TABLE_REGIONS_CLOSE_REGIONS":               4,
		"MERGE_TABLE_REGIONS_CREATE_MERGED_REGION":        5,
		"MERGE_TABLE_REGIONS_WRITE_MAX_SEQUENCE_ID_FILE":  6,
		"MERGE_TABLE_REGIONS_PRE_MERGE_COMMIT_OPERATION":  7,
		"MERGE_TABLE_REGIONS_UPDATE_META":                 8,
		"MERGE_TABLE_REGIONS_POST_MERGE_COMMIT_OPERATION": 9,
		"MERGE_TABLE_REGIONS_OPEN_MERGED_REGION":          10,
		"MERGE_TABLE_REGIONS_POST_OPERATION":              11,
		"MERGE_TABLE_REGIONS_CHECK_CLOSED_REGIONS":        12,
	}
)

func (x MergeTableRegionsState) Enum() *MergeTableRegionsState {
	p := new(MergeTableRegionsState)
	*p = x
	return p
}

func (x MergeTableRegionsState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MergeTableRegionsState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[13].Descriptor()
}

func (MergeTableRegionsState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[13]
}

func (x MergeTableRegionsState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MergeTableRegionsState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MergeTableRegionsState(num)
	return nil
}

// Deprecated: Use MergeTableRegionsState.Descriptor instead.
func (MergeTableRegionsState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{13}
}

type ServerCrashState int32

const (
	ServerCrashState_SERVER_CRASH_START ServerCrashState = 1
	// Deprecated: Do not use.
	ServerCrashState_SERVER_CRASH_PROCESS_META ServerCrashState = 2
	ServerCrashState_SERVER_CRASH_GET_REGIONS  ServerCrashState = 3
	// Deprecated: Do not use.
	ServerCrashState_SERVER_CRASH_NO_SPLIT_LOGS ServerCrashState = 4
	ServerCrashState_SERVER_CRASH_SPLIT_LOGS    ServerCrashState = 5
	// Removed SERVER_CRASH_PREPARE_LOG_REPLAY = 6;
	// Removed SERVER_CRASH_CALC_REGIONS_TO_ASSIGN = 7;
	ServerCrashState_SERVER_CRASH_ASSIGN                     ServerCrashState = 8
	ServerCrashState_SERVER_CRASH_WAIT_ON_ASSIGN             ServerCrashState = 9
	ServerCrashState_SERVER_CRASH_SPLIT_META_LOGS            ServerCrashState = 10
	ServerCrashState_SERVER_CRASH_ASSIGN_META                ServerCrashState = 11
	ServerCrashState_SERVER_CRASH_DELETE_SPLIT_META_WALS_DIR ServerCrashState = 12
	ServerCrashState_SERVER_CRASH_DELETE_SPLIT_WALS_DIR      ServerCrashState = 13
	// Deprecated: Do not use.
	ServerCrashState_SERVER_CRASH_HANDLE_RIT2 ServerCrashState = 20
	ServerCrashState_SERVER_CRASH_FINISH      ServerCrashState = 100
)

// Enum value maps for ServerCrashState.
var (
	ServerCrashState_name = map[int32]string{
		1:   "SERVER_CRASH_START",
		2:   "SERVER_CRASH_PROCESS_META",
		3:   "SERVER_CRASH_GET_REGIONS",
		4:   "SERVER_CRASH_NO_SPLIT_LOGS",
		5:   "SERVER_CRASH_SPLIT_LOGS",
		8:   "SERVER_CRASH_ASSIGN",
		9:   "SERVER_CRASH_WAIT_ON_ASSIGN",
		10:  "SERVER_CRASH_SPLIT_META_LOGS",
		11:  "SERVER_CRASH_ASSIGN_META",
		12:  "SERVER_CRASH_DELETE_SPLIT_META_WALS_DIR",
		13:  "SERVER_CRASH_DELETE_SPLIT_WALS_DIR",
		20:  "SERVER_CRASH_HANDLE_RIT2",
		100: "SERVER_CRASH_FINISH",
	}
	ServerCrashState_value = map[string]int32{
		"SERVER_CRASH_START":                      1,
		"SERVER_CRASH_PROCESS_META":               2,
		"SERVER_CRASH_GET_REGIONS":                3,
		"SERVER_CRASH_NO_SPLIT_LOGS":              4,
		"SERVER_CRASH_SPLIT_LOGS":                 5,
		"SERVER_CRASH_ASSIGN":                     8,
		"SERVER_CRASH_WAIT_ON_ASSIGN":             9,
		"SERVER_CRASH_SPLIT_META_LOGS":            10,
		"SERVER_CRASH_ASSIGN_META":                11,
		"SERVER_CRASH_DELETE_SPLIT_META_WALS_DIR": 12,
		"SERVER_CRASH_DELETE_SPLIT_WALS_DIR":      13,
		"SERVER_CRASH_HANDLE_RIT2":                20,
		"SERVER_CRASH_FINISH":                     100,
	}
)

func (x ServerCrashState) Enum() *ServerCrashState {
	p := new(ServerCrashState)
	*p = x
	return p
}

func (x ServerCrashState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerCrashState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[14].Descriptor()
}

func (ServerCrashState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[14]
}

func (x ServerCrashState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ServerCrashState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ServerCrashState(num)
	return nil
}

// Deprecated: Use ServerCrashState.Descriptor instead.
func (ServerCrashState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{14}
}

type RecoverMetaState int32

const (
	RecoverMetaState_RECOVER_META_PREPARE        RecoverMetaState = 0
	RecoverMetaState_RECOVER_META_SPLIT_LOGS     RecoverMetaState = 1
	RecoverMetaState_RECOVER_META_ASSIGN_REGIONS RecoverMetaState = 2
)

// Enum value maps for RecoverMetaState.
var (
	RecoverMetaState_name = map[int32]string{
		0: "RECOVER_META_PREPARE",
		1: "RECOVER_META_SPLIT_LOGS",
		2: "RECOVER_META_ASSIGN_REGIONS",
	}
	RecoverMetaState_value = map[string]int32{
		"RECOVER_META_PREPARE":        0,
		"RECOVER_META_SPLIT_LOGS":     1,
		"RECOVER_META_ASSIGN_REGIONS": 2,
	}
)

func (x RecoverMetaState) Enum() *RecoverMetaState {
	p := new(RecoverMetaState)
	*p = x
	return p
}

func (x RecoverMetaState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecoverMetaState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[15].Descriptor()
}

func (RecoverMetaState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[15]
}

func (x RecoverMetaState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RecoverMetaState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RecoverMetaState(num)
	return nil
}

// Deprecated: Use RecoverMetaState.Descriptor instead.
func (RecoverMetaState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{15}
}

type RegionTransitionState int32

const (
	RegionTransitionState_REGION_TRANSITION_QUEUE    RegionTransitionState = 1
	RegionTransitionState_REGION_TRANSITION_DISPATCH RegionTransitionState = 2
	RegionTransitionState_REGION_TRANSITION_FINISH   RegionTransitionState = 3
)

// Enum value maps for RegionTransitionState.
var (
	RegionTransitionState_name = map[int32]string{
		1: "REGION_TRANSITION_QUEUE",
		2: "REGION_TRANSITION_DISPATCH",
		3: "REGION_TRANSITION_FINISH",
	}
	RegionTransitionState_value = map[string]int32{
		"REGION_TRANSITION_QUEUE":    1,
		"REGION_TRANSITION_DISPATCH": 2,
		"REGION_TRANSITION_FINISH":   3,
	}
)

func (x RegionTransitionState) Enum() *RegionTransitionState {
	p := new(RegionTransitionState)
	*p = x
	return p
}

func (x RegionTransitionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegionTransitionState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[16].Descriptor()
}

func (RegionTransitionState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[16]
}

func (x RegionTransitionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RegionTransitionState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RegionTransitionState(num)
	return nil
}

// Deprecated: Use RegionTransitionState.Descriptor instead.
func (RegionTransitionState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{16}
}

type MoveRegionState int32

const (
	MoveRegionState_MOVE_REGION_PREPARE  MoveRegionState = 0
	MoveRegionState_MOVE_REGION_UNASSIGN MoveRegionState = 1
	MoveRegionState_MOVE_REGION_ASSIGN   MoveRegionState = 2
)

// Enum value maps for MoveRegionState.
var (
	MoveRegionState_name = map[int32]string{
		0: "MOVE_REGION_PREPARE",
		1: "MOVE_REGION_UNASSIGN",
		2: "MOVE_REGION_ASSIGN",
	}
	MoveRegionState_value = map[string]int32{
		"MOVE_REGION_PREPARE":  0,
		"MOVE_REGION_UNASSIGN": 1,
		"MOVE_REGION_ASSIGN":   2,
	}
)

func (x MoveRegionState) Enum() *MoveRegionState {
	p := new(MoveRegionState)
	*p = x
	return p
}

func (x MoveRegionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MoveRegionState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[17].Descriptor()
}

func (MoveRegionState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[17]
}

func (x MoveRegionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MoveRegionState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MoveRegionState(num)
	return nil
}

// Deprecated: Use MoveRegionState.Descriptor instead.
func (MoveRegionState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{17}
}

type GCRegionState int32

const (
	GCRegionState_GC_REGION_PREPARE        GCRegionState = 1
	GCRegionState_GC_REGION_ARCHIVE        GCRegionState = 2
	GCRegionState_GC_REGION_PURGE_METADATA GCRegionState = 3
)

// Enum value maps for GCRegionState.
var (
	GCRegionState_name = map[int32]string{
		1: "GC_REGION_PREPARE",
		2: "GC_REGION_ARCHIVE",
		3: "GC_REGION_PURGE_METADATA",
	}
	GCRegionState_value = map[string]int32{
		"GC_REGION_PREPARE":        1,
		"GC_REGION_ARCHIVE":        2,
		"GC_REGION_PURGE_METADATA": 3,
	}
)

func (x GCRegionState) Enum() *GCRegionState {
	p := new(GCRegionState)
	*p = x
	return p
}

func (x GCRegionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCRegionState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[18].Descriptor()
}

func (GCRegionState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[18]
}

func (x GCRegionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GCRegionState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GCRegionState(num)
	return nil
}

// Deprecated: Use GCRegionState.Descriptor instead.
func (GCRegionState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{18}
}

type GCMergedRegionsState int32

const (
	GCMergedRegionsState_GC_MERGED_REGIONS_PREPARE GCMergedRegionsState = 1
	GCMergedRegionsState_GC_MERGED_REGIONS_PURGE   GCMergedRegionsState = 2
	GCMergedRegionsState_GC_REGION_EDIT_METADATA   GCMergedRegionsState = 3
)

// Enum value maps for GCMergedRegionsState.
var (
	GCMergedRegionsState_name = map[int32]string{
		1: "GC_MERGED_REGIONS_PREPARE",
		2: "GC_MERGED_REGIONS_PURGE",
		3: "GC_REGION_EDIT_METADATA",
	}
	GCMergedRegionsState_value = map[string]int32{
		"GC_MERGED_REGIONS_PREPARE": 1,
		"GC_MERGED_REGIONS_PURGE":   2,
		"GC_REGION_EDIT_METADATA":   3,
	}
)

func (x GCMergedRegionsState) Enum() *GCMergedRegionsState {
	p := new(GCMergedRegionsState)
	*p = x
	return p
}

func (x GCMergedRegionsState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCMergedRegionsState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[19].Descriptor()
}

func (GCMergedRegionsState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[19]
}

func (x GCMergedRegionsState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GCMergedRegionsState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GCMergedRegionsState(num)
	return nil
}

// Deprecated: Use GCMergedRegionsState.Descriptor instead.
func (GCMergedRegionsState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{19}
}

type PeerModificationState int32

const (
	PeerModificationState_PRE_PEER_MODIFICATION                      PeerModificationState = 1
	PeerModificationState_UPDATE_PEER_STORAGE                        PeerModificationState = 2
	PeerModificationState_REFRESH_PEER_ON_RS                         PeerModificationState = 3
	PeerModificationState_SERIAL_PEER_REOPEN_REGIONS                 PeerModificationState = 4
	PeerModificationState_SERIAL_PEER_UPDATE_LAST_PUSHED_SEQ_ID      PeerModificationState = 5
	PeerModificationState_SERIAL_PEER_SET_PEER_ENABLED               PeerModificationState = 6
	PeerModificationState_SERIAL_PEER_ENABLE_PEER_REFRESH_PEER_ON_RS PeerModificationState = 7
	PeerModificationState_POST_PEER_MODIFICATION                     PeerModificationState = 8
)

// Enum value maps for PeerModificationState.
var (
	PeerModificationState_name = map[int32]string{
		1: "PRE_PEER_MODIFICATION",
		2: "UPDATE_PEER_STORAGE",
		3: "REFRESH_PEER_ON_RS",
		4: "SERIAL_PEER_REOPEN_REGIONS",
		5: "SERIAL_PEER_UPDATE_LAST_PUSHED_SEQ_ID",
		6: "SERIAL_PEER_SET_PEER_ENABLED",
		7: "SERIAL_PEER_ENABLE_PEER_REFRESH_PEER_ON_RS",
		8: "POST_PEER_MODIFICATION",
	}
	PeerModificationState_value = map[string]int32{
		"PRE_PEER_MODIFICATION":                      1,
		"UPDATE_PEER_STORAGE":                        2,
		"REFRESH_PEER_ON_RS":                         3,
		"SERIAL_PEER_REOPEN_REGIONS":                 4,
		"SERIAL_PEER_UPDATE_LAST_PUSHED_SEQ_ID":      5,
		"SERIAL_PEER_SET_PEER_ENABLED":               6,
		"SERIAL_PEER_ENABLE_PEER_REFRESH_PEER_ON_RS": 7,
		"POST_PEER_MODIFICATION":                     8,
	}
)

func (x PeerModificationState) Enum() *PeerModificationState {
	p := new(PeerModificationState)
	*p = x
	return p
}

func (x PeerModificationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerModificationState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[20].Descriptor()
}

func (PeerModificationState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[20]
}

func (x PeerModificationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PeerModificationState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PeerModificationState(num)
	return nil
}

// Deprecated: Use PeerModificationState.Descriptor instead.
func (PeerModificationState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{20}
}

type PeerModificationType int32

const (
	PeerModificationType_ADD_PEER           PeerModificationType = 1
	PeerModificationType_REMOVE_PEER        PeerModificationType = 2
	PeerModificationType_ENABLE_PEER        PeerModificationType = 3
	PeerModificationType_DISABLE_PEER       PeerModificationType = 4
	PeerModificationType_UPDATE_PEER_CONFIG PeerModificationType = 5
)

// Enum value maps for PeerModificationType.
var (
	PeerModificationType_name = map[int32]string{
		1: "ADD_PEER",
		2: "REMOVE_PEER",
		3: "ENABLE_PEER",
		4: "DISABLE_PEER",
		5: "UPDATE_PEER_CONFIG",
	}
	PeerModificationType_value = map[string]int32{
		"ADD_PEER":           1,
		"REMOVE_PEER":        2,
		"ENABLE_PEER":        3,
		"DISABLE_PEER":       4,
		"UPDATE_PEER_CONFIG": 5,
	}
)

func (x PeerModificationType) Enum() *PeerModificationType {
	p := new(PeerModificationType)
	*p = x
	return p
}

func (x PeerModificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerModificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[21].Descriptor()
}

func (PeerModificationType) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[21]
}

func (x PeerModificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PeerModificationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PeerModificationType(num)
	return nil
}

// Deprecated: Use PeerModificationType.Descriptor instead.
func (PeerModificationType) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{21}
}

type ReopenTableRegionsState int32

const (
	ReopenTableRegionsState_REOPEN_TABLE_REGIONS_GET_REGIONS      ReopenTableRegionsState = 1
	ReopenTableRegionsState_REOPEN_TABLE_REGIONS_REOPEN_REGIONS   ReopenTableRegionsState = 2
	ReopenTableRegionsState_REOPEN_TABLE_REGIONS_CONFIRM_REOPENED ReopenTableRegionsState = 3
)

// Enum value maps for ReopenTableRegionsState.
var (
	ReopenTableRegionsState_name = map[int32]string{
		1: "REOPEN_TABLE_REGIONS_GET_REGIONS",
		2: "REOPEN_TABLE_REGIONS_REOPEN_REGIONS",
		3: "REOPEN_TABLE_REGIONS_CONFIRM_REOPENED",
	}
	ReopenTableRegionsState_value = map[string]int32{
		"REOPEN_TABLE_REGIONS_GET_REGIONS":      1,
		"REOPEN_TABLE_REGIONS_REOPEN_REGIONS":   2,
		"REOPEN_TABLE_REGIONS_CONFIRM_REOPENED": 3,
	}
)

func (x ReopenTableRegionsState) Enum() *ReopenTableRegionsState {
	p := new(ReopenTableRegionsState)
	*p = x
	return p
}

func (x ReopenTableRegionsState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReopenTableRegionsState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[22].Descriptor()
}

func (ReopenTableRegionsState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[22]
}

func (x ReopenTableRegionsState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ReopenTableRegionsState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ReopenTableRegionsState(num)
	return nil
}

// Deprecated: Use ReopenTableRegionsState.Descriptor instead.
func (ReopenTableRegionsState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{22}
}

type InitMetaState int32

const (
	InitMetaState_INIT_META_ASSIGN_META InitMetaState = 1
)

// Enum value maps for InitMetaState.
var (
	InitMetaState_name = map[int32]string{
		1: "INIT_META_ASSIGN_META",
	}
	InitMetaState_value = map[string]int32{
		"INIT_META_ASSIGN_META": 1,
	}
)

func (x InitMetaState) Enum() *InitMetaState {
	p := new(InitMetaState)
	*p = x
	return p
}

func (x InitMetaState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InitMetaState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[23].Descriptor()
}

func (InitMetaState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[23]
}

func (x InitMetaState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *InitMetaState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = InitMetaState(num)
	return nil
}

// Deprecated: Use InitMetaState.Descriptor instead.
func (InitMetaState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{23}
}

type RegionStateTransitionState int32

const (
	RegionStateTransitionState_REGION_STATE_TRANSITION_GET_ASSIGN_CANDIDATE RegionStateTransitionState = 1
	RegionStateTransitionState_REGION_STATE_TRANSITION_OPEN                 RegionStateTransitionState = 2
	RegionStateTransitionState_REGION_STATE_TRANSITION_CONFIRM_OPENED       RegionStateTransitionState = 3
	RegionStateTransitionState_REGION_STATE_TRANSITION_CLOSE                RegionStateTransitionState = 4
	RegionStateTransitionState_REGION_STATE_TRANSITION_CONFIRM_CLOSED       RegionStateTransitionState = 5
)

// Enum value maps for RegionStateTransitionState.
var (
	RegionStateTransitionState_name = map[int32]string{
		1: "REGION_STATE_TRANSITION_GET_ASSIGN_CANDIDATE",
		2: "REGION_STATE_TRANSITION_OPEN",
		3: "REGION_STATE_TRANSITION_CONFIRM_OPENED",
		4: "REGION_STATE_TRANSITION_CLOSE",
		5: "REGION_STATE_TRANSITION_CONFIRM_CLOSED",
	}
	RegionStateTransitionState_value = map[string]int32{
		"REGION_STATE_TRANSITION_GET_ASSIGN_CANDIDATE": 1,
		"REGION_STATE_TRANSITION_OPEN":                 2,
		"REGION_STATE_TRANSITION_CONFIRM_OPENED":       3,
		"REGION_STATE_TRANSITION_CLOSE":                4,
		"REGION_STATE_TRANSITION_CONFIRM_CLOSED":       5,
	}
)

func (x RegionStateTransitionState) Enum() *RegionStateTransitionState {
	p := new(RegionStateTransitionState)
	*p = x
	return p
}

func (x RegionStateTransitionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegionStateTransitionState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[24].Descriptor()
}

func (RegionStateTransitionState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[24]
}

func (x RegionStateTransitionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RegionStateTransitionState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RegionStateTransitionState(num)
	return nil
}

// Deprecated: Use RegionStateTransitionState.Descriptor instead.
func (RegionStateTransitionState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{24}
}

type RegionTransitionType int32

const (
	RegionTransitionType_ASSIGN   RegionTransitionType = 1
	RegionTransitionType_UNASSIGN RegionTransitionType = 2
	RegionTransitionType_MOVE     RegionTransitionType = 3
	RegionTransitionType_REOPEN   RegionTransitionType = 4
)

// Enum value maps for RegionTransitionType.
var (
	RegionTransitionType_name = map[int32]string{
		1: "ASSIGN",
		2: "UNASSIGN",
		3: "MOVE",
		4: "REOPEN",
	}
	RegionTransitionType_value = map[string]int32{
		"ASSIGN":   1,
		"UNASSIGN": 2,
		"MOVE":     3,
		"REOPEN":   4,
	}
)

func (x RegionTransitionType) Enum() *RegionTransitionType {
	p := new(RegionTransitionType)
	*p = x
	return p
}

func (x RegionTransitionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegionTransitionType) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[25].Descriptor()
}

func (RegionTransitionType) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[25]
}

func (x RegionTransitionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RegionTransitionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RegionTransitionType(num)
	return nil
}

// Deprecated: Use RegionTransitionType.Descriptor instead.
func (RegionTransitionType) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{25}
}

type RegionRemoteProcedureBaseState int32

const (
	RegionRemoteProcedureBaseState_REGION_REMOTE_PROCEDURE_DISPATCH       RegionRemoteProcedureBaseState = 1
	RegionRemoteProcedureBaseState_REGION_REMOTE_PROCEDURE_REPORT_SUCCEED RegionRemoteProcedureBaseState = 2
	RegionRemoteProcedureBaseState_REGION_REMOTE_PROCEDURE_DISPATCH_FAIL  RegionRemoteProcedureBaseState = 3
	RegionRemoteProcedureBaseState_REGION_REMOTE_PROCEDURE_SERVER_CRASH   RegionRemoteProcedureBaseState = 4
)

// Enum value maps for RegionRemoteProcedureBaseState.
var (
	RegionRemoteProcedureBaseState_name = map[int32]string{
		1: "REGION_REMOTE_PROCEDURE_DISPATCH",
		2: "REGION_REMOTE_PROCEDURE_REPORT_SUCCEED",
		3: "REGION_REMOTE_PROCEDURE_DISPATCH_FAIL",
		4: "REGION_REMOTE_PROCEDURE_SERVER_CRASH",
	}
	RegionRemoteProcedureBaseState_value = map[string]int32{
		"REGION_REMOTE_PROCEDURE_DISPATCH":       1,
		"REGION_REMOTE_PROCEDURE_REPORT_SUCCEED": 2,
		"REGION_REMOTE_PROCEDURE_DISPATCH_FAIL":  3,
		"REGION_REMOTE_PROCEDURE_SERVER_CRASH":   4,
	}
)

func (x RegionRemoteProcedureBaseState) Enum() *RegionRemoteProcedureBaseState {
	p := new(RegionRemoteProcedureBaseState)
	*p = x
	return p
}

func (x RegionRemoteProcedureBaseState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegionRemoteProcedureBaseState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[26].Descriptor()
}

func (RegionRemoteProcedureBaseState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[26]
}

func (x RegionRemoteProcedureBaseState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RegionRemoteProcedureBaseState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RegionRemoteProcedureBaseState(num)
	return nil
}

// Deprecated: Use RegionRemoteProcedureBaseState.Descriptor instead.
func (RegionRemoteProcedureBaseState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{26}
}

type SwitchRpcThrottleState int32

const (
	SwitchRpcThrottleState_UPDATE_SWITCH_RPC_THROTTLE_STORAGE SwitchRpcThrottleState = 1
	SwitchRpcThrottleState_SWITCH_RPC_THROTTLE_ON_RS          SwitchRpcThrottleState = 2
	SwitchRpcThrottleState_POST_SWITCH_RPC_THROTTLE           SwitchRpcThrottleState = 3
)

// Enum value maps for SwitchRpcThrottleState.
var (
	SwitchRpcThrottleState_name = map[int32]string{
		1: "UPDATE_SWITCH_RPC_THROTTLE_STORAGE",
		2: "SWITCH_RPC_THROTTLE_ON_RS",
		3: "POST_SWITCH_RPC_THROTTLE",
	}
	SwitchRpcThrottleState_value = map[string]int32{
		"UPDATE_SWITCH_RPC_THROTTLE_STORAGE": 1,
		"SWITCH_RPC_THROTTLE_ON_RS":          2,
		"POST_SWITCH_RPC_THROTTLE":           3,
	}
)

func (x SwitchRpcThrottleState) Enum() *SwitchRpcThrottleState {
	p := new(SwitchRpcThrottleState)
	*p = x
	return p
}

func (x SwitchRpcThrottleState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwitchRpcThrottleState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[27].Descriptor()
}

func (SwitchRpcThrottleState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[27]
}

func (x SwitchRpcThrottleState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SwitchRpcThrottleState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SwitchRpcThrottleState(num)
	return nil
}

// Deprecated: Use SwitchRpcThrottleState.Descriptor instead.
func (SwitchRpcThrottleState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{27}
}

type SplitWALState int32

const (
	SplitWALState_ACQUIRE_SPLIT_WAL_WORKER SplitWALState = 1
	SplitWALState_DISPATCH_WAL_TO_WORKER   SplitWALState = 2
	SplitWALState_RELEASE_SPLIT_WORKER     SplitWALState = 3
)

// Enum value maps for SplitWALState.
var (
	SplitWALState_name = map[int32]string{
		1: "ACQUIRE_SPLIT_WAL_WORKER",
		2: "DISPATCH_WAL_TO_WORKER",
		3: "RELEASE_SPLIT_WORKER",
	}
	SplitWALState_value = map[string]int32{
		"ACQUIRE_SPLIT_WAL_WORKER": 1,
		"DISPATCH_WAL_TO_WORKER":   2,
		"RELEASE_SPLIT_WORKER":     3,
	}
)

func (x SplitWALState) Enum() *SplitWALState {
	p := new(SplitWALState)
	*p = x
	return p
}

func (x SplitWALState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SplitWALState) Descriptor() protoreflect.EnumDescriptor {
	return file_MasterProcedure_proto_enumTypes[28].Descriptor()
}

func (SplitWALState) Type() protoreflect.EnumType {
	return &file_MasterProcedure_proto_enumTypes[28]
}

func (x SplitWALState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SplitWALState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SplitWALState(num)
	return nil
}

// Deprecated: Use SplitWALState.Descriptor instead.
func (SplitWALState) EnumDescriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{28}
}

type CreateTableStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo    *UserInformation `protobuf:"bytes,1,req,name=user_info,json=userInfo" json:"user_info,omitempty"`
	TableSchema *TableSchema     `protobuf:"bytes,2,req,name=table_schema,json=tableSchema" json:"table_schema,omitempty"`
	RegionInfo  []*RegionInfo    `protobuf:"bytes,3,rep,name=region_info,json=regionInfo" json:"region_info,omitempty"`
}

func (x *CreateTableStateData) Reset() {
	*x = CreateTableStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableStateData) ProtoMessage() {}

func (x *CreateTableStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableStateData.ProtoReflect.Descriptor instead.
func (*CreateTableStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTableStateData) GetUserInfo() *UserInformation {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *CreateTableStateData) GetTableSchema() *TableSchema {
	if x != nil {
		return x.TableSchema
	}
	return nil
}

func (x *CreateTableStateData) GetRegionInfo() []*RegionInfo {
	if x != nil {
		return x.RegionInfo
	}
	return nil
}

type ModifyTableStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo                   *UserInformation `protobuf:"bytes,1,req,name=user_info,json=userInfo" json:"user_info,omitempty"`
	UnmodifiedTableSchema      *TableSchema     `protobuf:"bytes,2,opt,name=unmodified_table_schema,json=unmodifiedTableSchema" json:"unmodified_table_schema,omitempty"`
	ModifiedTableSchema        *TableSchema     `protobuf:"bytes,3,req,name=modified_table_schema,json=modifiedTableSchema" json:"modified_table_schema,omitempty"`
	DeleteColumnFamilyInModify *bool            `protobuf:"varint,4,req,name=delete_column_family_in_modify,json=deleteColumnFamilyInModify" json:"delete_column_family_in_modify,omitempty"`
	ShouldCheckDescriptor      *bool            `protobuf:"varint,5,opt,name=should_check_descriptor,json=shouldCheckDescriptor" json:"should_check_descriptor,omitempty"`
}

func (x *ModifyTableStateData) Reset() {
	*x = ModifyTableStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyTableStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyTableStateData) ProtoMessage() {}

func (x *ModifyTableStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyTableStateData.ProtoReflect.Descriptor instead.
func (*ModifyTableStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{1}
}

func (x *ModifyTableStateData) GetUserInfo() *UserInformation {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *ModifyTableStateData) GetUnmodifiedTableSchema() *TableSchema {
	if x != nil {
		return x.UnmodifiedTableSchema
	}
	return nil
}

func (x *ModifyTableStateData) GetModifiedTableSchema() *TableSchema {
	if x != nil {
		return x.ModifiedTableSchema
	}
	return nil
}

func (x *ModifyTableStateData) GetDeleteColumnFamilyInModify() bool {
	if x != nil && x.DeleteColumnFamilyInModify != nil {
		return *x.DeleteColumnFamilyInModify
	}
	return false
}

func (x *ModifyTableStateData) GetShouldCheckDescriptor() bool {
	if x != nil && x.ShouldCheckDescriptor != nil {
		return *x.ShouldCheckDescriptor
	}
	return false
}

type TruncateTableStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo       *UserInformation `protobuf:"bytes,1,req,name=user_info,json=userInfo" json:"user_info,omitempty"`
	PreserveSplits *bool            `protobuf:"varint,2,req,name=preserve_splits,json=preserveSplits" json:"preserve_splits,omitempty"`
	TableName      *TableName       `protobuf:"bytes,3,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	TableSchema    *TableSchema     `protobuf:"bytes,4,opt,name=table_schema,json=tableSchema" json:"table_schema,omitempty"`
	RegionInfo     []*RegionInfo    `protobuf:"bytes,5,rep,name=region_info,json=regionInfo" json:"region_info,omitempty"`
}

func (x *TruncateTableStateData) Reset() {
	*x = TruncateTableStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TruncateTableStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateTableStateData) ProtoMessage() {}

func (x *TruncateTableStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateTableStateData.ProtoReflect.Descriptor instead.
func (*TruncateTableStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{2}
}

func (x *TruncateTableStateData) GetUserInfo() *UserInformation {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *TruncateTableStateData) GetPreserveSplits() bool {
	if x != nil && x.PreserveSplits != nil {
		return *x.PreserveSplits
	}
	return false
}

func (x *TruncateTableStateData) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *TruncateTableStateData) GetTableSchema() *TableSchema {
	if x != nil {
		return x.TableSchema
	}
	return nil
}

func (x *TruncateTableStateData) GetRegionInfo() []*RegionInfo {
	if x != nil {
		return x.RegionInfo
	}
	return nil
}

type DeleteTableStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo   *UserInformation `protobuf:"bytes,1,req,name=user_info,json=userInfo" json:"user_info,omitempty"`
	TableName  *TableName       `protobuf:"bytes,2,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	RegionInfo []*RegionInfo    `protobuf:"bytes,3,rep,name=region_info,json=regionInfo" json:"region_info,omitempty"`
}

func (x *DeleteTableStateData) Reset() {
	*x = DeleteTableStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTableStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTableStateData) ProtoMessage() {}

func (x *DeleteTableStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTableStateData.ProtoReflect.Descriptor instead.
func (*DeleteTableStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteTableStateData) GetUserInfo() *UserInformation {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *DeleteTableStateData) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *DeleteTableStateData) GetRegionInfo() []*RegionInfo {
	if x != nil {
		return x.RegionInfo
	}
	return nil
}

type CreateNamespaceStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceDescriptor *NamespaceDescriptor `protobuf:"bytes,1,req,name=namespace_descriptor,json=namespaceDescriptor" json:"namespace_descriptor,omitempty"`
}

func (x *CreateNamespaceStateData) Reset() {
	*x = CreateNamespaceStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNamespaceStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamespaceStateData) ProtoMessage() {}

func (x *CreateNamespaceStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamespaceStateData.ProtoReflect.Descriptor instead.
func (*CreateNamespaceStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{4}
}

func (x *CreateNamespaceStateData) GetNamespaceDescriptor() *NamespaceDescriptor {
	if x != nil {
		return x.NamespaceDescriptor
	}
	return nil
}

type ModifyNamespaceStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceDescriptor           *NamespaceDescriptor `protobuf:"bytes,1,req,name=namespace_descriptor,json=namespaceDescriptor" json:"namespace_descriptor,omitempty"`
	UnmodifiedNamespaceDescriptor *NamespaceDescriptor `protobuf:"bytes,2,opt,name=unmodified_namespace_descriptor,json=unmodifiedNamespaceDescriptor" json:"unmodified_namespace_descriptor,omitempty"`
}

func (x *ModifyNamespaceStateData) Reset() {
	*x = ModifyNamespaceStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyNamespaceStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyNamespaceStateData) ProtoMessage() {}

func (x *ModifyNamespaceStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyNamespaceStateData.ProtoReflect.Descriptor instead.
func (*ModifyNamespaceStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{5}
}

func (x *ModifyNamespaceStateData) GetNamespaceDescriptor() *NamespaceDescriptor {
	if x != nil {
		return x.NamespaceDescriptor
	}
	return nil
}

func (x *ModifyNamespaceStateData) GetUnmodifiedNamespaceDescriptor() *NamespaceDescriptor {
	if x != nil {
		return x.UnmodifiedNamespaceDescriptor
	}
	return nil
}

type DeleteNamespaceStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceName       *string              `protobuf:"bytes,1,req,name=namespace_name,json=namespaceName" json:"namespace_name,omitempty"`
	NamespaceDescriptor *NamespaceDescriptor `protobuf:"bytes,2,opt,name=namespace_descriptor,json=namespaceDescriptor" json:"namespace_descriptor,omitempty"`
}

func (x *DeleteNamespaceStateData) Reset() {
	*x = DeleteNamespaceStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNamespaceStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNamespaceStateData) ProtoMessage() {}

func (x *DeleteNamespaceStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNamespaceStateData.ProtoReflect.Descriptor instead.
func (*DeleteNamespaceStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteNamespaceStateData) GetNamespaceName() string {
	if x != nil && x.NamespaceName != nil {
		return *x.NamespaceName
	}
	return ""
}

func (x *DeleteNamespaceStateData) GetNamespaceDescriptor() *NamespaceDescriptor {
	if x != nil {
		return x.NamespaceDescriptor
	}
	return nil
}

type EnableTableStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo  *UserInformation `protobuf:"bytes,1,req,name=user_info,json=userInfo" json:"user_info,omitempty"`
	TableName *TableName       `protobuf:"bytes,2,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	// not used any more, always false
	//
	// Deprecated: Do not use.
	SkipTableStateCheck *bool `protobuf:"varint,3,req,name=skip_table_state_check,json=skipTableStateCheck" json:"skip_table_state_check,omitempty"`
}

func (x *EnableTableStateData) Reset() {
	*x = EnableTableStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableTableStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableTableStateData) ProtoMessage() {}

func (x *EnableTableStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableTableStateData.ProtoReflect.Descriptor instead.
func (*EnableTableStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{7}
}

func (x *EnableTableStateData) GetUserInfo() *UserInformation {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *EnableTableStateData) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

// Deprecated: Do not use.
func (x *EnableTableStateData) GetSkipTableStateCheck() bool {
	if x != nil && x.SkipTableStateCheck != nil {
		return *x.SkipTableStateCheck
	}
	return false
}

type DisableTableStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo            *UserInformation `protobuf:"bytes,1,req,name=user_info,json=userInfo" json:"user_info,omitempty"`
	TableName           *TableName       `protobuf:"bytes,2,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	SkipTableStateCheck *bool            `protobuf:"varint,3,req,name=skip_table_state_check,json=skipTableStateCheck" json:"skip_table_state_check,omitempty"`
}

func (x *DisableTableStateData) Reset() {
	*x = DisableTableStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableTableStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableTableStateData) ProtoMessage() {}

func (x *DisableTableStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableTableStateData.ProtoReflect.Descriptor instead.
func (*DisableTableStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{8}
}

func (x *DisableTableStateData) GetUserInfo() *UserInformation {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *DisableTableStateData) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *DisableTableStateData) GetSkipTableStateCheck() bool {
	if x != nil && x.SkipTableStateCheck != nil {
		return *x.SkipTableStateCheck
	}
	return false
}

type RestoreParentToChildRegionsPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentRegionName *string `protobuf:"bytes,1,req,name=parent_region_name,json=parentRegionName" json:"parent_region_name,omitempty"`
	Child1RegionName *string `protobuf:"bytes,2,req,name=child1_region_name,json=child1RegionName" json:"child1_region_name,omitempty"`
	Child2RegionName *string `protobuf:"bytes,3,req,name=child2_region_name,json=child2RegionName" json:"child2_region_name,omitempty"`
}

func (x *RestoreParentToChildRegionsPair) Reset() {
	*x = RestoreParentToChildRegionsPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreParentToChildRegionsPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreParentToChildRegionsPair) ProtoMessage() {}

func (x *RestoreParentToChildRegionsPair) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreParentToChildRegionsPair.ProtoReflect.Descriptor instead.
func (*RestoreParentToChildRegionsPair) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{9}
}

func (x *RestoreParentToChildRegionsPair) GetParentRegionName() string {
	if x != nil && x.ParentRegionName != nil {
		return *x.ParentRegionName
	}
	return ""
}

func (x *RestoreParentToChildRegionsPair) GetChild1RegionName() string {
	if x != nil && x.Child1RegionName != nil {
		return *x.Child1RegionName
	}
	return ""
}

func (x *RestoreParentToChildRegionsPair) GetChild2RegionName() string {
	if x != nil && x.Child2RegionName != nil {
		return *x.Child2RegionName
	}
	return ""
}

type CloneSnapshotStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo                     *UserInformation                   `protobuf:"bytes,1,req,name=user_info,json=userInfo" json:"user_info,omitempty"`
	Snapshot                     *SnapshotDescription               `protobuf:"bytes,2,req,name=snapshot" json:"snapshot,omitempty"`
	TableSchema                  *TableSchema                       `protobuf:"bytes,3,req,name=table_schema,json=tableSchema" json:"table_schema,omitempty"`
	RegionInfo                   []*RegionInfo                      `protobuf:"bytes,4,rep,name=region_info,json=regionInfo" json:"region_info,omitempty"`
	ParentToChildRegionsPairList []*RestoreParentToChildRegionsPair `protobuf:"bytes,5,rep,name=parent_to_child_regions_pair_list,json=parentToChildRegionsPairList" json:"parent_to_child_regions_pair_list,omitempty"`
}

func (x *CloneSnapshotStateData) Reset() {
	*x = CloneSnapshotStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneSnapshotStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneSnapshotStateData) ProtoMessage() {}

func (x *CloneSnapshotStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneSnapshotStateData.ProtoReflect.Descriptor instead.
func (*CloneSnapshotStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{10}
}

func (x *CloneSnapshotStateData) GetUserInfo() *UserInformation {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *CloneSnapshotStateData) GetSnapshot() *SnapshotDescription {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *CloneSnapshotStateData) GetTableSchema() *TableSchema {
	if x != nil {
		return x.TableSchema
	}
	return nil
}

func (x *CloneSnapshotStateData) GetRegionInfo() []*RegionInfo {
	if x != nil {
		return x.RegionInfo
	}
	return nil
}

func (x *CloneSnapshotStateData) GetParentToChildRegionsPairList() []*RestoreParentToChildRegionsPair {
	if x != nil {
		return x.ParentToChildRegionsPairList
	}
	return nil
}

type RestoreSnapshotStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo                     *UserInformation                   `protobuf:"bytes,1,req,name=user_info,json=userInfo" json:"user_info,omitempty"`
	Snapshot                     *SnapshotDescription               `protobuf:"bytes,2,req,name=snapshot" json:"snapshot,omitempty"`
	ModifiedTableSchema          *TableSchema                       `protobuf:"bytes,3,req,name=modified_table_schema,json=modifiedTableSchema" json:"modified_table_schema,omitempty"`
	RegionInfoForRestore         []*RegionInfo                      `protobuf:"bytes,4,rep,name=region_info_for_restore,json=regionInfoForRestore" json:"region_info_for_restore,omitempty"`
	RegionInfoForRemove          []*RegionInfo                      `protobuf:"bytes,5,rep,name=region_info_for_remove,json=regionInfoForRemove" json:"region_info_for_remove,omitempty"`
	RegionInfoForAdd             []*RegionInfo                      `protobuf:"bytes,6,rep,name=region_info_for_add,json=regionInfoForAdd" json:"region_info_for_add,omitempty"`
	ParentToChildRegionsPairList []*RestoreParentToChildRegionsPair `protobuf:"bytes,7,rep,name=parent_to_child_regions_pair_list,json=parentToChildRegionsPairList" json:"parent_to_child_regions_pair_list,omitempty"`
}

func (x *RestoreSnapshotStateData) Reset() {
	*x = RestoreSnapshotStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreSnapshotStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreSnapshotStateData) ProtoMessage() {}

func (x *RestoreSnapshotStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreSnapshotStateData.ProtoReflect.Descriptor instead.
func (*RestoreSnapshotStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{11}
}

func (x *RestoreSnapshotStateData) GetUserInfo() *UserInformation {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *RestoreSnapshotStateData) GetSnapshot() *SnapshotDescription {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *RestoreSnapshotStateData) GetModifiedTableSchema() *TableSchema {
	if x != nil {
		return x.ModifiedTableSchema
	}
	return nil
}

func (x *RestoreSnapshotStateData) GetRegionInfoForRestore() []*RegionInfo {
	if x != nil {
		return x.RegionInfoForRestore
	}
	return nil
}

func (x *RestoreSnapshotStateData) GetRegionInfoForRemove() []*RegionInfo {
	if x != nil {
		return x.RegionInfoForRemove
	}
	return nil
}

func (x *RestoreSnapshotStateData) GetRegionInfoForAdd() []*RegionInfo {
	if x != nil {
		return x.RegionInfoForAdd
	}
	return nil
}

func (x *RestoreSnapshotStateData) GetParentToChildRegionsPairList() []*RestoreParentToChildRegionsPair {
	if x != nil {
		return x.ParentToChildRegionsPairList
	}
	return nil
}

type DispatchMergingRegionsStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo   *UserInformation `protobuf:"bytes,1,req,name=user_info,json=userInfo" json:"user_info,omitempty"`
	TableName  *TableName       `protobuf:"bytes,2,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	RegionInfo []*RegionInfo    `protobuf:"bytes,3,rep,name=region_info,json=regionInfo" json:"region_info,omitempty"`
	Forcible   *bool            `protobuf:"varint,4,opt,name=forcible" json:"forcible,omitempty"`
}

func (x *DispatchMergingRegionsStateData) Reset() {
	*x = DispatchMergingRegionsStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatchMergingRegionsStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatchMergingRegionsStateData) ProtoMessage() {}

func (x *DispatchMergingRegionsStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatchMergingRegionsStateData.ProtoReflect.Descriptor instead.
func (*DispatchMergingRegionsStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{12}
}

func (x *DispatchMergingRegionsStateData) GetUserInfo() *UserInformation {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *DispatchMergingRegionsStateData) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *DispatchMergingRegionsStateData) GetRegionInfo() []*RegionInfo {
	if x != nil {
		return x.RegionInfo
	}
	return nil
}

func (x *DispatchMergingRegionsStateData) GetForcible() bool {
	if x != nil && x.Forcible != nil {
		return *x.Forcible
	}
	return false
}

type SplitTableRegionStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo         *UserInformation `protobuf:"bytes,1,req,name=user_info,json=userInfo" json:"user_info,omitempty"`
	ParentRegionInfo *RegionInfo      `protobuf:"bytes,2,req,name=parent_region_info,json=parentRegionInfo" json:"parent_region_info,omitempty"`
	ChildRegionInfo  []*RegionInfo    `protobuf:"bytes,3,rep,name=child_region_info,json=childRegionInfo" json:"child_region_info,omitempty"`
}

func (x *SplitTableRegionStateData) Reset() {
	*x = SplitTableRegionStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitTableRegionStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitTableRegionStateData) ProtoMessage() {}

func (x *SplitTableRegionStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitTableRegionStateData.ProtoReflect.Descriptor instead.
func (*SplitTableRegionStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{13}
}

func (x *SplitTableRegionStateData) GetUserInfo() *UserInformation {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *SplitTableRegionStateData) GetParentRegionInfo() *RegionInfo {
	if x != nil {
		return x.ParentRegionInfo
	}
	return nil
}

func (x *SplitTableRegionStateData) GetChildRegionInfo() []*RegionInfo {
	if x != nil {
		return x.ChildRegionInfo
	}
	return nil
}

type MergeTableRegionsStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo         *UserInformation `protobuf:"bytes,1,req,name=user_info,json=userInfo" json:"user_info,omitempty"`
	RegionInfo       []*RegionInfo    `protobuf:"bytes,2,rep,name=region_info,json=regionInfo" json:"region_info,omitempty"`
	MergedRegionInfo *RegionInfo      `protobuf:"bytes,3,opt,name=merged_region_info,json=mergedRegionInfo" json:"merged_region_info,omitempty"`
	Forcible         *bool            `protobuf:"varint,4,opt,name=forcible,def=0" json:"forcible,omitempty"`
}

// Default values for MergeTableRegionsStateData fields.
const (
	Default_MergeTableRegionsStateData_Forcible = bool(false)
)

func (x *MergeTableRegionsStateData) Reset() {
	*x = MergeTableRegionsStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeTableRegionsStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeTableRegionsStateData) ProtoMessage() {}

func (x *MergeTableRegionsStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeTableRegionsStateData.ProtoReflect.Descriptor instead.
func (*MergeTableRegionsStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{14}
}

func (x *MergeTableRegionsStateData) GetUserInfo() *UserInformation {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *MergeTableRegionsStateData) GetRegionInfo() []*RegionInfo {
	if x != nil {
		return x.RegionInfo
	}
	return nil
}

func (x *MergeTableRegionsStateData) GetMergedRegionInfo() *RegionInfo {
	if x != nil {
		return x.MergedRegionInfo
	}
	return nil
}

func (x *MergeTableRegionsStateData) GetForcible() bool {
	if x != nil && x.Forcible != nil {
		return *x.Forcible
	}
	return Default_MergeTableRegionsStateData_Forcible
}

type ServerCrashStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerName *ServerName `protobuf:"bytes,1,req,name=server_name,json=serverName" json:"server_name,omitempty"`
	// optional bool DEPRECATED_distributed_log_replay = 2;
	RegionsOnCrashedServer []*RegionInfo `protobuf:"bytes,3,rep,name=regions_on_crashed_server,json=regionsOnCrashedServer" json:"regions_on_crashed_server,omitempty"`
	RegionsAssigned        []*RegionInfo `protobuf:"bytes,4,rep,name=regions_assigned,json=regionsAssigned" json:"regions_assigned,omitempty"`
	CarryingMeta           *bool         `protobuf:"varint,5,opt,name=carrying_meta,json=carryingMeta" json:"carrying_meta,omitempty"`
	ShouldSplitWal         *bool         `protobuf:"varint,6,opt,name=should_split_wal,json=shouldSplitWal,def=1" json:"should_split_wal,omitempty"`
}

// Default values for ServerCrashStateData fields.
const (
	Default_ServerCrashStateData_ShouldSplitWal = bool(true)
)

func (x *ServerCrashStateData) Reset() {
	*x = ServerCrashStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerCrashStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerCrashStateData) ProtoMessage() {}

func (x *ServerCrashStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerCrashStateData.ProtoReflect.Descriptor instead.
func (*ServerCrashStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{15}
}

func (x *ServerCrashStateData) GetServerName() *ServerName {
	if x != nil {
		return x.ServerName
	}
	return nil
}

func (x *ServerCrashStateData) GetRegionsOnCrashedServer() []*RegionInfo {
	if x != nil {
		return x.RegionsOnCrashedServer
	}
	return nil
}

func (x *ServerCrashStateData) GetRegionsAssigned() []*RegionInfo {
	if x != nil {
		return x.RegionsAssigned
	}
	return nil
}

func (x *ServerCrashStateData) GetCarryingMeta() bool {
	if x != nil && x.CarryingMeta != nil {
		return *x.CarryingMeta
	}
	return false
}

func (x *ServerCrashStateData) GetShouldSplitWal() bool {
	if x != nil && x.ShouldSplitWal != nil {
		return *x.ShouldSplitWal
	}
	return Default_ServerCrashStateData_ShouldSplitWal
}

type RecoverMetaStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedMetaServer *ServerName `protobuf:"bytes,1,opt,name=failed_meta_server,json=failedMetaServer" json:"failed_meta_server,omitempty"`
	ShouldSplitWal   *bool       `protobuf:"varint,2,opt,name=should_split_wal,json=shouldSplitWal,def=1" json:"should_split_wal,omitempty"`
	ReplicaId        *int32      `protobuf:"varint,3,opt,name=replica_id,json=replicaId,def=0" json:"replica_id,omitempty"`
}

// Default values for RecoverMetaStateData fields.
const (
	Default_RecoverMetaStateData_ShouldSplitWal = bool(true)
	Default_RecoverMetaStateData_ReplicaId      = int32(0)
)

func (x *RecoverMetaStateData) Reset() {
	*x = RecoverMetaStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverMetaStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverMetaStateData) ProtoMessage() {}

func (x *RecoverMetaStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverMetaStateData.ProtoReflect.Descriptor instead.
func (*RecoverMetaStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{16}
}

func (x *RecoverMetaStateData) GetFailedMetaServer() *ServerName {
	if x != nil {
		return x.FailedMetaServer
	}
	return nil
}

func (x *RecoverMetaStateData) GetShouldSplitWal() bool {
	if x != nil && x.ShouldSplitWal != nil {
		return *x.ShouldSplitWal
	}
	return Default_RecoverMetaStateData_ShouldSplitWal
}

func (x *RecoverMetaStateData) GetReplicaId() int32 {
	if x != nil && x.ReplicaId != nil {
		return *x.ReplicaId
	}
	return Default_RecoverMetaStateData_ReplicaId
}

type AssignRegionStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransitionState *RegionTransitionState `protobuf:"varint,1,req,name=transition_state,json=transitionState,enum=hbase.pb.RegionTransitionState" json:"transition_state,omitempty"`
	RegionInfo      *RegionInfo            `protobuf:"bytes,2,req,name=region_info,json=regionInfo" json:"region_info,omitempty"`
	ForceNewPlan    *bool                  `protobuf:"varint,3,opt,name=force_new_plan,json=forceNewPlan,def=0" json:"force_new_plan,omitempty"`
	TargetServer    *ServerName            `protobuf:"bytes,4,opt,name=target_server,json=targetServer" json:"target_server,omitempty"`
	// Current attempt index used for expotential backoff when stuck
	Attempt *int32 `protobuf:"varint,5,opt,name=attempt" json:"attempt,omitempty"`
}

// Default values for AssignRegionStateData fields.
const (
	Default_AssignRegionStateData_ForceNewPlan = bool(false)
)

func (x *AssignRegionStateData) Reset() {
	*x = AssignRegionStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignRegionStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignRegionStateData) ProtoMessage() {}

func (x *AssignRegionStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignRegionStateData.ProtoReflect.Descriptor instead.
func (*AssignRegionStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{17}
}

func (x *AssignRegionStateData) GetTransitionState() RegionTransitionState {
	if x != nil && x.TransitionState != nil {
		return *x.TransitionState
	}
	return RegionTransitionState_REGION_TRANSITION_QUEUE
}

func (x *AssignRegionStateData) GetRegionInfo() *RegionInfo {
	if x != nil {
		return x.RegionInfo
	}
	return nil
}

func (x *AssignRegionStateData) GetForceNewPlan() bool {
	if x != nil && x.ForceNewPlan != nil {
		return *x.ForceNewPlan
	}
	return Default_AssignRegionStateData_ForceNewPlan
}

func (x *AssignRegionStateData) GetTargetServer() *ServerName {
	if x != nil {
		return x.TargetServer
	}
	return nil
}

func (x *AssignRegionStateData) GetAttempt() int32 {
	if x != nil && x.Attempt != nil {
		return *x.Attempt
	}
	return 0
}

type UnassignRegionStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransitionState *RegionTransitionState `protobuf:"varint,1,req,name=transition_state,json=transitionState,enum=hbase.pb.RegionTransitionState" json:"transition_state,omitempty"`
	RegionInfo      *RegionInfo            `protobuf:"bytes,2,req,name=region_info,json=regionInfo" json:"region_info,omitempty"`
	// This is optional info; it is the servername we will
	// subsequently assign the region too... it may be null.
	DestinationServer *ServerName `protobuf:"bytes,3,opt,name=destination_server,json=destinationServer" json:"destination_server,omitempty"`
	// This is the server currently hosting the Region, the
	// server we will send the unassign rpc too.
	HostingServer          *ServerName `protobuf:"bytes,5,opt,name=hosting_server,json=hostingServer" json:"hosting_server,omitempty"`
	Force                  *bool       `protobuf:"varint,4,opt,name=force,def=0" json:"force,omitempty"`
	RemoveAfterUnassigning *bool       `protobuf:"varint,6,opt,name=remove_after_unassigning,json=removeAfterUnassigning,def=0" json:"remove_after_unassigning,omitempty"`
	// Current attempt index used for expotential backoff when stuck
	Attempt *int32 `protobuf:"varint,7,opt,name=attempt" json:"attempt,omitempty"`
}

// Default values for UnassignRegionStateData fields.
const (
	Default_UnassignRegionStateData_Force                  = bool(false)
	Default_UnassignRegionStateData_RemoveAfterUnassigning = bool(false)
)

func (x *UnassignRegionStateData) Reset() {
	*x = UnassignRegionStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnassignRegionStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnassignRegionStateData) ProtoMessage() {}

func (x *UnassignRegionStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnassignRegionStateData.ProtoReflect.Descriptor instead.
func (*UnassignRegionStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{18}
}

func (x *UnassignRegionStateData) GetTransitionState() RegionTransitionState {
	if x != nil && x.TransitionState != nil {
		return *x.TransitionState
	}
	return RegionTransitionState_REGION_TRANSITION_QUEUE
}

func (x *UnassignRegionStateData) GetRegionInfo() *RegionInfo {
	if x != nil {
		return x.RegionInfo
	}
	return nil
}

func (x *UnassignRegionStateData) GetDestinationServer() *ServerName {
	if x != nil {
		return x.DestinationServer
	}
	return nil
}

func (x *UnassignRegionStateData) GetHostingServer() *ServerName {
	if x != nil {
		return x.HostingServer
	}
	return nil
}

func (x *UnassignRegionStateData) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return Default_UnassignRegionStateData_Force
}

func (x *UnassignRegionStateData) GetRemoveAfterUnassigning() bool {
	if x != nil && x.RemoveAfterUnassigning != nil {
		return *x.RemoveAfterUnassigning
	}
	return Default_UnassignRegionStateData_RemoveAfterUnassigning
}

func (x *UnassignRegionStateData) GetAttempt() int32 {
	if x != nil && x.Attempt != nil {
		return *x.Attempt
	}
	return 0
}

type MoveRegionStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionInfo   *RegionInfo `protobuf:"bytes,1,opt,name=region_info,json=regionInfo" json:"region_info,omitempty"`
	SourceServer *ServerName `protobuf:"bytes,2,req,name=source_server,json=sourceServer" json:"source_server,omitempty"`
	// if destination server not specified, its selected with load balancer
	DestinationServer *ServerName `protobuf:"bytes,3,opt,name=destination_server,json=destinationServer" json:"destination_server,omitempty"`
}

func (x *MoveRegionStateData) Reset() {
	*x = MoveRegionStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveRegionStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveRegionStateData) ProtoMessage() {}

func (x *MoveRegionStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveRegionStateData.ProtoReflect.Descriptor instead.
func (*MoveRegionStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{19}
}

func (x *MoveRegionStateData) GetRegionInfo() *RegionInfo {
	if x != nil {
		return x.RegionInfo
	}
	return nil
}

func (x *MoveRegionStateData) GetSourceServer() *ServerName {
	if x != nil {
		return x.SourceServer
	}
	return nil
}

func (x *MoveRegionStateData) GetDestinationServer() *ServerName {
	if x != nil {
		return x.DestinationServer
	}
	return nil
}

type GCRegionStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionInfo *RegionInfo `protobuf:"bytes,1,req,name=region_info,json=regionInfo" json:"region_info,omitempty"`
}

func (x *GCRegionStateData) Reset() {
	*x = GCRegionStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCRegionStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCRegionStateData) ProtoMessage() {}

func (x *GCRegionStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCRegionStateData.ProtoReflect.Descriptor instead.
func (*GCRegionStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{20}
}

func (x *GCRegionStateData) GetRegionInfo() *RegionInfo {
	if x != nil {
		return x.RegionInfo
	}
	return nil
}

type GCMergedRegionsStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentA     *RegionInfo `protobuf:"bytes,1,req,name=parent_a,json=parentA" json:"parent_a,omitempty"`
	ParentB     *RegionInfo `protobuf:"bytes,2,req,name=parent_b,json=parentB" json:"parent_b,omitempty"`
	MergedChild *RegionInfo `protobuf:"bytes,3,req,name=merged_child,json=mergedChild" json:"merged_child,omitempty"`
}

func (x *GCMergedRegionsStateData) Reset() {
	*x = GCMergedRegionsStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCMergedRegionsStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCMergedRegionsStateData) ProtoMessage() {}

func (x *GCMergedRegionsStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCMergedRegionsStateData.ProtoReflect.Descriptor instead.
func (*GCMergedRegionsStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{21}
}

func (x *GCMergedRegionsStateData) GetParentA() *RegionInfo {
	if x != nil {
		return x.ParentA
	}
	return nil
}

func (x *GCMergedRegionsStateData) GetParentB() *RegionInfo {
	if x != nil {
		return x.ParentB
	}
	return nil
}

func (x *GCMergedRegionsStateData) GetMergedChild() *RegionInfo {
	if x != nil {
		return x.MergedChild
	}
	return nil
}

type PeerModificationStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId *string `protobuf:"bytes,1,req,name=peer_id,json=peerId" json:"peer_id,omitempty"`
}

func (x *PeerModificationStateData) Reset() {
	*x = PeerModificationStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerModificationStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerModificationStateData) ProtoMessage() {}

func (x *PeerModificationStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerModificationStateData.ProtoReflect.Descriptor instead.
func (*PeerModificationStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{22}
}

func (x *PeerModificationStateData) GetPeerId() string {
	if x != nil && x.PeerId != nil {
		return *x.PeerId
	}
	return ""
}

type RefreshPeerStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId       *string               `protobuf:"bytes,1,req,name=peer_id,json=peerId" json:"peer_id,omitempty"`
	Type         *PeerModificationType `protobuf:"varint,2,req,name=type,enum=hbase.pb.PeerModificationType" json:"type,omitempty"`
	TargetServer *ServerName           `protobuf:"bytes,3,req,name=target_server,json=targetServer" json:"target_server,omitempty"`
}

func (x *RefreshPeerStateData) Reset() {
	*x = RefreshPeerStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshPeerStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshPeerStateData) ProtoMessage() {}

func (x *RefreshPeerStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshPeerStateData.ProtoReflect.Descriptor instead.
func (*RefreshPeerStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{23}
}

func (x *RefreshPeerStateData) GetPeerId() string {
	if x != nil && x.PeerId != nil {
		return *x.PeerId
	}
	return ""
}

func (x *RefreshPeerStateData) GetType() PeerModificationType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return PeerModificationType_ADD_PEER
}

func (x *RefreshPeerStateData) GetTargetServer() *ServerName {
	if x != nil {
		return x.TargetServer
	}
	return nil
}

type RefreshPeerParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId       *string               `protobuf:"bytes,1,req,name=peer_id,json=peerId" json:"peer_id,omitempty"`
	Type         *PeerModificationType `protobuf:"varint,2,req,name=type,enum=hbase.pb.PeerModificationType" json:"type,omitempty"`
	TargetServer *ServerName           `protobuf:"bytes,3,req,name=target_server,json=targetServer" json:"target_server,omitempty"`
}

func (x *RefreshPeerParameter) Reset() {
	*x = RefreshPeerParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshPeerParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshPeerParameter) ProtoMessage() {}

func (x *RefreshPeerParameter) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshPeerParameter.ProtoReflect.Descriptor instead.
func (*RefreshPeerParameter) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{24}
}

func (x *RefreshPeerParameter) GetPeerId() string {
	if x != nil && x.PeerId != nil {
		return *x.PeerId
	}
	return ""
}

func (x *RefreshPeerParameter) GetType() PeerModificationType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return PeerModificationType_ADD_PEER
}

func (x *RefreshPeerParameter) GetTargetServer() *ServerName {
	if x != nil {
		return x.TargetServer
	}
	return nil
}

type PeerProcedureStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId *string `protobuf:"bytes,1,req,name=peer_id,json=peerId" json:"peer_id,omitempty"`
}

func (x *PeerProcedureStateData) Reset() {
	*x = PeerProcedureStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerProcedureStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerProcedureStateData) ProtoMessage() {}

func (x *PeerProcedureStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerProcedureStateData.ProtoReflect.Descriptor instead.
func (*PeerProcedureStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{25}
}

func (x *PeerProcedureStateData) GetPeerId() string {
	if x != nil && x.PeerId != nil {
		return *x.PeerId
	}
	return ""
}

type AddPeerStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerConfig *ReplicationPeer `protobuf:"bytes,1,req,name=peer_config,json=peerConfig" json:"peer_config,omitempty"`
	Enabled    *bool            `protobuf:"varint,2,req,name=enabled" json:"enabled,omitempty"`
}

func (x *AddPeerStateData) Reset() {
	*x = AddPeerStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPeerStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPeerStateData) ProtoMessage() {}

func (x *AddPeerStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPeerStateData.ProtoReflect.Descriptor instead.
func (*AddPeerStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{26}
}

func (x *AddPeerStateData) GetPeerConfig() *ReplicationPeer {
	if x != nil {
		return x.PeerConfig
	}
	return nil
}

func (x *AddPeerStateData) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type UpdatePeerConfigStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerConfig    *ReplicationPeer `protobuf:"bytes,1,req,name=peer_config,json=peerConfig" json:"peer_config,omitempty"`
	OldPeerConfig *ReplicationPeer `protobuf:"bytes,2,opt,name=old_peer_config,json=oldPeerConfig" json:"old_peer_config,omitempty"`
	Enabled       *bool            `protobuf:"varint,3,req,name=enabled" json:"enabled,omitempty"`
}

func (x *UpdatePeerConfigStateData) Reset() {
	*x = UpdatePeerConfigStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePeerConfigStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePeerConfigStateData) ProtoMessage() {}

func (x *UpdatePeerConfigStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePeerConfigStateData.ProtoReflect.Descriptor instead.
func (*UpdatePeerConfigStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{27}
}

func (x *UpdatePeerConfigStateData) GetPeerConfig() *ReplicationPeer {
	if x != nil {
		return x.PeerConfig
	}
	return nil
}

func (x *UpdatePeerConfigStateData) GetOldPeerConfig() *ReplicationPeer {
	if x != nil {
		return x.OldPeerConfig
	}
	return nil
}

func (x *UpdatePeerConfigStateData) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type RemovePeerStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerConfig *ReplicationPeer `protobuf:"bytes,1,opt,name=peer_config,json=peerConfig" json:"peer_config,omitempty"`
}

func (x *RemovePeerStateData) Reset() {
	*x = RemovePeerStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePeerStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePeerStateData) ProtoMessage() {}

func (x *RemovePeerStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePeerStateData.ProtoReflect.Descriptor instead.
func (*RemovePeerStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{28}
}

func (x *RemovePeerStateData) GetPeerConfig() *ReplicationPeer {
	if x != nil {
		return x.PeerConfig
	}
	return nil
}

type EnablePeerStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnablePeerStateData) Reset() {
	*x = EnablePeerStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnablePeerStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnablePeerStateData) ProtoMessage() {}

func (x *EnablePeerStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnablePeerStateData.ProtoReflect.Descriptor instead.
func (*EnablePeerStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{29}
}

type DisablePeerStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisablePeerStateData) Reset() {
	*x = DisablePeerStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisablePeerStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisablePeerStateData) ProtoMessage() {}

func (x *DisablePeerStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisablePeerStateData.ProtoReflect.Descriptor instead.
func (*DisablePeerStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{30}
}

type ReopenTableRegionsStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName *TableName        `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	Region    []*RegionLocation `protobuf:"bytes,2,rep,name=region" json:"region,omitempty"`
}

func (x *ReopenTableRegionsStateData) Reset() {
	*x = ReopenTableRegionsStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReopenTableRegionsStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReopenTableRegionsStateData) ProtoMessage() {}

func (x *ReopenTableRegionsStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReopenTableRegionsStateData.ProtoReflect.Descriptor instead.
func (*ReopenTableRegionsStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{31}
}

func (x *ReopenTableRegionsStateData) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *ReopenTableRegionsStateData) GetRegion() []*RegionLocation {
	if x != nil {
		return x.Region
	}
	return nil
}

type InitMetaStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InitMetaStateData) Reset() {
	*x = InitMetaStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitMetaStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitMetaStateData) ProtoMessage() {}

func (x *InitMetaStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitMetaStateData.ProtoReflect.Descriptor instead.
func (*InitMetaStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{32}
}

type RegionStateTransitionStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            *RegionTransitionType `protobuf:"varint,1,req,name=type,enum=hbase.pb.RegionTransitionType" json:"type,omitempty"`
	AssignCandidate *ServerName           `protobuf:"bytes,2,opt,name=assign_candidate,json=assignCandidate" json:"assign_candidate,omitempty"`
	ForceNewPlan    *bool                 `protobuf:"varint,3,req,name=force_new_plan,json=forceNewPlan" json:"force_new_plan,omitempty"`
}

func (x *RegionStateTransitionStateData) Reset() {
	*x = RegionStateTransitionStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionStateTransitionStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionStateTransitionStateData) ProtoMessage() {}

func (x *RegionStateTransitionStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionStateTransitionStateData.ProtoReflect.Descriptor instead.
func (*RegionStateTransitionStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{33}
}

func (x *RegionStateTransitionStateData) GetType() RegionTransitionType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return RegionTransitionType_ASSIGN
}

func (x *RegionStateTransitionStateData) GetAssignCandidate() *ServerName {
	if x != nil {
		return x.AssignCandidate
	}
	return nil
}

func (x *RegionStateTransitionStateData) GetForceNewPlan() bool {
	if x != nil && x.ForceNewPlan != nil {
		return *x.ForceNewPlan
	}
	return false
}

type RegionRemoteProcedureBaseStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region         *RegionInfo                           `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	TargetServer   *ServerName                           `protobuf:"bytes,2,req,name=target_server,json=targetServer" json:"target_server,omitempty"`
	State          *RegionRemoteProcedureBaseState       `protobuf:"varint,3,req,name=state,enum=hbase.pb.RegionRemoteProcedureBaseState" json:"state,omitempty"`
	TransitionCode *RegionStateTransition_TransitionCode `protobuf:"varint,4,opt,name=transition_code,json=transitionCode,enum=hbase.pb.RegionStateTransition_TransitionCode" json:"transition_code,omitempty"`
	SeqId          *int64                                `protobuf:"varint,5,opt,name=seq_id,json=seqId" json:"seq_id,omitempty"`
}

func (x *RegionRemoteProcedureBaseStateData) Reset() {
	*x = RegionRemoteProcedureBaseStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionRemoteProcedureBaseStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionRemoteProcedureBaseStateData) ProtoMessage() {}

func (x *RegionRemoteProcedureBaseStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionRemoteProcedureBaseStateData.ProtoReflect.Descriptor instead.
func (*RegionRemoteProcedureBaseStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{34}
}

func (x *RegionRemoteProcedureBaseStateData) GetRegion() *RegionInfo {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *RegionRemoteProcedureBaseStateData) GetTargetServer() *ServerName {
	if x != nil {
		return x.TargetServer
	}
	return nil
}

func (x *RegionRemoteProcedureBaseStateData) GetState() RegionRemoteProcedureBaseState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return RegionRemoteProcedureBaseState_REGION_REMOTE_PROCEDURE_DISPATCH
}

func (x *RegionRemoteProcedureBaseStateData) GetTransitionCode() RegionStateTransition_TransitionCode {
	if x != nil && x.TransitionCode != nil {
		return *x.TransitionCode
	}
	return RegionStateTransition_OPENED
}

func (x *RegionRemoteProcedureBaseStateData) GetSeqId() int64 {
	if x != nil && x.SeqId != nil {
		return *x.SeqId
	}
	return 0
}

type OpenRegionProcedureStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OpenRegionProcedureStateData) Reset() {
	*x = OpenRegionProcedureStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenRegionProcedureStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenRegionProcedureStateData) ProtoMessage() {}

func (x *OpenRegionProcedureStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenRegionProcedureStateData.ProtoReflect.Descriptor instead.
func (*OpenRegionProcedureStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{35}
}

type CloseRegionProcedureStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssignCandidate *ServerName `protobuf:"bytes,1,opt,name=assign_candidate,json=assignCandidate" json:"assign_candidate,omitempty"`
}

func (x *CloseRegionProcedureStateData) Reset() {
	*x = CloseRegionProcedureStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseRegionProcedureStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseRegionProcedureStateData) ProtoMessage() {}

func (x *CloseRegionProcedureStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseRegionProcedureStateData.ProtoReflect.Descriptor instead.
func (*CloseRegionProcedureStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{36}
}

func (x *CloseRegionProcedureStateData) GetAssignCandidate() *ServerName {
	if x != nil {
		return x.AssignCandidate
	}
	return nil
}

type SwitchRpcThrottleStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpcThrottleEnabled *bool `protobuf:"varint,1,req,name=rpc_throttle_enabled,json=rpcThrottleEnabled" json:"rpc_throttle_enabled,omitempty"`
}

func (x *SwitchRpcThrottleStateData) Reset() {
	*x = SwitchRpcThrottleStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchRpcThrottleStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchRpcThrottleStateData) ProtoMessage() {}

func (x *SwitchRpcThrottleStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchRpcThrottleStateData.ProtoReflect.Descriptor instead.
func (*SwitchRpcThrottleStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{37}
}

func (x *SwitchRpcThrottleStateData) GetRpcThrottleEnabled() bool {
	if x != nil && x.RpcThrottleEnabled != nil {
		return *x.RpcThrottleEnabled
	}
	return false
}

type SwitchRpcThrottleRemoteStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetServer       *ServerName `protobuf:"bytes,1,req,name=target_server,json=targetServer" json:"target_server,omitempty"`
	RpcThrottleEnabled *bool       `protobuf:"varint,2,req,name=rpc_throttle_enabled,json=rpcThrottleEnabled" json:"rpc_throttle_enabled,omitempty"`
}

func (x *SwitchRpcThrottleRemoteStateData) Reset() {
	*x = SwitchRpcThrottleRemoteStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchRpcThrottleRemoteStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchRpcThrottleRemoteStateData) ProtoMessage() {}

func (x *SwitchRpcThrottleRemoteStateData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchRpcThrottleRemoteStateData.ProtoReflect.Descriptor instead.
func (*SwitchRpcThrottleRemoteStateData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{38}
}

func (x *SwitchRpcThrottleRemoteStateData) GetTargetServer() *ServerName {
	if x != nil {
		return x.TargetServer
	}
	return nil
}

func (x *SwitchRpcThrottleRemoteStateData) GetRpcThrottleEnabled() bool {
	if x != nil && x.RpcThrottleEnabled != nil {
		return *x.RpcThrottleEnabled
	}
	return false
}

type SplitWALParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalPath *string `protobuf:"bytes,1,req,name=wal_path,json=walPath" json:"wal_path,omitempty"`
}

func (x *SplitWALParameter) Reset() {
	*x = SplitWALParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitWALParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitWALParameter) ProtoMessage() {}

func (x *SplitWALParameter) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitWALParameter.ProtoReflect.Descriptor instead.
func (*SplitWALParameter) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{39}
}

func (x *SplitWALParameter) GetWalPath() string {
	if x != nil && x.WalPath != nil {
		return *x.WalPath
	}
	return ""
}

type SplitWALData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalPath       *string     `protobuf:"bytes,1,req,name=wal_path,json=walPath" json:"wal_path,omitempty"`
	CrashedServer *ServerName `protobuf:"bytes,2,req,name=crashed_server,json=crashedServer" json:"crashed_server,omitempty"`
	Worker        *ServerName `protobuf:"bytes,3,opt,name=worker" json:"worker,omitempty"`
}

func (x *SplitWALData) Reset() {
	*x = SplitWALData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitWALData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitWALData) ProtoMessage() {}

func (x *SplitWALData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitWALData.ProtoReflect.Descriptor instead.
func (*SplitWALData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{40}
}

func (x *SplitWALData) GetWalPath() string {
	if x != nil && x.WalPath != nil {
		return *x.WalPath
	}
	return ""
}

func (x *SplitWALData) GetCrashedServer() *ServerName {
	if x != nil {
		return x.CrashedServer
	}
	return nil
}

func (x *SplitWALData) GetWorker() *ServerName {
	if x != nil {
		return x.Worker
	}
	return nil
}

type SplitWALRemoteData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalPath       *string     `protobuf:"bytes,1,req,name=wal_path,json=walPath" json:"wal_path,omitempty"`
	CrashedServer *ServerName `protobuf:"bytes,2,req,name=crashed_server,json=crashedServer" json:"crashed_server,omitempty"`
	Worker        *ServerName `protobuf:"bytes,3,req,name=worker" json:"worker,omitempty"`
}

func (x *SplitWALRemoteData) Reset() {
	*x = SplitWALRemoteData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterProcedure_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitWALRemoteData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitWALRemoteData) ProtoMessage() {}

func (x *SplitWALRemoteData) ProtoReflect() protoreflect.Message {
	mi := &file_MasterProcedure_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitWALRemoteData.ProtoReflect.Descriptor instead.
func (*SplitWALRemoteData) Descriptor() ([]byte, []int) {
	return file_MasterProcedure_proto_rawDescGZIP(), []int{41}
}

func (x *SplitWALRemoteData) GetWalPath() string {
	if x != nil && x.WalPath != nil {
		return *x.WalPath
	}
	return ""
}

func (x *SplitWALRemoteData) GetCrashedServer() *ServerName {
	if x != nil {
		return x.CrashedServer
	}
	return nil
}

func (x *SplitWALRemoteData) GetWorker() *ServerName {
	if x != nil {
		return x.Worker
	}
	return nil
}

var File_MasterProcedure_proto protoreflect.FileDescriptor

var file_MasterProcedure_proto_rawDesc = []byte{
	0x0a, 0x15, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x1a, 0x0b, 0x48, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09,
	0x52, 0x50, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x36, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe4, 0x02, 0x0a, 0x14, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x36, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x17, 0x75, 0x6e, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x15, 0x75, 0x6e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x49, 0x0a, 0x15, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x13,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x42, 0x0a, 0x1e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x1a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49,
	0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x22,
	0x9e, 0x02, 0x0a, 0x16, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0b, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0xb9, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6c, 0x0a, 0x18,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x14, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x22, 0xd3, 0x01, 0x0a, 0x18, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x52, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x65, 0x0a, 0x1f, 0x75, 0x6e, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x52, 0x1d, 0x75, 0x6e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x22, 0x93, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a,
	0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x52, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x22, 0xbb, 0x01, 0x0a, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x36, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x16, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x13, 0x73, 0x6b, 0x69, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x22, 0xb8, 0x01, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x6b,
	0x69, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x13, 0x73, 0x6b, 0x69, 0x70,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22,
	0xab, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x50,
	0x61, 0x69, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x31, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x31, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x32, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x32, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf0, 0x02,
	0x0a, 0x16, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x39, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x72, 0x0a, 0x21,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x1c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xa9, 0x04, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x12, 0x49, 0x0a, 0x15, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x13, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x4b, 0x0a, 0x17, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x14, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x49, 0x0a, 0x16, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x12, 0x43, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x12, 0x72, 0x0a, 0x21, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x69, 0x72, 0x52, 0x1c,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe0, 0x01, 0x0a,
	0x1f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x36, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0b,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x63, 0x69, 0x62, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x63, 0x69, 0x62, 0x6c, 0x65, 0x22,
	0xd9, 0x01, 0x0a, 0x19, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x11, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf2, 0x01, 0x0a, 0x1a,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x12, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a,
	0x08, 0x66, 0x6f, 0x72, 0x63, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x63, 0x69, 0x62, 0x6c, 0x65,
	0x22, 0xb4, 0x02, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x72, 0x61, 0x73, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x4f, 0x0a, 0x19, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x63,
	0x72, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x73, 0x4f, 0x6e, 0x43, 0x72, 0x61, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x3f, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x72, 0x79,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x57, 0x61, 0x6c, 0x22, 0xac, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x42, 0x0a, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x57, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x22, 0x9c, 0x02, 0x0a, 0x15, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x4a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0b,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x77,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x39, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x22, 0x96, 0x03, 0x0a, 0x17, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x4a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a,
	0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0e, 0x68, 0x6f, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x18, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x16, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x22, 0xcc,
	0x01, 0x0a, 0x13, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a,
	0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x4a, 0x0a,
	0x11, 0x47, 0x43, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb5, 0x01, 0x0a, 0x18, 0x47, 0x43,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x62, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x12, 0x37, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x64, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x22, 0x34, 0x0a, 0x19, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a,
	0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x9e, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x50, 0x65, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39,
	0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x31, 0x0a, 0x16, 0x50, 0x65, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x10,
	0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x41, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x51, 0x0a,
	0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x15, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x83, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x32, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x13, 0x0a, 0x11, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xbb, 0x01, 0x0a, 0x1e, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x3f, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0xbd, 0x02, 0x0a, 0x22, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2c, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a,
	0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x4f, 0x70, 0x65, 0x6e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x60, 0x0a, 0x1d, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x10, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x22, 0x4e, 0x0a, 0x1a, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x52, 0x70, 0x63, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x70, 0x63, 0x5f,
	0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x12, 0x72, 0x70, 0x63, 0x54, 0x68, 0x72, 0x6f, 0x74,
	0x74, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x20, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x70, 0x63, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x39, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x70,
	0x63, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x12, 0x72, 0x70, 0x63, 0x54, 0x68, 0x72,
	0x6f, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x2e, 0x0a, 0x11,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x57, 0x41, 0x4c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x07, 0x77, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x22, 0x94, 0x01, 0x0a,
	0x0c, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x57, 0x41, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a,
	0x08, 0x77, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x07, 0x77, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x0e, 0x63, 0x72, 0x61, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x63, 0x72, 0x61, 0x73, 0x68, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x22, 0x9a, 0x01, 0x0a, 0x12, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x57, 0x41, 0x4c,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x77, 0x61,
	0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x0e, 0x63, 0x72, 0x61, 0x73, 0x68, 0x65, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x0d, 0x63, 0x72, 0x61, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x2a, 0xd8, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x4c,
	0x41, 0x59, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x4d,
	0x45, 0x54, 0x41, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x4f, 0x4e, 0x53, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45,
	0x53, 0x43, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x2a, 0x87, 0x02, 0x0a, 0x10,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4f,
	0x44, 0x49, 0x46, 0x59, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x4f,
	0x44, 0x49, 0x46, 0x59, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x4f, 0x52, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d,
	0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x10, 0x05, 0x12,
	0x1f, 0x0a, 0x1b, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x50, 0x4f, 0x53, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06,
	0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x4f, 0x4e, 0x53, 0x10, 0x07, 0x2a, 0x8a, 0x02, 0x0a, 0x12, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x1c,
	0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50,
	0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x23,
	0x0a, 0x1f, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x4d, 0x45, 0x54,
	0x41, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x46, 0x53, 0x5f, 0x4c,
	0x41, 0x59, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x52, 0x55, 0x4e, 0x43,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x46, 0x53, 0x5f, 0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a,
	0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41,
	0x44, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d,
	0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41,
	0x53, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x06, 0x12,
	0x21, 0x0a, 0x1d, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x07, 0x2a, 0xdf, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x46,
	0x52, 0x4f, 0x4d, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52,
	0x5f, 0x46, 0x53, 0x5f, 0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x10, 0x04,
	0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x55, 0x4e, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e,
	0x53, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x06, 0x2a, 0xd0, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x18, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59,
	0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x5f, 0x49, 0x4e,
	0x54, 0x4f, 0x5f, 0x4e, 0x53, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x1e, 0x0a,
	0x1a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x5a, 0x4b, 0x10, 0x04, 0x12, 0x28, 0x0a,
	0x24, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f,
	0x51, 0x55, 0x4f, 0x54, 0x41, 0x10, 0x05, 0x2a, 0x7a, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x18, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12, 0x24, 0x0a,
	0x20, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x53, 0x5f, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x5a,
	0x4b, 0x10, 0x03, 0x2a, 0xda, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x18,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45,
	0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x4e, 0x53, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45,
	0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x5a, 0x4b, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x49, 0x45,
	0x53, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x10, 0x05,
	0x2a, 0xe8, 0x01, 0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x50, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12,
	0x29, 0x0a, 0x25, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f,
	0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x04,
	0x12, 0x28, 0x0a, 0x24, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x53, 0x45, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x2a, 0x9d, 0x02, 0x0a, 0x11,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52,
	0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x2b, 0x0a,
	0x27, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45,
	0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x20,
	0x0a, 0x1c, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x50, 0x4f, 0x53, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06,
	0x12, 0x29, 0x0a, 0x25, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x41, 0x52, 0x52, 0x49, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x86, 0x02, 0x0a, 0x12,
	0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50,
	0x53, 0x48, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x5f, 0x53, 0x4e,
	0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x46, 0x53, 0x5f,
	0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4c, 0x4f, 0x4e,
	0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x54,
	0x4f, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4c, 0x4f, 0x4e,
	0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47,
	0x4e, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x43,
	0x4c, 0x4f, 0x4e, 0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x10,
	0x05, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53,
	0x48, 0x4f, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x5f, 0x53, 0x4e,
	0x41, 0x50, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41,
	0x43, 0x4c, 0x10, 0x07, 0x2a, 0xd2, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x1e, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f,
	0x54, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x4e, 0x41,
	0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x12,
	0x24, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53,
	0x48, 0x4f, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x4c, 0x41, 0x59,
	0x4f, 0x55, 0x54, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x4c, 0x10, 0x05, 0x2a, 0xfe, 0x01, 0x0a, 0x1b, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x49, 0x53,
	0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12,
	0x2a, 0x0a, 0x26, 0x44, 0x49, 0x53, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4d, 0x45, 0x52, 0x47,
	0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x33, 0x0a, 0x2f, 0x44,
	0x49, 0x53, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x5f,
	0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x53, 0x10, 0x03,
	0x12, 0x2b, 0x0a, 0x27, 0x44, 0x49, 0x53, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4d, 0x45, 0x52,
	0x47, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x44, 0x4f, 0x5f,
	0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x53, 0x10, 0x04, 0x12, 0x2b, 0x0a,
	0x27, 0x44, 0x49, 0x53, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x49, 0x4e,
	0x47, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x2a, 0xf3, 0x03, 0x0a, 0x15, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41,
	0x52, 0x45, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x50,
	0x4c, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x5f, 0x44, 0x41, 0x55, 0x47, 0x48, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x4f, 0x4e, 0x53, 0x10, 0x04, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x50, 0x4c,
	0x49, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x45,
	0x46, 0x4f, 0x52, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x53,
	0x50, 0x4c, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x07, 0x12,
	0x2f, 0x0a, 0x2b, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x08,
	0x12, 0x29, 0x0a, 0x25, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x43, 0x48, 0x49, 0x4c,
	0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x09, 0x12, 0x25, 0x0a, 0x21, 0x53,
	0x50, 0x4c, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x0a, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x0b,
	0x2a, 0xa6, 0x04, 0x0a, 0x16, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x4d,
	0x45, 0x52, 0x47, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21,
	0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x4d,
	0x45, 0x52, 0x47, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03,
	0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x4d, 0x45, 0x52, 0x47, 0x45,
	0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x45, 0x52,
	0x47, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53,
	0x5f, 0x50, 0x52, 0x45, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49,
	0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x23, 0x0a,
	0x1f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41,
	0x10, 0x08, 0x12, 0x33, 0x0a, 0x2f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x4d,
	0x45, 0x52, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x45, 0x52, 0x47, 0x45,
	0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4f,
	0x50, 0x45, 0x4e, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f,
	0x4e, 0x10, 0x0a, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x2c, 0x0a, 0x28, 0x4d,
	0x45, 0x52, 0x47, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f,
	0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x0c, 0x2a, 0xb6, 0x03, 0x0a, 0x10, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x72, 0x61, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x41, 0x53, 0x48, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x19, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x5f, 0x43, 0x52, 0x41, 0x53, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4d,
	0x45, 0x54, 0x41, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x41, 0x53, 0x48, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1a, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x5f, 0x43, 0x52, 0x41, 0x53, 0x48, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54,
	0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x41, 0x53, 0x48, 0x5f, 0x53, 0x50, 0x4c, 0x49,
	0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x5f, 0x43, 0x52, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x10,
	0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x41, 0x53,
	0x48, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e,
	0x10, 0x09, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x41,
	0x53, 0x48, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x4c, 0x4f,
	0x47, 0x53, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x43,
	0x52, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x41,
	0x10, 0x0b, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x41,
	0x53, 0x48, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f,
	0x4d, 0x45, 0x54, 0x41, 0x5f, 0x57, 0x41, 0x4c, 0x53, 0x5f, 0x44, 0x49, 0x52, 0x10, 0x0c, 0x12,
	0x26, 0x0a, 0x22, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x41, 0x53, 0x48, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x57, 0x41, 0x4c,
	0x53, 0x5f, 0x44, 0x49, 0x52, 0x10, 0x0d, 0x12, 0x20, 0x0a, 0x18, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x5f, 0x43, 0x52, 0x41, 0x53, 0x48, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x52,
	0x49, 0x54, 0x32, 0x10, 0x14, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48,
	0x10, 0x64, 0x2a, 0x6a, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x41,
	0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x10, 0x01, 0x12, 0x1f, 0x0a,
	0x1b, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x41, 0x53,
	0x53, 0x49, 0x47, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x2a, 0x72,
	0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x47, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45,
	0x55, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48,
	0x10, 0x03, 0x2a, 0x5c, 0x0a, 0x0f, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x56, 0x45,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x02,
	0x2a, 0x5b, 0x0a, 0x0d, 0x47, 0x43, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x43, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x43, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x47, 0x43, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x55, 0x52,
	0x47, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x03, 0x2a, 0x6f, 0x0a,
	0x14, 0x47, 0x43, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x43, 0x5f, 0x4d, 0x45, 0x52, 0x47,
	0x45, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41,
	0x52, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x43, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45,
	0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x55, 0x52, 0x47, 0x45, 0x10,
	0x02, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x43, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x44, 0x49, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x03, 0x2a, 0x9c,
	0x02, 0x0a, 0x15, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x45, 0x5f,
	0x50, 0x45, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x5f,
	0x52, 0x53, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x50,
	0x45, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f,
	0x4e, 0x53, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x50,
	0x45, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f,
	0x50, 0x55, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x51, 0x5f, 0x49, 0x44, 0x10, 0x05, 0x12,
	0x20, 0x0a, 0x1c, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10,
	0x06, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x45, 0x45, 0x52,
	0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x46,
	0x52, 0x45, 0x53, 0x48, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x52, 0x53, 0x10,
	0x07, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x4d,
	0x4f, 0x44, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x2a, 0x70, 0x0a,
	0x14, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x45, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x50, 0x45,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50,
	0x45, 0x45, 0x52, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x05, 0x2a,
	0x93, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x52,
	0x45, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x10,
	0x01, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x4f, 0x50, 0x45, 0x4e,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45,
	0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x4f, 0x50, 0x45,
	0x4e, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x2a, 0x0a, 0x0d, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x4d,
	0x45, 0x54, 0x41, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x10,
	0x01, 0x2a, 0xeb, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x5f,
	0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50,
	0x45, 0x4e, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x05, 0x2a,
	0x46, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x53, 0x53, 0x49, 0x47,
	0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x52,
	0x45, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x04, 0x2a, 0xc7, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45,
	0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x44, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01,
	0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x44, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25,
	0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x44, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x47, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x44, 0x55,
	0x52, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x41, 0x53, 0x48, 0x10,
	0x04, 0x2a, 0x7d, 0x0a, 0x16, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x70, 0x63, 0x54, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x50, 0x43,
	0x5f, 0x54, 0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x50,
	0x43, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x52, 0x53,
	0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x03,
	0x2a, 0x63, 0x0a, 0x0d, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x57, 0x41, 0x4c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x51, 0x55, 0x49, 0x52, 0x45, 0x5f, 0x53, 0x50, 0x4c,
	0x49, 0x54, 0x5f, 0x57, 0x41, 0x4c, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x44, 0x49, 0x53, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x57, 0x41, 0x4c, 0x5f,
	0x54, 0x4f, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x52,
	0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x57, 0x4f, 0x52,
	0x4b, 0x45, 0x52, 0x10, 0x03, 0x42, 0x59, 0x0a, 0x31, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x73, 0x68, 0x61, 0x64, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x15, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x48, 0x01, 0x5a, 0x05, 0x2e, 0x2e, 0x2f, 0x70, 0x62, 0x88, 0x01, 0x01, 0xa0, 0x01, 0x01,
}

var (
	file_MasterProcedure_proto_rawDescOnce sync.Once
	file_MasterProcedure_proto_rawDescData = file_MasterProcedure_proto_rawDesc
)

func file_MasterProcedure_proto_rawDescGZIP() []byte {
	file_MasterProcedure_proto_rawDescOnce.Do(func() {
		file_MasterProcedure_proto_rawDescData = protoimpl.X.CompressGZIP(file_MasterProcedure_proto_rawDescData)
	})
	return file_MasterProcedure_proto_rawDescData
}

var file_MasterProcedure_proto_enumTypes = make([]protoimpl.EnumInfo, 29)
var file_MasterProcedure_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_MasterProcedure_proto_goTypes = []interface{}{
	(CreateTableState)(0),                      // 0: hbase.pb.CreateTableState
	(ModifyTableState)(0),                      // 1: hbase.pb.ModifyTableState
	(TruncateTableState)(0),                    // 2: hbase.pb.TruncateTableState
	(DeleteTableState)(0),                      // 3: hbase.pb.DeleteTableState
	(CreateNamespaceState)(0),                  // 4: hbase.pb.CreateNamespaceState
	(ModifyNamespaceState)(0),                  // 5: hbase.pb.ModifyNamespaceState
	(DeleteNamespaceState)(0),                  // 6: hbase.pb.DeleteNamespaceState
	(EnableTableState)(0),                      // 7: hbase.pb.EnableTableState
	(DisableTableState)(0),                     // 8: hbase.pb.DisableTableState
	(CloneSnapshotState)(0),                    // 9: hbase.pb.CloneSnapshotState
	(RestoreSnapshotState)(0),                  // 10: hbase.pb.RestoreSnapshotState
	(DispatchMergingRegionsState)(0),           // 11: hbase.pb.DispatchMergingRegionsState
	(SplitTableRegionState)(0),                 // 12: hbase.pb.SplitTableRegionState
	(MergeTableRegionsState)(0),                // 13: hbase.pb.MergeTableRegionsState
	(ServerCrashState)(0),                      // 14: hbase.pb.ServerCrashState
	(RecoverMetaState)(0),                      // 15: hbase.pb.RecoverMetaState
	(RegionTransitionState)(0),                 // 16: hbase.pb.RegionTransitionState
	(MoveRegionState)(0),                       // 17: hbase.pb.MoveRegionState
	(GCRegionState)(0),                         // 18: hbase.pb.GCRegionState
	(GCMergedRegionsState)(0),                  // 19: hbase.pb.GCMergedRegionsState
	(PeerModificationState)(0),                 // 20: hbase.pb.PeerModificationState
	(PeerModificationType)(0),                  // 21: hbase.pb.PeerModificationType
	(ReopenTableRegionsState)(0),               // 22: hbase.pb.ReopenTableRegionsState
	(InitMetaState)(0),                         // 23: hbase.pb.InitMetaState
	(RegionStateTransitionState)(0),            // 24: hbase.pb.RegionStateTransitionState
	(RegionTransitionType)(0),                  // 25: hbase.pb.RegionTransitionType
	(RegionRemoteProcedureBaseState)(0),        // 26: hbase.pb.RegionRemoteProcedureBaseState
	(SwitchRpcThrottleState)(0),                // 27: hbase.pb.SwitchRpcThrottleState
	(SplitWALState)(0),                         // 28: hbase.pb.SplitWALState
	(*CreateTableStateData)(nil),               // 29: hbase.pb.CreateTableStateData
	(*ModifyTableStateData)(nil),               // 30: hbase.pb.ModifyTableStateData
	(*TruncateTableStateData)(nil),             // 31: hbase.pb.TruncateTableStateData
	(*DeleteTableStateData)(nil),               // 32: hbase.pb.DeleteTableStateData
	(*CreateNamespaceStateData)(nil),           // 33: hbase.pb.CreateNamespaceStateData
	(*ModifyNamespaceStateData)(nil),           // 34: hbase.pb.ModifyNamespaceStateData
	(*DeleteNamespaceStateData)(nil),           // 35: hbase.pb.DeleteNamespaceStateData
	(*EnableTableStateData)(nil),               // 36: hbase.pb.EnableTableStateData
	(*DisableTableStateData)(nil),              // 37: hbase.pb.DisableTableStateData
	(*RestoreParentToChildRegionsPair)(nil),    // 38: hbase.pb.RestoreParentToChildRegionsPair
	(*CloneSnapshotStateData)(nil),             // 39: hbase.pb.CloneSnapshotStateData
	(*RestoreSnapshotStateData)(nil),           // 40: hbase.pb.RestoreSnapshotStateData
	(*DispatchMergingRegionsStateData)(nil),    // 41: hbase.pb.DispatchMergingRegionsStateData
	(*SplitTableRegionStateData)(nil),          // 42: hbase.pb.SplitTableRegionStateData
	(*MergeTableRegionsStateData)(nil),         // 43: hbase.pb.MergeTableRegionsStateData
	(*ServerCrashStateData)(nil),               // 44: hbase.pb.ServerCrashStateData
	(*RecoverMetaStateData)(nil),               // 45: hbase.pb.RecoverMetaStateData
	(*AssignRegionStateData)(nil),              // 46: hbase.pb.AssignRegionStateData
	(*UnassignRegionStateData)(nil),            // 47: hbase.pb.UnassignRegionStateData
	(*MoveRegionStateData)(nil),                // 48: hbase.pb.MoveRegionStateData
	(*GCRegionStateData)(nil),                  // 49: hbase.pb.GCRegionStateData
	(*GCMergedRegionsStateData)(nil),           // 50: hbase.pb.GCMergedRegionsStateData
	(*PeerModificationStateData)(nil),          // 51: hbase.pb.PeerModificationStateData
	(*RefreshPeerStateData)(nil),               // 52: hbase.pb.RefreshPeerStateData
	(*RefreshPeerParameter)(nil),               // 53: hbase.pb.RefreshPeerParameter
	(*PeerProcedureStateData)(nil),             // 54: hbase.pb.PeerProcedureStateData
	(*AddPeerStateData)(nil),                   // 55: hbase.pb.AddPeerStateData
	(*UpdatePeerConfigStateData)(nil),          // 56: hbase.pb.UpdatePeerConfigStateData
	(*RemovePeerStateData)(nil),                // 57: hbase.pb.RemovePeerStateData
	(*EnablePeerStateData)(nil),                // 58: hbase.pb.EnablePeerStateData
	(*DisablePeerStateData)(nil),               // 59: hbase.pb.DisablePeerStateData
	(*ReopenTableRegionsStateData)(nil),        // 60: hbase.pb.ReopenTableRegionsStateData
	(*InitMetaStateData)(nil),                  // 61: hbase.pb.InitMetaStateData
	(*RegionStateTransitionStateData)(nil),     // 62: hbase.pb.RegionStateTransitionStateData
	(*RegionRemoteProcedureBaseStateData)(nil), // 63: hbase.pb.RegionRemoteProcedureBaseStateData
	(*OpenRegionProcedureStateData)(nil),       // 64: hbase.pb.OpenRegionProcedureStateData
	(*CloseRegionProcedureStateData)(nil),      // 65: hbase.pb.CloseRegionProcedureStateData
	(*SwitchRpcThrottleStateData)(nil),         // 66: hbase.pb.SwitchRpcThrottleStateData
	(*SwitchRpcThrottleRemoteStateData)(nil),   // 67: hbase.pb.SwitchRpcThrottleRemoteStateData
	(*SplitWALParameter)(nil),                  // 68: hbase.pb.SplitWALParameter
	(*SplitWALData)(nil),                       // 69: hbase.pb.SplitWALData
	(*SplitWALRemoteData)(nil),                 // 70: hbase.pb.SplitWALRemoteData
	(*UserInformation)(nil),                    // 71: hbase.pb.UserInformation
	(*TableSchema)(nil),                        // 72: hbase.pb.TableSchema
	(*RegionInfo)(nil),                         // 73: hbase.pb.RegionInfo
	(*TableName)(nil),                          // 74: hbase.pb.TableName
	(*NamespaceDescriptor)(nil),                // 75: hbase.pb.NamespaceDescriptor
	(*SnapshotDescription)(nil),                // 76: hbase.pb.SnapshotDescription
	(*ServerName)(nil),                         // 77: hbase.pb.ServerName
	(*ReplicationPeer)(nil),                    // 78: hbase.pb.ReplicationPeer
	(*RegionLocation)(nil),                     // 79: hbase.pb.RegionLocation
	(RegionStateTransition_TransitionCode)(0),  // 80: hbase.pb.RegionStateTransition.TransitionCode
}
var file_MasterProcedure_proto_depIdxs = []int32{
	71, // 0: hbase.pb.CreateTableStateData.user_info:type_name -> hbase.pb.UserInformation
	72, // 1: hbase.pb.CreateTableStateData.table_schema:type_name -> hbase.pb.TableSchema
	73, // 2: hbase.pb.CreateTableStateData.region_info:type_name -> hbase.pb.RegionInfo
	71, // 3: hbase.pb.ModifyTableStateData.user_info:type_name -> hbase.pb.UserInformation
	72, // 4: hbase.pb.ModifyTableStateData.unmodified_table_schema:type_name -> hbase.pb.TableSchema
	72, // 5: hbase.pb.ModifyTableStateData.modified_table_schema:type_name -> hbase.pb.TableSchema
	71, // 6: hbase.pb.TruncateTableStateData.user_info:type_name -> hbase.pb.UserInformation
	74, // 7: hbase.pb.TruncateTableStateData.table_name:type_name -> hbase.pb.TableName
	72, // 8: hbase.pb.TruncateTableStateData.table_schema:type_name -> hbase.pb.TableSchema
	73, // 9: hbase.pb.TruncateTableStateData.region_info:type_name -> hbase.pb.RegionInfo
	71, // 10: hbase.pb.DeleteTableStateData.user_info:type_name -> hbase.pb.UserInformation
	74, // 11: hbase.pb.DeleteTableStateData.table_name:type_name -> hbase.pb.TableName
	73, // 12: hbase.pb.DeleteTableStateData.region_info:type_name -> hbase.pb.RegionInfo
	75, // 13: hbase.pb.CreateNamespaceStateData.namespace_descriptor:type_name -> hbase.pb.NamespaceDescriptor
	75, // 14: hbase.pb.ModifyNamespaceStateData.namespace_descriptor:type_name -> hbase.pb.NamespaceDescriptor
	75, // 15: hbase.pb.ModifyNamespaceStateData.unmodified_namespace_descriptor:type_name -> hbase.pb.NamespaceDescriptor
	75, // 16: hbase.pb.DeleteNamespaceStateData.namespace_descriptor:type_name -> hbase.pb.NamespaceDescriptor
	71, // 17: hbase.pb.EnableTableStateData.user_info:type_name -> hbase.pb.UserInformation
	74, // 18: hbase.pb.EnableTableStateData.table_name:type_name -> hbase.pb.TableName
	71, // 19: hbase.pb.DisableTableStateData.user_info:type_name -> hbase.pb.UserInformation
	74, // 20: hbase.pb.DisableTableStateData.table_name:type_name -> hbase.pb.TableName
	71, // 21: hbase.pb.CloneSnapshotStateData.user_info:type_name -> hbase.pb.UserInformation
	76, // 22: hbase.pb.CloneSnapshotStateData.snapshot:type_name -> hbase.pb.SnapshotDescription
	72, // 23: hbase.pb.CloneSnapshotStateData.table_schema:type_name -> hbase.pb.TableSchema
	73, // 24: hbase.pb.CloneSnapshotStateData.region_info:type_name -> hbase.pb.RegionInfo
	38, // 25: hbase.pb.CloneSnapshotStateData.parent_to_child_regions_pair_list:type_name -> hbase.pb.RestoreParentToChildRegionsPair
	71, // 26: hbase.pb.RestoreSnapshotStateData.user_info:type_name -> hbase.pb.UserInformation
	76, // 27: hbase.pb.RestoreSnapshotStateData.snapshot:type_name -> hbase.pb.SnapshotDescription
	72, // 28: hbase.pb.RestoreSnapshotStateData.modified_table_schema:type_name -> hbase.pb.TableSchema
	73, // 29: hbase.pb.RestoreSnapshotStateData.region_info_for_restore:type_name -> hbase.pb.RegionInfo
	73, // 30: hbase.pb.RestoreSnapshotStateData.region_info_for_remove:type_name -> hbase.pb.RegionInfo
	73, // 31: hbase.pb.RestoreSnapshotStateData.region_info_for_add:type_name -> hbase.pb.RegionInfo
	38, // 32: hbase.pb.RestoreSnapshotStateData.parent_to_child_regions_pair_list:type_name -> hbase.pb.RestoreParentToChildRegionsPair
	71, // 33: hbase.pb.DispatchMergingRegionsStateData.user_info:type_name -> hbase.pb.UserInformation
	74, // 34: hbase.pb.DispatchMergingRegionsStateData.table_name:type_name -> hbase.pb.TableName
	73, // 35: hbase.pb.DispatchMergingRegionsStateData.region_info:type_name -> hbase.pb.RegionInfo
	71, // 36: hbase.pb.SplitTableRegionStateData.user_info:type_name -> hbase.pb.UserInformation
	73, // 37: hbase.pb.SplitTableRegionStateData.parent_region_info:type_name -> hbase.pb.RegionInfo
	73, // 38: hbase.pb.SplitTableRegionStateData.child_region_info:type_name -> hbase.pb.RegionInfo
	71, // 39: hbase.pb.MergeTableRegionsStateData.user_info:type_name -> hbase.pb.UserInformation
	73, // 40: hbase.pb.MergeTableRegionsStateData.region_info:type_name -> hbase.pb.RegionInfo
	73, // 41: hbase.pb.MergeTableRegionsStateData.merged_region_info:type_name -> hbase.pb.RegionInfo
	77, // 42: hbase.pb.ServerCrashStateData.server_name:type_name -> hbase.pb.ServerName
	73, // 43: hbase.pb.ServerCrashStateData.regions_on_crashed_server:type_name -> hbase.pb.RegionInfo
	73, // 44: hbase.pb.ServerCrashStateData.regions_assigned:type_name -> hbase.pb.RegionInfo
	77, // 45: hbase.pb.RecoverMetaStateData.failed_meta_server:type_name -> hbase.pb.ServerName
	16, // 46: hbase.pb.AssignRegionStateData.transition_state:type_name -> hbase.pb.RegionTransitionState
	73, // 47: hbase.pb.AssignRegionStateData.region_info:type_name -> hbase.pb.RegionInfo
	77, // 48: hbase.pb.AssignRegionStateData.target_server:type_name -> hbase.pb.ServerName
	16, // 49: hbase.pb.UnassignRegionStateData.transition_state:type_name -> hbase.pb.RegionTransitionState
	73, // 50: hbase.pb.UnassignRegionStateData.region_info:type_name -> hbase.pb.RegionInfo
	77, // 51: hbase.pb.UnassignRegionStateData.destination_server:type_name -> hbase.pb.ServerName
	77, // 52: hbase.pb.UnassignRegionStateData.hosting_server:type_name -> hbase.pb.ServerName
	73, // 53: hbase.pb.MoveRegionStateData.region_info:type_name -> hbase.pb.RegionInfo
	77, // 54: hbase.pb.MoveRegionStateData.source_server:type_name -> hbase.pb.ServerName
	77, // 55: hbase.pb.MoveRegionStateData.destination_server:type_name -> hbase.pb.ServerName
	73, // 56: hbase.pb.GCRegionStateData.region_info:type_name -> hbase.pb.RegionInfo
	73, // 57: hbase.pb.GCMergedRegionsStateData.parent_a:type_name -> hbase.pb.RegionInfo
	73, // 58: hbase.pb.GCMergedRegionsStateData.parent_b:type_name -> hbase.pb.RegionInfo
	73, // 59: hbase.pb.GCMergedRegionsStateData.merged_child:type_name -> hbase.pb.RegionInfo
	21, // 60: hbase.pb.RefreshPeerStateData.type:type_name -> hbase.pb.PeerModificationType
	77, // 61: hbase.pb.RefreshPeerStateData.target_server:type_name -> hbase.pb.ServerName
	21, // 62: hbase.pb.RefreshPeerParameter.type:type_name -> hbase.pb.PeerModificationType
	77, // 63: hbase.pb.RefreshPeerParameter.target_server:type_name -> hbase.pb.ServerName
	78, // 64: hbase.pb.AddPeerStateData.peer_config:type_name -> hbase.pb.ReplicationPeer
	78, // 65: hbase.pb.UpdatePeerConfigStateData.peer_config:type_name -> hbase.pb.ReplicationPeer
	78, // 66: hbase.pb.UpdatePeerConfigStateData.old_peer_config:type_name -> hbase.pb.ReplicationPeer
	78, // 67: hbase.pb.RemovePeerStateData.peer_config:type_name -> hbase.pb.ReplicationPeer
	74, // 68: hbase.pb.ReopenTableRegionsStateData.table_name:type_name -> hbase.pb.TableName
	79, // 69: hbase.pb.ReopenTableRegionsStateData.region:type_name -> hbase.pb.RegionLocation
	25, // 70: hbase.pb.RegionStateTransitionStateData.type:type_name -> hbase.pb.RegionTransitionType
	77, // 71: hbase.pb.RegionStateTransitionStateData.assign_candidate:type_name -> hbase.pb.ServerName
	73, // 72: hbase.pb.RegionRemoteProcedureBaseStateData.region:type_name -> hbase.pb.RegionInfo
	77, // 73: hbase.pb.RegionRemoteProcedureBaseStateData.target_server:type_name -> hbase.pb.ServerName
	26, // 74: hbase.pb.RegionRemoteProcedureBaseStateData.state:type_name -> hbase.pb.RegionRemoteProcedureBaseState
	80, // 75: hbase.pb.RegionRemoteProcedureBaseStateData.transition_code:type_name -> hbase.pb.RegionStateTransition.TransitionCode
	77, // 76: hbase.pb.CloseRegionProcedureStateData.assign_candidate:type_name -> hbase.pb.ServerName
	77, // 77: hbase.pb.SwitchRpcThrottleRemoteStateData.target_server:type_name -> hbase.pb.ServerName
	77, // 78: hbase.pb.SplitWALData.crashed_server:type_name -> hbase.pb.ServerName
	77, // 79: hbase.pb.SplitWALData.worker:type_name -> hbase.pb.ServerName
	77, // 80: hbase.pb.SplitWALRemoteData.crashed_server:type_name -> hbase.pb.ServerName
	77, // 81: hbase.pb.SplitWALRemoteData.worker:type_name -> hbase.pb.ServerName
	82, // [82:82] is the sub-list for method output_type
	82, // [82:82] is the sub-list for method input_type
	82, // [82:82] is the sub-list for extension type_name
	82, // [82:82] is the sub-list for extension extendee
	0,  // [0:82] is the sub-list for field type_name
}

func init() { file_MasterProcedure_proto_init() }
func file_MasterProcedure_proto_init() {
	if File_MasterProcedure_proto != nil {
		return
	}
	file_HBase_proto_init()
	file_RPC_proto_init()
	file_Snapshot_proto_init()
	file_Replication_proto_init()
	file_RegionServerStatus_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_MasterProcedure_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyTableStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TruncateTableStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTableStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNamespaceStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyNamespaceStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNamespaceStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableTableStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableTableStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreParentToChildRegionsPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneSnapshotStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreSnapshotStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatchMergingRegionsStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitTableRegionStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeTableRegionsStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerCrashStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverMetaStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignRegionStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnassignRegionStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveRegionStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCRegionStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCMergedRegionsStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerModificationStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshPeerStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshPeerParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerProcedureStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPeerStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePeerConfigStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePeerStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnablePeerStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisablePeerStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReopenTableRegionsStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitMetaStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionStateTransitionStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionRemoteProcedureBaseStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenRegionProcedureStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseRegionProcedureStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchRpcThrottleStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchRpcThrottleRemoteStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitWALParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitWALData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterProcedure_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitWALRemoteData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_MasterProcedure_proto_rawDesc,
			NumEnums:      29,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_MasterProcedure_proto_goTypes,
		DependencyIndexes: file_MasterProcedure_proto_depIdxs,
		EnumInfos:         file_MasterProcedure_proto_enumTypes,
		MessageInfos:      file_MasterProcedure_proto_msgTypes,
	}.Build()
	File_MasterProcedure_proto = out.File
	file_MasterProcedure_proto_rawDesc = nil
	file_MasterProcedure_proto_goTypes = nil
	file_MasterProcedure_proto_depIdxs = nil
}
