//*
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-rc.1
// 	protoc        v3.17.3
// source: WAL.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ScopeType int32

const (
	ScopeType_REPLICATION_SCOPE_LOCAL  ScopeType = 0
	ScopeType_REPLICATION_SCOPE_GLOBAL ScopeType = 1
	ScopeType_REPLICATION_SCOPE_SERIAL ScopeType = 2
)

// Enum value maps for ScopeType.
var (
	ScopeType_name = map[int32]string{
		0: "REPLICATION_SCOPE_LOCAL",
		1: "REPLICATION_SCOPE_GLOBAL",
		2: "REPLICATION_SCOPE_SERIAL",
	}
	ScopeType_value = map[string]int32{
		"REPLICATION_SCOPE_LOCAL":  0,
		"REPLICATION_SCOPE_GLOBAL": 1,
		"REPLICATION_SCOPE_SERIAL": 2,
	}
)

func (x ScopeType) Enum() *ScopeType {
	p := new(ScopeType)
	*p = x
	return p
}

func (x ScopeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScopeType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAL_proto_enumTypes[0].Descriptor()
}

func (ScopeType) Type() protoreflect.EnumType {
	return &file_WAL_proto_enumTypes[0]
}

func (x ScopeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ScopeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ScopeType(num)
	return nil
}

// Deprecated: Use ScopeType.Descriptor instead.
func (ScopeType) EnumDescriptor() ([]byte, []int) {
	return file_WAL_proto_rawDescGZIP(), []int{0}
}

type FlushDescriptor_FlushAction int32

const (
	FlushDescriptor_START_FLUSH  FlushDescriptor_FlushAction = 0
	FlushDescriptor_COMMIT_FLUSH FlushDescriptor_FlushAction = 1
	FlushDescriptor_ABORT_FLUSH  FlushDescriptor_FlushAction = 2
	FlushDescriptor_CANNOT_FLUSH FlushDescriptor_FlushAction = 3 // marker for indicating that a flush has been requested but cannot complete
)

// Enum value maps for FlushDescriptor_FlushAction.
var (
	FlushDescriptor_FlushAction_name = map[int32]string{
		0: "START_FLUSH",
		1: "COMMIT_FLUSH",
		2: "ABORT_FLUSH",
		3: "CANNOT_FLUSH",
	}
	FlushDescriptor_FlushAction_value = map[string]int32{
		"START_FLUSH":  0,
		"COMMIT_FLUSH": 1,
		"ABORT_FLUSH":  2,
		"CANNOT_FLUSH": 3,
	}
)

func (x FlushDescriptor_FlushAction) Enum() *FlushDescriptor_FlushAction {
	p := new(FlushDescriptor_FlushAction)
	*p = x
	return p
}

func (x FlushDescriptor_FlushAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlushDescriptor_FlushAction) Descriptor() protoreflect.EnumDescriptor {
	return file_WAL_proto_enumTypes[1].Descriptor()
}

func (FlushDescriptor_FlushAction) Type() protoreflect.EnumType {
	return &file_WAL_proto_enumTypes[1]
}

func (x FlushDescriptor_FlushAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FlushDescriptor_FlushAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FlushDescriptor_FlushAction(num)
	return nil
}

// Deprecated: Use FlushDescriptor_FlushAction.Descriptor instead.
func (FlushDescriptor_FlushAction) EnumDescriptor() ([]byte, []int) {
	return file_WAL_proto_rawDescGZIP(), []int{4, 0}
}

type RegionEventDescriptor_EventType int32

const (
	RegionEventDescriptor_REGION_OPEN  RegionEventDescriptor_EventType = 0
	RegionEventDescriptor_REGION_CLOSE RegionEventDescriptor_EventType = 1
)

// Enum value maps for RegionEventDescriptor_EventType.
var (
	RegionEventDescriptor_EventType_name = map[int32]string{
		0: "REGION_OPEN",
		1: "REGION_CLOSE",
	}
	RegionEventDescriptor_EventType_value = map[string]int32{
		"REGION_OPEN":  0,
		"REGION_CLOSE": 1,
	}
)

func (x RegionEventDescriptor_EventType) Enum() *RegionEventDescriptor_EventType {
	p := new(RegionEventDescriptor_EventType)
	*p = x
	return p
}

func (x RegionEventDescriptor_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegionEventDescriptor_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAL_proto_enumTypes[2].Descriptor()
}

func (RegionEventDescriptor_EventType) Type() protoreflect.EnumType {
	return &file_WAL_proto_enumTypes[2]
}

func (x RegionEventDescriptor_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RegionEventDescriptor_EventType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RegionEventDescriptor_EventType(num)
	return nil
}

// Deprecated: Use RegionEventDescriptor_EventType.Descriptor instead.
func (RegionEventDescriptor_EventType) EnumDescriptor() ([]byte, []int) {
	return file_WAL_proto_rawDescGZIP(), []int{7, 0}
}

type WALHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasCompression    *bool   `protobuf:"varint,1,opt,name=has_compression,json=hasCompression" json:"has_compression,omitempty"`
	EncryptionKey     []byte  `protobuf:"bytes,2,opt,name=encryption_key,json=encryptionKey" json:"encryption_key,omitempty"`
	HasTagCompression *bool   `protobuf:"varint,3,opt,name=has_tag_compression,json=hasTagCompression" json:"has_tag_compression,omitempty"`
	WriterClsName     *string `protobuf:"bytes,4,opt,name=writer_cls_name,json=writerClsName" json:"writer_cls_name,omitempty"`
	CellCodecClsName  *string `protobuf:"bytes,5,opt,name=cell_codec_cls_name,json=cellCodecClsName" json:"cell_codec_cls_name,omitempty"`
}

func (x *WALHeader) Reset() {
	*x = WALHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WAL_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WALHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WALHeader) ProtoMessage() {}

func (x *WALHeader) ProtoReflect() protoreflect.Message {
	mi := &file_WAL_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WALHeader.ProtoReflect.Descriptor instead.
func (*WALHeader) Descriptor() ([]byte, []int) {
	return file_WAL_proto_rawDescGZIP(), []int{0}
}

func (x *WALHeader) GetHasCompression() bool {
	if x != nil && x.HasCompression != nil {
		return *x.HasCompression
	}
	return false
}

func (x *WALHeader) GetEncryptionKey() []byte {
	if x != nil {
		return x.EncryptionKey
	}
	return nil
}

func (x *WALHeader) GetHasTagCompression() bool {
	if x != nil && x.HasTagCompression != nil {
		return *x.HasTagCompression
	}
	return false
}

func (x *WALHeader) GetWriterClsName() string {
	if x != nil && x.WriterClsName != nil {
		return *x.WriterClsName
	}
	return ""
}

func (x *WALHeader) GetCellCodecClsName() string {
	if x != nil && x.CellCodecClsName != nil {
		return *x.CellCodecClsName
	}
	return ""
}

//
// Protocol buffer version of WALKey; see WALKey comment, not really a key but WALEdit header
// for some KVs
type WALKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncodedRegionName []byte  `protobuf:"bytes,1,req,name=encoded_region_name,json=encodedRegionName" json:"encoded_region_name,omitempty"`
	TableName         []byte  `protobuf:"bytes,2,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	LogSequenceNumber *uint64 `protobuf:"varint,3,req,name=log_sequence_number,json=logSequenceNumber" json:"log_sequence_number,omitempty"`
	WriteTime         *uint64 `protobuf:"varint,4,req,name=write_time,json=writeTime" json:"write_time,omitempty"`
	//
	//This parameter is deprecated in favor of clusters which
	//contains the list of clusters that have consumed the change.
	//It is retained so that the log created by earlier releases (0.94)
	//can be read by the newer releases.
	//
	// Deprecated: Do not use.
	ClusterId        *UUID          `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	Scopes           []*FamilyScope `protobuf:"bytes,6,rep,name=scopes" json:"scopes,omitempty"`
	FollowingKvCount *uint32        `protobuf:"varint,7,opt,name=following_kv_count,json=followingKvCount" json:"following_kv_count,omitempty"`
	//
	//This field contains the list of clusters that have
	//consumed the change
	ClusterIds         []*UUID `protobuf:"bytes,8,rep,name=cluster_ids,json=clusterIds" json:"cluster_ids,omitempty"`
	NonceGroup         *uint64 `protobuf:"varint,9,opt,name=nonceGroup" json:"nonceGroup,omitempty"`
	Nonce              *uint64 `protobuf:"varint,10,opt,name=nonce" json:"nonce,omitempty"`
	OrigSequenceNumber *uint64 `protobuf:"varint,11,opt,name=orig_sequence_number,json=origSequenceNumber" json:"orig_sequence_number,omitempty"`
}

func (x *WALKey) Reset() {
	*x = WALKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WAL_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WALKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WALKey) ProtoMessage() {}

func (x *WALKey) ProtoReflect() protoreflect.Message {
	mi := &file_WAL_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WALKey.ProtoReflect.Descriptor instead.
func (*WALKey) Descriptor() ([]byte, []int) {
	return file_WAL_proto_rawDescGZIP(), []int{1}
}

func (x *WALKey) GetEncodedRegionName() []byte {
	if x != nil {
		return x.EncodedRegionName
	}
	return nil
}

func (x *WALKey) GetTableName() []byte {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *WALKey) GetLogSequenceNumber() uint64 {
	if x != nil && x.LogSequenceNumber != nil {
		return *x.LogSequenceNumber
	}
	return 0
}

func (x *WALKey) GetWriteTime() uint64 {
	if x != nil && x.WriteTime != nil {
		return *x.WriteTime
	}
	return 0
}

// Deprecated: Do not use.
func (x *WALKey) GetClusterId() *UUID {
	if x != nil {
		return x.ClusterId
	}
	return nil
}

func (x *WALKey) GetScopes() []*FamilyScope {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *WALKey) GetFollowingKvCount() uint32 {
	if x != nil && x.FollowingKvCount != nil {
		return *x.FollowingKvCount
	}
	return 0
}

func (x *WALKey) GetClusterIds() []*UUID {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

func (x *WALKey) GetNonceGroup() uint64 {
	if x != nil && x.NonceGroup != nil {
		return *x.NonceGroup
	}
	return 0
}

func (x *WALKey) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return 0
}

func (x *WALKey) GetOrigSequenceNumber() uint64 {
	if x != nil && x.OrigSequenceNumber != nil {
		return *x.OrigSequenceNumber
	}
	return 0
}

type FamilyScope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Family    []byte     `protobuf:"bytes,1,req,name=family" json:"family,omitempty"`
	ScopeType *ScopeType `protobuf:"varint,2,req,name=scope_type,json=scopeType,enum=hbase.pb.ScopeType" json:"scope_type,omitempty"`
}

func (x *FamilyScope) Reset() {
	*x = FamilyScope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WAL_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyScope) ProtoMessage() {}

func (x *FamilyScope) ProtoReflect() protoreflect.Message {
	mi := &file_WAL_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyScope.ProtoReflect.Descriptor instead.
func (*FamilyScope) Descriptor() ([]byte, []int) {
	return file_WAL_proto_rawDescGZIP(), []int{2}
}

func (x *FamilyScope) GetFamily() []byte {
	if x != nil {
		return x.Family
	}
	return nil
}

func (x *FamilyScope) GetScopeType() ScopeType {
	if x != nil && x.ScopeType != nil {
		return *x.ScopeType
	}
	return ScopeType_REPLICATION_SCOPE_LOCAL
}

//*
// Special WAL entry to hold all related to a compaction.
// Written to WAL before completing compaction.  There is
// sufficient info in the below message to complete later
// the * compaction should we fail the WAL write.
type CompactionDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName         []byte   `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"` // TODO: WALKey already stores these, might remove
	EncodedRegionName []byte   `protobuf:"bytes,2,req,name=encoded_region_name,json=encodedRegionName" json:"encoded_region_name,omitempty"`
	FamilyName        []byte   `protobuf:"bytes,3,req,name=family_name,json=familyName" json:"family_name,omitempty"`
	CompactionInput   []string `protobuf:"bytes,4,rep,name=compaction_input,json=compactionInput" json:"compaction_input,omitempty"` // relative to store dir
	CompactionOutput  []string `protobuf:"bytes,5,rep,name=compaction_output,json=compactionOutput" json:"compaction_output,omitempty"`
	StoreHomeDir      *string  `protobuf:"bytes,6,req,name=store_home_dir,json=storeHomeDir" json:"store_home_dir,omitempty"` // relative to region dir
	RegionName        []byte   `protobuf:"bytes,7,opt,name=region_name,json=regionName" json:"region_name,omitempty"`         // full region name
}

func (x *CompactionDescriptor) Reset() {
	*x = CompactionDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WAL_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactionDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactionDescriptor) ProtoMessage() {}

func (x *CompactionDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_WAL_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactionDescriptor.ProtoReflect.Descriptor instead.
func (*CompactionDescriptor) Descriptor() ([]byte, []int) {
	return file_WAL_proto_rawDescGZIP(), []int{3}
}

func (x *CompactionDescriptor) GetTableName() []byte {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *CompactionDescriptor) GetEncodedRegionName() []byte {
	if x != nil {
		return x.EncodedRegionName
	}
	return nil
}

func (x *CompactionDescriptor) GetFamilyName() []byte {
	if x != nil {
		return x.FamilyName
	}
	return nil
}

func (x *CompactionDescriptor) GetCompactionInput() []string {
	if x != nil {
		return x.CompactionInput
	}
	return nil
}

func (x *CompactionDescriptor) GetCompactionOutput() []string {
	if x != nil {
		return x.CompactionOutput
	}
	return nil
}

func (x *CompactionDescriptor) GetStoreHomeDir() string {
	if x != nil && x.StoreHomeDir != nil {
		return *x.StoreHomeDir
	}
	return ""
}

func (x *CompactionDescriptor) GetRegionName() []byte {
	if x != nil {
		return x.RegionName
	}
	return nil
}

//*
// Special WAL entry to hold all related to a flush.
type FlushDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action              *FlushDescriptor_FlushAction            `protobuf:"varint,1,req,name=action,enum=hbase.pb.FlushDescriptor_FlushAction" json:"action,omitempty"`
	TableName           []byte                                  `protobuf:"bytes,2,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	EncodedRegionName   []byte                                  `protobuf:"bytes,3,req,name=encoded_region_name,json=encodedRegionName" json:"encoded_region_name,omitempty"`
	FlushSequenceNumber *uint64                                 `protobuf:"varint,4,opt,name=flush_sequence_number,json=flushSequenceNumber" json:"flush_sequence_number,omitempty"`
	StoreFlushes        []*FlushDescriptor_StoreFlushDescriptor `protobuf:"bytes,5,rep,name=store_flushes,json=storeFlushes" json:"store_flushes,omitempty"`
	RegionName          []byte                                  `protobuf:"bytes,6,opt,name=region_name,json=regionName" json:"region_name,omitempty"` // full region name
}

func (x *FlushDescriptor) Reset() {
	*x = FlushDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WAL_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushDescriptor) ProtoMessage() {}

func (x *FlushDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_WAL_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushDescriptor.ProtoReflect.Descriptor instead.
func (*FlushDescriptor) Descriptor() ([]byte, []int) {
	return file_WAL_proto_rawDescGZIP(), []int{4}
}

func (x *FlushDescriptor) GetAction() FlushDescriptor_FlushAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return FlushDescriptor_START_FLUSH
}

func (x *FlushDescriptor) GetTableName() []byte {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *FlushDescriptor) GetEncodedRegionName() []byte {
	if x != nil {
		return x.EncodedRegionName
	}
	return nil
}

func (x *FlushDescriptor) GetFlushSequenceNumber() uint64 {
	if x != nil && x.FlushSequenceNumber != nil {
		return *x.FlushSequenceNumber
	}
	return 0
}

func (x *FlushDescriptor) GetStoreFlushes() []*FlushDescriptor_StoreFlushDescriptor {
	if x != nil {
		return x.StoreFlushes
	}
	return nil
}

func (x *FlushDescriptor) GetRegionName() []byte {
	if x != nil {
		return x.RegionName
	}
	return nil
}

type StoreDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyName         []byte   `protobuf:"bytes,1,req,name=family_name,json=familyName" json:"family_name,omitempty"`
	StoreHomeDir       *string  `protobuf:"bytes,2,req,name=store_home_dir,json=storeHomeDir" json:"store_home_dir,omitempty"`                      //relative to region dir
	StoreFile          []string `protobuf:"bytes,3,rep,name=store_file,json=storeFile" json:"store_file,omitempty"`                                 // relative to store dir
	StoreFileSizeBytes *uint64  `protobuf:"varint,4,opt,name=store_file_size_bytes,json=storeFileSizeBytes" json:"store_file_size_bytes,omitempty"` // size of store file
}

func (x *StoreDescriptor) Reset() {
	*x = StoreDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WAL_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreDescriptor) ProtoMessage() {}

func (x *StoreDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_WAL_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreDescriptor.ProtoReflect.Descriptor instead.
func (*StoreDescriptor) Descriptor() ([]byte, []int) {
	return file_WAL_proto_rawDescGZIP(), []int{5}
}

func (x *StoreDescriptor) GetFamilyName() []byte {
	if x != nil {
		return x.FamilyName
	}
	return nil
}

func (x *StoreDescriptor) GetStoreHomeDir() string {
	if x != nil && x.StoreHomeDir != nil {
		return *x.StoreHomeDir
	}
	return ""
}

func (x *StoreDescriptor) GetStoreFile() []string {
	if x != nil {
		return x.StoreFile
	}
	return nil
}

func (x *StoreDescriptor) GetStoreFileSizeBytes() uint64 {
	if x != nil && x.StoreFileSizeBytes != nil {
		return *x.StoreFileSizeBytes
	}
	return 0
}

//*
// Special WAL entry used for writing bulk load events to WAL
type BulkLoadDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName         *TableName         `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	EncodedRegionName []byte             `protobuf:"bytes,2,req,name=encoded_region_name,json=encodedRegionName" json:"encoded_region_name,omitempty"`
	Stores            []*StoreDescriptor `protobuf:"bytes,3,rep,name=stores" json:"stores,omitempty"`
	BulkloadSeqNum    *int64             `protobuf:"varint,4,req,name=bulkload_seq_num,json=bulkloadSeqNum" json:"bulkload_seq_num,omitempty"`
}

func (x *BulkLoadDescriptor) Reset() {
	*x = BulkLoadDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WAL_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkLoadDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkLoadDescriptor) ProtoMessage() {}

func (x *BulkLoadDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_WAL_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkLoadDescriptor.ProtoReflect.Descriptor instead.
func (*BulkLoadDescriptor) Descriptor() ([]byte, []int) {
	return file_WAL_proto_rawDescGZIP(), []int{6}
}

func (x *BulkLoadDescriptor) GetTableName() *TableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *BulkLoadDescriptor) GetEncodedRegionName() []byte {
	if x != nil {
		return x.EncodedRegionName
	}
	return nil
}

func (x *BulkLoadDescriptor) GetStores() []*StoreDescriptor {
	if x != nil {
		return x.Stores
	}
	return nil
}

func (x *BulkLoadDescriptor) GetBulkloadSeqNum() int64 {
	if x != nil && x.BulkloadSeqNum != nil {
		return *x.BulkloadSeqNum
	}
	return 0
}

//*
// Special WAL entry to hold all related to a region event (open/close).
type RegionEventDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType         *RegionEventDescriptor_EventType `protobuf:"varint,1,req,name=event_type,json=eventType,enum=hbase.pb.RegionEventDescriptor_EventType" json:"event_type,omitempty"`
	TableName         []byte                           `protobuf:"bytes,2,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	EncodedRegionName []byte                           `protobuf:"bytes,3,req,name=encoded_region_name,json=encodedRegionName" json:"encoded_region_name,omitempty"`
	LogSequenceNumber *uint64                          `protobuf:"varint,4,opt,name=log_sequence_number,json=logSequenceNumber" json:"log_sequence_number,omitempty"`
	Stores            []*StoreDescriptor               `protobuf:"bytes,5,rep,name=stores" json:"stores,omitempty"`
	Server            *ServerName                      `protobuf:"bytes,6,opt,name=server" json:"server,omitempty"`                           // Server who opened the region
	RegionName        []byte                           `protobuf:"bytes,7,opt,name=region_name,json=regionName" json:"region_name,omitempty"` // full region name
}

func (x *RegionEventDescriptor) Reset() {
	*x = RegionEventDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WAL_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionEventDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionEventDescriptor) ProtoMessage() {}

func (x *RegionEventDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_WAL_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionEventDescriptor.ProtoReflect.Descriptor instead.
func (*RegionEventDescriptor) Descriptor() ([]byte, []int) {
	return file_WAL_proto_rawDescGZIP(), []int{7}
}

func (x *RegionEventDescriptor) GetEventType() RegionEventDescriptor_EventType {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return RegionEventDescriptor_REGION_OPEN
}

func (x *RegionEventDescriptor) GetTableName() []byte {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *RegionEventDescriptor) GetEncodedRegionName() []byte {
	if x != nil {
		return x.EncodedRegionName
	}
	return nil
}

func (x *RegionEventDescriptor) GetLogSequenceNumber() uint64 {
	if x != nil && x.LogSequenceNumber != nil {
		return *x.LogSequenceNumber
	}
	return 0
}

func (x *RegionEventDescriptor) GetStores() []*StoreDescriptor {
	if x != nil {
		return x.Stores
	}
	return nil
}

func (x *RegionEventDescriptor) GetServer() *ServerName {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *RegionEventDescriptor) GetRegionName() []byte {
	if x != nil {
		return x.RegionName
	}
	return nil
}

//*
// A trailer that is appended to the end of a properly closed WAL file.
// If missing, this is either a legacy or a corrupted WAL file.
// N.B. This trailer currently doesn't contain any information and we
// purposefully don't expose it in the WAL APIs. It's for future growth.
type WALTrailer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WALTrailer) Reset() {
	*x = WALTrailer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WAL_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WALTrailer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WALTrailer) ProtoMessage() {}

func (x *WALTrailer) ProtoReflect() protoreflect.Message {
	mi := &file_WAL_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WALTrailer.ProtoReflect.Descriptor instead.
func (*WALTrailer) Descriptor() ([]byte, []int) {
	return file_WAL_proto_rawDescGZIP(), []int{8}
}

type FlushDescriptor_StoreFlushDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyName   []byte   `protobuf:"bytes,1,req,name=family_name,json=familyName" json:"family_name,omitempty"`
	StoreHomeDir *string  `protobuf:"bytes,2,req,name=store_home_dir,json=storeHomeDir" json:"store_home_dir,omitempty"` //relative to region dir
	FlushOutput  []string `protobuf:"bytes,3,rep,name=flush_output,json=flushOutput" json:"flush_output,omitempty"`      // relative to store dir (if this is a COMMIT_FLUSH)
}

func (x *FlushDescriptor_StoreFlushDescriptor) Reset() {
	*x = FlushDescriptor_StoreFlushDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WAL_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushDescriptor_StoreFlushDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushDescriptor_StoreFlushDescriptor) ProtoMessage() {}

func (x *FlushDescriptor_StoreFlushDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_WAL_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushDescriptor_StoreFlushDescriptor.ProtoReflect.Descriptor instead.
func (*FlushDescriptor_StoreFlushDescriptor) Descriptor() ([]byte, []int) {
	return file_WAL_proto_rawDescGZIP(), []int{4, 0}
}

func (x *FlushDescriptor_StoreFlushDescriptor) GetFamilyName() []byte {
	if x != nil {
		return x.FamilyName
	}
	return nil
}

func (x *FlushDescriptor_StoreFlushDescriptor) GetStoreHomeDir() string {
	if x != nil && x.StoreHomeDir != nil {
		return *x.StoreHomeDir
	}
	return ""
}

func (x *FlushDescriptor_StoreFlushDescriptor) GetFlushOutput() []string {
	if x != nil {
		return x.FlushOutput
	}
	return nil
}

var File_WAL_proto protoreflect.FileDescriptor

var file_WAL_proto_rawDesc = []byte{
	0x0a, 0x09, 0x57, 0x41, 0x4c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x68, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x1a, 0x0b, 0x48, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xe2, 0x01, 0x0a, 0x09, 0x57, 0x41, 0x4c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x12, 0x2e, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68,
	0x61, 0x73, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x43, 0x6c, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x63, 0x6c, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x43, 0x6c, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xcf, 0x03, 0x0a, 0x06, 0x57, 0x41, 0x4c, 0x4b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x11, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x11,
	0x6c, 0x6f, 0x67, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x5f,
	0x6b, 0x76, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x4b, 0x76, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2f, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x5f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x59, 0x0a, 0x0b, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x12, 0x32, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x0a, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x68,
	0x6f, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x44, 0x69, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x04, 0x0a,
	0x0f, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x12, 0x3d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x75, 0x73,
	0x68, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x6c, 0x75, 0x73,
	0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x11, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x66,
	0x6c, 0x75, 0x73, 0x68, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x53, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x75, 0x73,
	0x68, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x80, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x68, 0x6f, 0x6d, 0x65,
	0x5f, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x48, 0x6f, 0x6d, 0x65, 0x44, 0x69, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6c, 0x75, 0x73,
	0x68, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x66, 0x6c, 0x75, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x53, 0x0a, 0x0b, 0x46,
	0x6c, 0x75, 0x73, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x10, 0x03,
	0x22, 0xaa, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x68,
	0x6f, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x44, 0x69, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xd5, 0x01,
	0x0a, 0x12, 0x42, 0x75, 0x6c, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x62,
	0x75, 0x6c, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x75, 0x6c, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x65, 0x71, 0x4e, 0x75, 0x6d, 0x22, 0x92, 0x03, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12,
	0x48, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x6f, 0x67, 0x5f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2e, 0x0a, 0x09, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x47, 0x49, 0x4f,
	0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x47, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x01, 0x22, 0x0c, 0x0a, 0x0a, 0x57, 0x41,
	0x4c, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x2a, 0x64, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x42, 0x4d,
	0x0a, 0x31, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x68, 0x61, 0x64,
	0x6f, 0x6f, 0x70, 0x2e, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x68, 0x61, 0x64, 0x65, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x09, 0x57, 0x41, 0x4c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x48, 0x01,
	0x5a, 0x05, 0x2e, 0x2e, 0x2f, 0x70, 0x62, 0x88, 0x01, 0x00, 0xa0, 0x01, 0x01,
}

var (
	file_WAL_proto_rawDescOnce sync.Once
	file_WAL_proto_rawDescData = file_WAL_proto_rawDesc
)

func file_WAL_proto_rawDescGZIP() []byte {
	file_WAL_proto_rawDescOnce.Do(func() {
		file_WAL_proto_rawDescData = protoimpl.X.CompressGZIP(file_WAL_proto_rawDescData)
	})
	return file_WAL_proto_rawDescData
}

var file_WAL_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_WAL_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_WAL_proto_goTypes = []interface{}{
	(ScopeType)(0),                               // 0: hbase.pb.ScopeType
	(FlushDescriptor_FlushAction)(0),             // 1: hbase.pb.FlushDescriptor.FlushAction
	(RegionEventDescriptor_EventType)(0),         // 2: hbase.pb.RegionEventDescriptor.EventType
	(*WALHeader)(nil),                            // 3: hbase.pb.WALHeader
	(*WALKey)(nil),                               // 4: hbase.pb.WALKey
	(*FamilyScope)(nil),                          // 5: hbase.pb.FamilyScope
	(*CompactionDescriptor)(nil),                 // 6: hbase.pb.CompactionDescriptor
	(*FlushDescriptor)(nil),                      // 7: hbase.pb.FlushDescriptor
	(*StoreDescriptor)(nil),                      // 8: hbase.pb.StoreDescriptor
	(*BulkLoadDescriptor)(nil),                   // 9: hbase.pb.BulkLoadDescriptor
	(*RegionEventDescriptor)(nil),                // 10: hbase.pb.RegionEventDescriptor
	(*WALTrailer)(nil),                           // 11: hbase.pb.WALTrailer
	(*FlushDescriptor_StoreFlushDescriptor)(nil), // 12: hbase.pb.FlushDescriptor.StoreFlushDescriptor
	(*UUID)(nil),                                 // 13: hbase.pb.UUID
	(*TableName)(nil),                            // 14: hbase.pb.TableName
	(*ServerName)(nil),                           // 15: hbase.pb.ServerName
}
var file_WAL_proto_depIdxs = []int32{
	13, // 0: hbase.pb.WALKey.cluster_id:type_name -> hbase.pb.UUID
	5,  // 1: hbase.pb.WALKey.scopes:type_name -> hbase.pb.FamilyScope
	13, // 2: hbase.pb.WALKey.cluster_ids:type_name -> hbase.pb.UUID
	0,  // 3: hbase.pb.FamilyScope.scope_type:type_name -> hbase.pb.ScopeType
	1,  // 4: hbase.pb.FlushDescriptor.action:type_name -> hbase.pb.FlushDescriptor.FlushAction
	12, // 5: hbase.pb.FlushDescriptor.store_flushes:type_name -> hbase.pb.FlushDescriptor.StoreFlushDescriptor
	14, // 6: hbase.pb.BulkLoadDescriptor.table_name:type_name -> hbase.pb.TableName
	8,  // 7: hbase.pb.BulkLoadDescriptor.stores:type_name -> hbase.pb.StoreDescriptor
	2,  // 8: hbase.pb.RegionEventDescriptor.event_type:type_name -> hbase.pb.RegionEventDescriptor.EventType
	8,  // 9: hbase.pb.RegionEventDescriptor.stores:type_name -> hbase.pb.StoreDescriptor
	15, // 10: hbase.pb.RegionEventDescriptor.server:type_name -> hbase.pb.ServerName
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_WAL_proto_init() }
func file_WAL_proto_init() {
	if File_WAL_proto != nil {
		return
	}
	file_HBase_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_WAL_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WALHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WAL_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WALKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WAL_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyScope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WAL_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactionDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WAL_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WAL_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WAL_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkLoadDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WAL_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionEventDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WAL_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WALTrailer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WAL_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushDescriptor_StoreFlushDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_WAL_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_WAL_proto_goTypes,
		DependencyIndexes: file_WAL_proto_depIdxs,
		EnumInfos:         file_WAL_proto_enumTypes,
		MessageInfos:      file_WAL_proto_msgTypes,
	}.Build()
	File_WAL_proto = out.File
	file_WAL_proto_rawDesc = nil
	file_WAL_proto_goTypes = nil
	file_WAL_proto_depIdxs = nil
}
